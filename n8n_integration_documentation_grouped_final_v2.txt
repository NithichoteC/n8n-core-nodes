# Table of Contents

## A
1. ActionNetwork.md ---
2. ActivationTrigger.md ---
3. ActiveCampaign.md ---
4. AcuitySchedulingTrigger.md ---
5. Adalo.md ---
6. Affinity.md ---
7. Aggregate.md ---
8. AgileCrm.md ---
9. Airtable.md ---
10. Amplitude.md ---
11. Amqp.md ---
12. Asana.md ---
13. Autopilot.md ---
14. AwsDynamoDb.md ---
15. AwsLambda.md ---
16. AwsRekognition.md ---
17. AwsS3.md ---
18. AwsSes.md ---
19. AwsSns.md ---
20. AwsTextract.md ---
21. AzureStorage.md ---

## B
22. Bamboohr.md ---
23. Bannerbear.md ---
24. Baserow.md ---
25. Beeminder.md ---
26. Bigcommerce.md ---
27. Bitly.md ---
28. Bitwarden.md ---
29. Box.md ---
30. Brandfetch.md ---
31. Brevo.md ---
32. Bubble.md ---

## C
33. Calendly.md ---
34. CalTrigger.md ---
35. Chargebee.md ---
36. Circleci.md ---
37. CiscoWebex.md ---
38. Clearbit.md ---
39. Clickhouse.md ---
40. ClickUp.md ---
41. Clockify.md ---
42. Cloudflare.md ---
43. Cockpit.md ---
44. Coda.md ---
45. Coingecko.md ---
46. Community_beehiiv.md ---
47. Community_browser.md ---
48. Community_influxdb.md ---
49. Community_keycloak.md ---
50. Community_klaviyo.md ---
51. Community_listmonk.md ---
52. Community_mastodon.md ---
53. Community_sharepoint.md ---
54. Contentful.md ---
55. Convertkit.md ---
56. Copper.md ---
57. Customerio.md ---

## D
58. Datadog.md ---
59. Deepl.md ---
60. Discord.md ---
61. Discourse.md ---
62. Dropbox.md ---

## E
63. EditImage.md ---
64. Elasticsearch.md ---
65. EmailReadImap.md ---
66. EmailSend.md ---
67. ErrorTrigger.md ---
68. EventbriteTrigger.md ---
69. ExecuteCommand.md ---
70. ExecuteWorkflow.md ---
71. ExecuteWorkflowTrigger.md ---

## F
72. FacebookGraphApi.md ---
73. FacebookTrigger.md ---
74. FileMaker.md ---
75. Flow.md ---
76. FormTrigger.md ---
77. Freshdesk.md ---
78. Freshservice.md ---
79. Ftp.md ---

## G
80. Getresponse.md ---
81. Ghost.md ---
82. GitHub.md ---
83. GithubTrigger.md ---
84. Gitlab.md ---
85. GoogleAds.md ---
86. GoogleAnalytics.md ---
87. GoogleBigQuery.md ---
88. Googlebooks.md ---
89. GoogleCalendar.md ---
90. GoogleCalendarTrigger.md ---
91. GoogleChat.md ---
92. Googlecloudnaturallanguage.md ---
93. GoogleCloudStorage.md ---
94. GoogleContacts.md ---
95. GoogleDirectory.md ---
96. GoogleDocs.md ---
97. GoogleDrive.md ---
98. GoogleDriveTrigger.md ---
99. GoogleGmail.md ---
100. GoogleSheets.md ---
101. GoogleSheetsTrigger.md ---
102. Googleslides.md ---
103. GoogleTasks.md ---
104. Googletranslate.md ---
105. Googlevertexai_chatmodel.md ---
106. Gotify.md ---
107. Grafana.md ---
108. Graphql.md ---

## H
109. Harvest.md ---
110. HelpScout.md ---
111. Heroku.md ---
112. Homeassistant.md ---
113. HttpRequest.md ---
114. Hubspot.md ---
115. HumanticAi.md ---

## I
116. Instagram.md ---
117. Integration_googleforms_webhook.md ---
118. Integration_googlekeep_status.md ---
119. Integration_grav_status.md ---
120. Integration_greenhouse_status.md ---
121. Integration_linktree_status.md ---
122. Integration_mailparser_status.md ---
123. Integration_makecom_status.md ---
124. Integration_marketo_status.md ---
125. Integration_metarouter_status.md ---
126. Integration_microsoftforms_status.md ---
127. Integration_miro_status.md ---
128. Integration_onesignal_status.md ---
129. Intercom.md ---
130. InvoiceNinja.md ---

## J
131. Jira.md ---
132. JiraSoftware.md ---
133. Jotformtrigger.md ---

## K
134. KafkaTrigger.md ---
135. Keap.md ---

## L
136. Langchain_anthropicChatModel.md ---
137. Langchain_awsBedrockChatModel.md ---
138. Langchain_azureOpenAIChatModel.md ---
139. Langchain_chatTrigger.md ---
140. Langchain_cohereModel.md ---
141. Langchain_embeddingsAwsBedrock.md ---
142. Langchain_embeddingsAzureOpenAI.md ---
143. Langchain_embeddingsCohere.md ---
144. Langchain_embeddingsGooglePalm.md ---
145. Langchain_embeddingsHuggingFaceInference.md ---
146. Langchain_embeddingsMistralCloud.md ---
147. Langchain_embeddingsOllama.md ---
148. Langchain_embeddingsOpenAI.md ---
149. Langchain_githubDocumentLoader.md ---
150. Langchain_huggingFaceInferenceModel.md ---
151. Langchain_mistralCloudChatModel.md ---
152. Langchain_motorheadMemory.md ---
153. Langchain_ollamaChatModel.md ---
154. Langchain_ollamaModel.md ---
155. Langchain_openAIChatModel.md ---
156. Langchain_pgvectorVectorStore.md ---
157. Langchain_postgresChatMemory.md ---
158. Langchain_qdrantVectorStore.md ---
159. Langchain_redisChatMemory.md ---
160. Langchain_serpApiTool.md ---
161. Langchain_supabaseVectorStore.md ---
162. Langchain_vectorStoreRetrieverPinecone.md ---
163. Langchain_vectorStoreUpsertPinecone.md ---
164. Langchain_wikipediaTool.md ---
165. Langchain_wolframAlphaTool.md ---
166. Langchain_xataMemory.md ---
167. Langchain_zepMemory.md ---
168. Langchain_zepVectorStore.md ---
169. Lemlist.md ---
170. Linear.md ---
171. LinkedIn.md ---

## M
172. Mailchimp.md ---
173. Mailgun.md ---
174. Mailjet.md ---
175. Mariadb_mysql.md ---
176. Matomo.md ---
177. Mattermost.md ---
178. Mautic.md ---
179. Metabase.md ---
180. MicrosoftDynamicsCrm.md ---
181. MicrosoftExcel.md ---
182. MicrosoftOneDrive.md ---
183. MicrosoftOutlook.md ---
184. MicrosoftSql.md ---
185. MicrosoftTeams.md ---
186. Microsofttodo.md ---
187. Mindee.md ---
188. Misp.md ---
189. Mixpanel.md ---
190. Moco.md ---
191. MondayCom.md ---
192. MongoDb.md ---
193. MqttTrigger.md ---
194. Msg91.md ---
195. MySql.md ---

## N
196. Netlify.md ---
197. Newrelic.md ---
198. Nextcloud.md ---
199. NocoDb.md ---
200. NoOp.md ---
201. Notion.md ---

## O
202. Odoo.md ---
203. Ollama.md ---
204. Onedrive.md ---
205. OpenAi.md ---
206. OwnCloud.md ---

## P
207. PagerDuty.md ---
208. Pinterest.md ---
209. Pipedrive.md ---
210. PipedriveTrigger.md ---
211. Pocket.md ---
212. Postgres.md ---
213. Pushbullet.md ---
214. Pushover.md ---

## Q
215. QuickBooks.md ---

## R
216. RabbitMqTrigger.md ---
217. Redis.md ---
218. Replit.md ---
219. RespondToWebhook.md ---
220. RocketChat.md ---
221. RssFeedRead.md ---

## S
222. Salesforce.md ---
223. SalesforceTrigger.md ---
224. SeaTable.md ---
225. SendGrid.md ---
226. SendInBlue.md ---
227. ServiceNow.md ---
228. Slack.md ---
229. Square.md ---
230. Stabilityai.md ---
231. Stripe.md ---

## T
232. Teable.md ---
233. Telegram.md ---
234. Tiktok.md ---

## V
235. Vercel.md ---

---

## 1. ActionNetwork.md ---

## Action Network Node

**Node Type:** Action Node (Base)

**Description:**

The Action Network node provides an interface to interact with the Action Network API, a platform commonly used for digital organizing and activism. It allows automating tasks related to managing people (activists), events, petitions, tags, attendances, and signatures within your Action Network account.

**Credentials:**

Requires an Action Network API Key. Refer to the [Action Network credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/actionnetwork/) for guidance on obtaining and configuring the API key in n8n.

**AI Tool Integration:**

This node can be utilized as a tool within n8n's AI Agent, allowing AI to direct its operations and parameters. See [AI tool parameters documentation](https://docs.n8n.io/ai/tools/#tool-parameters) for more details.

**Operations:**

The node supports various resources and actions:

*   **Attendance:**
    *   Create: Record attendance for an event.
    *   Get: Retrieve details of a specific attendance record.
    *   Get All: Retrieve a list of attendance records (potentially filtered).
*   **Event:**
    *   Create: Create a new event.
    *   Get: Retrieve details of a specific event.
    *   Get All: Retrieve a list of events (potentially filtered).
*   **Person:**
    *   Create: Add a new person (activist) to your network.
    *   Get: Retrieve details of a specific person.
    *   Get All: Retrieve a list of people (potentially filtered).
    *   Update: Modify details of an existing person.
*   **Person Tag:**
    *   Add: Apply a tag to a person.
    *   Remove: Remove a tag from a person.
*   **Petition:**
    *   Create: Create a new petition.
    *   Get: Retrieve details of a specific petition.
    *   Get All: Retrieve a list of petitions (potentially filtered).
    *   Update: Modify details of an existing petition.
*   **Signature:**
    *   Create: Add a signature to a petition.
    *   Get: Retrieve details of a specific signature.
    *   Get All: Retrieve a list of signatures (potentially filtered).
    *   Update: Modify details of an existing signature.
*   **Tag:**
    *   Create: Create a new tag.
    *   Get: Retrieve details of a specific tag.
    *   Get All: Retrieve a list of tags (potentially filtered).

**Parameters:**

Parameters vary depending on the selected Resource and Operation. Common parameters include:

*   IDs for specific resources (e.g., Person ID, Event ID, Tag ID).
*   Data fields for creating or updating resources (e.g., Person's email, name, address; Event title, start date).
*   Filters and pagination options for 'Get All' operations.
*   Options like 'Resolve Person' to automatically look up or create a person based on email.

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters.

**Output:**

Outputs the result of the API call, typically the created/updated/retrieved resource data or a success/failure status.

**Note on Unsupported Operations:**

If a specific Action Network API endpoint or operation is not directly supported by this node, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Action Network credentials to make custom API calls.

**Templates and Examples:**

*   [Browse Action Network integration templates](https://n8n.io/integrations/action-network/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 2. ActivationTrigger.md ---

## Activation Trigger Node (Deprecated)

**Node Type:** Trigger Node (`n8n-nodes-base.activationTrigger`)

**Source:** [https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.activationtrigger/](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.activationtrigger/)

**Deprecation Notice:**

This node has been deprecated and replaced by two new nodes:

*   **n8n Trigger node:** Handles `Start` events (when n8n starts or restarts).
*   **Workflow Trigger node:** Handles `Activation` and `Update` events for the specific workflow it's added to.

Refer to the [breaking changes documentation](https://docs.n8n.io/breaking-changes/) for more details.

**Description:**

(Deprecated) This node triggers when specific events occur within n8n or a workflow.

**Usage Note:**

This node should be added directly to the workflow you want to monitor. It triggers based on events related to *that specific workflow* or the n8n instance itself.

**Parameters:**

*   **Events:** Select the event(s) that should trigger the workflow:
    *   **Activation:** Runs when the workflow containing this node is activated.
    *   **Start:** Runs when the n8n instance starts or restarts.
    *   **Update:** Runs when the workflow containing this node is saved while it is active.

**Input:**

None. This is a trigger node.

**Output:**

Outputs data related to the triggering event (e.g., workflow details for Activation/Update, instance details for Start).

**Example Use Cases (for deprecated node):**

*   Sending a notification when a specific workflow is activated or updated.
*   Performing initialization tasks when the n8n instance starts.

**Recommendation:**

Use the newer **n8n Trigger** and **Workflow Trigger** nodes for these functionalities in current n8n versions.

---

## 3. ActiveCampaign.md ---

# ActiveCampaign node documentation | n8n Docs

Use the ActiveCampaign node to automate work in ActiveCampaign, and integrate ActiveCampaign with other applications. n8n has built-in support for a wide range of ActiveCampaign features, including creating, getting, updating, and deleting accounts, contact, orders, e-commerce customers, connections, lists, tags, and deals.

On this page, you'll find a list of operations the ActiveCampaign node supports and links to more resources.

## Credentials

Refer to [ActiveCampaign credentials](https://docs.n8n.io/integrations/builtin/credentials/activecampaign/) for guidance on setting up authentication.

## AI Tool Usage

This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/ai-tools/#node-parameters).

## Operations

*   **Account**
    *   Create an account
    *   Delete an account
    *   Get data of an account
    *   Get data of all accounts
    *   Update an account
*   **Account Contact**
    *   Create an association
    *   Delete an association
    *   Update an association
*   **Contact**
    *   Create a contact
    *   Delete a contact
    *   Get data of a contact
    *   Get data of all contact
    *   Update a contact
*   **Contact List**
    *   Add contact to a list
    *   Remove contact from a list
*   **Contact Tag**
    *   Add a tag to a contact
    *   Remove a tag from a contact
*   **Connection**
    *   Create a connection
    *   Delete a connection
    *   Get data of a connection
    *   Get data of all connections
    *   Update a connection
*   **Deal**
    *   Create a deal
    *   Delete a deal
    *   Get data of a deal
    *   Get data of all deals
    *   Update a deal
    *   Create a deal note
    *   Update a deal note
*   **E-commerce Order**
    *   Create a order
    *   Delete a order
    *   Get data of a order
    *   Get data of all orders
    *   Update a order
*   **E-Commerce Customer**
    *   Create a E-commerce Customer
    *   Delete a E-commerce Customer
    *   Get data of a E-commerce Customer
    *   Get data of all E-commerce Customer
    *   Update a E-commerce Customer
*   **E-commerce Order Products**
    *   Get data of all order products
    *   Get data of a ordered product
    *   Get data of an order's products
*   **List**
    *   Get all lists
*   **Tag**
    *   Create a tag
    *   Delete a tag
    *   Get data of a tag
    *   Get data of all tags
    *   Update a tag

## Templates and examples

*   [Browse ActiveCampaign integration templates](https://n8n.io/integrations/activecampaign/)
*   [Search all templates](https://n8n.io/workflows/)

## Handling Unsupported Operations

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

1.  In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2.  Select the service you want to connect to.
3.  Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/creating-nodes/build/programmatic-style/custom-api-operations/) for more information.

---

## 4. AcuitySchedulingTrigger.md ---

# Acuity Scheduling Trigger node documentation | n8n Docs

[Acuity Scheduling](https://acuityscheduling.com/) is a cloud-based appointment scheduling software solution that enables business owners to manage their appointments online. It has the capability to automatically sync calendars according to users' time zones and can send regular alerts and reminders to users regarding their appointment schedules.

This trigger node allows you to start workflows based on events in Acuity Scheduling, such as when an appointment is scheduled, rescheduled, or canceled.

## Credentials

You can find authentication information for this node [here](https://docs.n8n.io/integrations/builtin/credentials/acuityscheduling/).

## Events

The node triggers on the following events:

*   Appointment Scheduled
*   Appointment Rescheduled
*   Appointment Canceled
*   Appointment Changed (covers Scheduled, Rescheduled, Canceled)
*   Order Completed

## Examples and Templates

For usage examples and templates to help you get started, refer to n8n's [Acuity Scheduling Trigger integrations](https://n8n.io/integrations/acuity-scheduling-trigger/) page.

---

## 5. Adalo.md ---

# Adalo node documentation | n8n Docs

Use the Adalo node to automate work in Adalo, and integrate Adalo with other applications. n8n has built-in support for a wide range of Adalo features, including creating, getting, updating and deleting databases, records, and collections.

On this page, you'll find a list of operations the Adalo node supports and links to more resources.

## Credentials

Refer to [Adalo credentials](https://docs.n8n.io/integrations/builtin/credentials/adalo/) for guidance on setting up authentication.

## Operations

*   **Collection**
    *   Create
    *   Delete
    *   Get
    *   Get Many
    *   Update

## Templates and examples

*   [Browse Adalo integration templates](https://n8n.io/integrations/adalo/)
*   [Search all templates](https://n8n.io/workflows/)

## Related resources

Refer to [Adalo's documentation](https://help.adalo.com/apis) for more information on using Adalo. Their [External Collections with APIs](https://help.adalo.com/apis/external-collections-with-apis) page gives more detail about what you can do with Adalo collections.

## Handling Unsupported Operations

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

1.  In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2.  Select the service you want to connect to.
3.  Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/creating-nodes/build/programmatic-style/custom-api-operations/) for more information.

---

## 6. Affinity.md ---

# Affinity node documentation | n8n Docs

Use the Affinity node to automate work in Affinity, and integrate Affinity with other applications. n8n has built-in support for a wide range of Affinity features, including creating, getting, updating and deleting lists, entries, organization, and persons.

On this page, you'll find a list of operations the Affinity node supports and links to more resources.

## Credentials

Refer to [Affinity credentials](https://docs.n8n.io/integrations/builtin/credentials/affinity/) for guidance on setting up authentication.

## AI Tool Usage

This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/ai-tools/#node-parameters).

## Operations

*   **List**
    *   Get a list
    *   Get all lists
*   **List Entry**
    *   Create a list entry
    *   Delete a list entry
    *   Get a list entry
    *   Get all list entries
*   **Organization**
    *   Create an organization
    *   Delete an organization
    *   Get an organization
    *   Get all organizations
    *   Update an organization
*   **Person**
    *   Create a person
    *   Delete a person
    *   Get a person
    *   Get all persons
    *   Update a person

## Templates and examples

*   [Browse Affinity integration templates](https://n8n.io/integrations/affinity/)
*   [Search all templates](https://n8n.io/workflows/)

---

## 7. Aggregate.md ---

# Aggregate | n8n Docs

Use the Aggregate node to take separate items, or portions of them, and group them together into individual items.

## Node parameters

To begin using the node, select the **Aggregate** type you'd like to use:

*   **Individual Fields**: Aggregate individual fields separately.
*   **All Item Data**: Aggregate all item data into a single list.

### Individual Fields

*   **Input Field Name**: Enter the name of the field in the input data to aggregate together.
*   **Rename Field**: This toggle controls whether to give the field a different name in the aggregated output data. Turn this on to add a different field name. If you're aggregating multiple fields, you must provide new output field names. You can't leave multiple fields undefined.
    *   **Output Field Name**: This field is displayed when you turn on **Rename Field**. Enter the field name for the aggregated output data.

Refer to [Node options](#node-options) for more configuration options.

### All Item Data

*   **Put Output in Field**: Enter the name of the field to output the data in.
*   **Include**: Select which fields to include in the output. Choose from:
    *   **All fields**: The output includes data from all fields with no further parameters.
    *   **Specified Fields**: If you select this option, enter a comma-separated list of fields the output should include data from in the **Fields To Include** parameter. The output will include only the fields in this list.
    *   **All Fields Except**: If you select this option, enter a comma-separated list of fields the output should exclude data from in the **Fields To Exclude** parameter. The output will include all fields not in this list.

Refer to [Node options](#node-options) for more configuration options.

## Node options

You can further configure this node using these **Options**:

*   **Disable Dot Notation**: The node displays this toggle when you select the **Individual Fields** Aggregate. It controls whether to disallow referencing child fields using `parent.child` in the field name (turned on), or allow it (turned off, default).
*   **Merge Lists**: The node displays this toggle when you select the **Individual Fields** Aggregate. Turn it on if the field to aggregate is a list and you want to output a single flat list rather than a list of lists.
*   **Include Binaries**: The node displays this toggle for both Aggregate types. Turn it on if you want to include binary data from the input in the new output.
*   **Keep Missing And Null Values**: The node displays this toggle when you select the **Individual Fields** Aggregate. Turn it on to add a null (empty) entry in the output list when there is a null or missing value in the input. If turned off, the output ignores null or empty values.

## Templates and examples

[Browse Aggregate integration templates](https://n8n.io/integrations/aggregate/)

## Related resources

Learn more about [data structure and data flow](https://docs.n8n.io/data/structure/) in n8n workflows.

---

## 8. AgileCrm.md ---

## Agile CRM Node

**Node Type:** Action Node (Base)

**Description:**

The Agile CRM node allows interaction with the Agile CRM API, enabling automation of sales, marketing, and service tasks. It supports managing companies, contacts, and deals within your Agile CRM account.

**Credentials:**

Requires Agile CRM credentials, which include your Agile CRM domain (e.g., `yourdomain.agilecrm.com`), login email, and API Key. Refer to the [Agile CRM credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/agilecrm/) for setup details.

**AI Tool Integration:**

This node can be utilized as a tool within n8n's AI Agent, allowing AI to direct its operations and parameters. See [AI tool parameters documentation](https://docs.n8n.io/ai/tools/#tool-parameters) for more details.

**Operations:**

The node supports various resources and actions:

*   **Company:**
    *   Create a new company
    *   Delete a company
    *   Get a company (by ID)
    *   Get all companies (with filtering/pagination options)
    *   Update company properties
*   **Contact:**
    *   Create a new contact
    *   Delete a contact
    *   Get a contact (by ID or email)
    *   Get all contacts (with filtering/pagination options)
    *   Update contact properties
*   **Deal:**
    *   Create a new deal
    *   Delete a deal
    *   Get a deal (by ID)
    *   Get all deals (with filtering/pagination options)
    *   Update deal properties

**Parameters:**

Parameters vary based on the selected Resource and Operation. Common parameters include:

*   IDs for specific resources (e.g., Company ID, Contact ID, Deal ID).
*   Email address for identifying contacts.
*   Data fields for creating or updating resources (e.g., company name, contact email/phone/address, deal name/value/milestone).
*   Filtering options (e.g., `page_size`, `cursor` for pagination in 'Get All' operations).
*   Update fields for modifying specific properties.

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters for creating/updating resources.

**Output:**

Outputs the result of the API call, typically the created/updated/retrieved resource data or a success/failure status.

**Templates and Examples:**

*   [Browse Agile CRM integration templates](https://n8n.io/integrations/agile-crm/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 9. Airtable.md ---

# n8n-nodes-base.airtable

## Description

The Airtable node allows interaction with Airtable bases and tables. It supports creating, reading, listing, updating, and deleting records within Airtable.

## Credentials

Requires Airtable API credentials (API Key or Personal Access Token).

## Operations

*   **Append**: Adds new records to the end of a table.
*   **Delete**: Removes records from a table based on their Record ID.
*   **List**: Retrieves multiple records from a table, with options for filtering, sorting, and limiting results.
*   **Read**: Retrieves a single record based on its Record ID.
*   **Update**: Modifies existing records in a table based on their Record ID.

## Parameters (Common)

*   **Authentication**: Select the Airtable credential to use.
*   **Operation**: Select the desired operation (Append, Delete, List, Read, Update).
*   **Base ID**: The ID of the Airtable base.
*   **Table**: The name or ID of the table within the base.

### Parameters (Append Operation)

*   **Fields**: Map input data fields to Airtable table columns.
*   **Options**:
    *   **Typecast**: (Boolean) Attempt to convert string values to Airtable field types.

### Parameters (Delete Operation)

*   **Record ID**: The ID of the record to delete.

### Parameters (List Operation)

*   **Options**:
    *   **Fields**: (String Array) Specify which fields (columns) to include in the response.
    *   **Filter By Formula**: (String) Airtable formula to filter records (e.g., `{Status}="Done"`).
    *   **Max Records**: (Number) Maximum number of records to return.
    *   **Offset**: (String) Used for pagination; retrieve the next page of records.
    *   **Page Size**: (Number) Number of records per page (max 100).
    *   **Return All**: (Boolean) Automatically handle pagination to return all matching records.
    *   **Sort**: (Object Array) Define sorting criteria (field name and direction `asc` or `desc`).
    *   **View**: (String) Name or ID of an Airtable view to use for filtering/sorting.
    *   **Cell Format**: (String: `json`, `string`) How cell values are returned.
    *   **Time Zone**: (String) Timezone for formula functions.
    *   **User Locale**: (String) Locale for formula functions.

### Parameters (Read Operation)

*   **Record ID**: The ID of the record to read.

### Parameters (Update Operation)

*   **Record ID**: The ID of the record to update.
*   **Fields**: Map input data fields to Airtable table columns with the new values.
*   **Options**:
    *   **Typecast**: (Boolean) Attempt to convert string values to Airtable field types.
    *   **Merge**: (Boolean) If true, only update specified fields; if false, clear unspecified fields.

## JSON Structure Example (Conceptual - List Operation)

```json
{
  "parameters": {
    "operation": "list",
    "baseId": "appXXXXXXXXXXXXXX", // Your Base ID
    "table": "tblXXXXXXXXXXXXXX", // Your Table Name or ID
    "options": {
      "returnAll": true,
      "filterByFormula": "{Status} = \"To Do\"",
      "sort": [
        {
          "field": "Priority",
          "direction": "desc"
        }
      ]
    }
  },
  "name": "List Airtable Records",
  "type": "n8n-nodes-base.airtable",
  "typeVersion": 1,
  "position": [
    1100,
    300
  ],
  "credentials": {
    "airtableApi": {
      "id": "YOUR_CREDENTIAL_ID",
      "name": "Airtable Credential Name"
    }
  }
}
```

---

## 10. Amplitude.md ---

# Amplitude Integration

As of the last research, there is no official built-in n8n integration node specifically for Amplitude.

While Amplitude is a popular product analytics platform, direct integration within n8n requires alternative methods. Community interest in an Amplitude node has been expressed, but no official node is currently available in the standard n8n distribution.

Users seeking to integrate Amplitude data might need to rely on:

1.  **Community Nodes:** Check the n8n community forums and repositories for any user-created Amplitude nodes.
2.  **HTTP Request Node:** Utilize n8n's generic HTTP Request node to interact directly with the Amplitude API, provided you handle the authentication and request formatting according to Amplitude's API documentation.

Refer to the official Amplitude API documentation for details on available endpoints and authentication methods if using the HTTP Request node.

---

## 11. Amqp.md ---

## AMQP Sender Node

**Node Type:** Action Node (Base)

**Description:**

The AMQP Sender node allows you to send messages to an AMQP 0-9-1 compatible message broker (like RabbitMQ). It enables integration with message queuing systems for asynchronous communication within your workflows.

**Credentials:**

Requires AMQP credentials configured in n8n, which include the connection URL (e.g., `amqp://user:password@host:port/vhost`) and optional TLS settings. Refer to the [AMQP credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/amqp/) for setup details.

**Operations:**

*   **Send Message:** Sends a message to a specified exchange or queue.
    *   **Exchange:** (String) The name of the exchange to publish the message to. Leave empty to publish directly to a queue specified by the Routing Key.
    *   **Routing Key:** (String, Required) The routing key for the message. If publishing directly to a queue, this should be the queue name.
    *   **Message:** (String, Required) The content of the message to send.
    *   **Options:**
        *   **Persistent:** (Boolean, Default: false) If true, the message will be marked as persistent, suggesting the broker should save it to disk.
        *   **Headers:** (Object) Additional message headers as key-value pairs.
        *   **Content Type:** (String) The MIME type of the message body (e.g., `application/json`).
        *   **Content Encoding:** (String) The encoding of the message body (e.g., `utf-8`).
        *   **Priority:** (Number) The message priority (0-9).
        *   **Correlation ID:** (String) A correlation identifier for request-reply patterns.
        *   **Reply To:** (String) The queue name for receiving replies.
        *   **Expiration:** (String) Message time-to-live in milliseconds.
        *   **Message ID:** (String) A unique identifier for the message.
        *   **Timestamp:** (Boolean, Default: false) If true, adds a timestamp to the message properties.
        *   **Type:** (String) An application-specific message type name.
        *   **User ID:** (String) The user ID of the sending application.
        *   **App ID:** (String) The identifier of the sending application.

**Input:**

Takes data from preceding nodes. The `Message` parameter often uses expressions to reference input data (e.g., `{{ JSON.stringify($json) }}`).

**Output:**

Outputs the input data by default after successfully sending the message.

**Templates and Examples:**

*   [Browse AMQP Sender integration templates](https://n8n.io/integrations/amqp-sender/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 12. Asana.md ---

# n8n-nodes-base.asana

## Description

The Asana node allows interaction with the Asana project management platform. It supports various operations on resources like Projects, Tasks, Subtasks, Users, Comments, and Tags.

## Credentials

Requires Asana credentials (OAuth2 or Personal Access Token).

## Resources and Operations

The node operates on different Asana resources, each with specific operations:

*   **Project**
    *   `Create`: Create a new project.
    *   `Delete`: Delete a project.
    *   `Get`: Retrieve details of a specific project.
    *   `Get All`: List all projects accessible by the user.
    *   `Update`: Modify an existing project.
*   **Subtask**
    *   `Create`: Create a new subtask within a parent task.
    *   `Get All`: List all subtasks for a given task.
*   **Task**
    *   `Create`: Create a new task.
    *   `Delete`: Delete a task.
    *   `Get`: Retrieve details of a specific task.
    *   `Get All`: List all tasks (often requires specifying a project or other filters).
    *   `Move`: Move a task to a different section within a project.
    *   `Search`: Search for tasks within a workspace or organization.
    *   `Update`: Modify an existing task.
*   **Task Comment**
    *   `Add`: Add a comment (story) to a task.
    *   `Remove`: Delete a comment from a task.
*   **Task Tag**
    *   `Add`: Add a tag to a task.
    *   `Remove`: Remove a tag from a task.
*   **Task Project**
    *   `Add`: Add a task to an additional project.
    *   `Remove`: Remove a task from a project.
*   **User**
    *   `Get`: Retrieve details of a specific user.
    *   `Get All`: List all users within a workspace or organization.

## Parameters (Common)

*   **Authentication**: Select the Asana credential.
*   **Resource**: Select the Asana resource (Project, Task, User, etc.).
*   **Operation**: Select the operation for the chosen resource (Create, Get All, Update, etc.).

### Parameters (Vary by Resource/Operation)

*   **Workspace/Organization ID**: Often required to specify the context.
*   **Project ID**: Required for project-specific operations or listing tasks within a project.
*   **Task ID**: Required for task-specific operations (update, delete, get subtasks, add comment, etc.).
*   **User ID**: Required for getting a specific user.
*   **Name**: For creating/updating resources like projects or tasks.
*   **Notes/Description**: For task details.
*   **Assignee**: User ID of the assignee.
*   **Due Date/Due On**: Task due date.
*   **Completed**: Boolean status of a task.
*   **Custom Fields**: Object to set custom field values.
*   **Filters/Search Parameters**: Options for `Get All` or `Search` operations (e.g., completed status, assignee, project, modified date).
*   **Return All**: (Boolean) Option in `Get All` operations to handle pagination automatically.
*   **Limit**: (Number) Limit the number of results returned in `Get All` operations.
*   **Additional Fields**: Options to include specific fields in the response (e.g., `assignee.name`, `custom_fields`).

## JSON Structure Example (Conceptual - Create Task)

```json
{
  "parameters": {
    "resource": "task",
    "operation": "create",
    "workspaceId": "1234567890123", // Workspace/Organization GID
    "projects": [
        "9876543210987" // Project GID where the task should be created
    ],
    "name": "{{ $json.taskName }}",
    "notes": "{{ $json.taskDescription }}",
    "assignee": "{{ $json.assigneeEmailOrGid }}", // Can often use email or GID
    "dueDate": "{{ $json.dueDate }}", // e.g., "2025-12-31"
    "additionalFields": {
        "customFields": { // Example setting a custom field
            "111222333444555": "Value for Custom Field"
        }
    }
  },
  "name": "Create Asana Task",
  "type": "n8n-nodes-base.asana",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    1200,
    400
  ],
  "credentials": {
    "asanaOAuth2Api": { // Or asanaApi for PAT
      "id": "YOUR_CREDENTIAL_ID",
      "name": "Asana Credential Name"
    }
  }
}
```

---

## 13. Autopilot.md ---

## Autopilot Node (Ortto)

**Node Type:** Action Node (`n8n-nodes-base.autopilot`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.autopilot/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.autopilot/)

**Branding Change Notice:**

Autopilot has rebranded to **Ortto**. The n8n Autopilot credentials and nodes are currently only compatible with the original Autopilot API, not the newer Ortto API.

**Description:**

Use the Autopilot node to automate marketing tasks within the Autopilot (now Ortto) platform. This node allows integration with other applications and supports various operations related to contacts and lists.

**Credentials:**

Refer to [Autopilot credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/autopilot/) for guidance on setting up authentication.

**Operations:**

*   **Contact**
    *   Create/Update a contact
    *   Delete a contact
    *   Get a contact
    *   Get all contacts
*   **Contact Journey**
    *   Add contact to list (Note: This operation might be duplicated under Contact List, verify functionality)
*   **Contact List**
    *   Add contact to list
    *   Check if contact is on list
    *   Get all contacts on list
    *   Remove a contact from a list
*   **List**
    *   Create a list
    *   Get all lists

---

## Autopilot Trigger Node (Ortto)

**Node Type:** Trigger Node (`n8n-nodes-base.autopilottrigger`)

**Source:** [https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.autopilottrigger/](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.autopilottrigger/)

**Branding Change Notice:**

Autopilot has rebranded to **Ortto**. This trigger node works with the original Autopilot API.

**Description:**

This trigger node starts a workflow when specific events occur within Autopilot (now Ortto).

**Credentials:**

Uses the same [Autopilot credentials](https://docs.n8n.io/integrations/builtin/credentials/autopilot/) as the action node.

**Events:**

*   Contact added
*   Contact added to a list
*   Contact entered a segment
*   Contact left a segment
*   Contact removed from a list
*   Contact unsubscribed
*   Contact updated

---

## 14. AwsDynamoDb.md ---

## AWS DynamoDB Node

**Node Type:** Action Node (Base)

**Description:**

The AWS DynamoDB node allows interaction with Amazon DynamoDB, a fully managed NoSQL key-value and document database. It enables creating, reading, updating, and deleting items (records) within your DynamoDB tables.

**Credentials:**

Requires AWS credentials configured in n8n. These can be AWS Access Key/Secret Key pairs or IAM Role credentials. Refer to the [AWS credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/aws/) for setup details.

**Operations:**

The node primarily operates on the **Item** resource:

*   **Create/Upsert (Put Item):** Creates a new item or replaces an existing item entirely if an item with the same primary key already exists.
*   **Delete Item:** Removes an item based on its primary key.
*   **Get Item:** Retrieves a single item based on its primary key.
*   **Get All Items (Scan/Query):** Retrieves multiple items from a table. By default, this performs a Scan operation, which reads every item. You can optionally provide filter expressions or use Query operations (if specifying key conditions) for more efficient retrieval, though the node interface primarily exposes Scan functionality for 'Get All'.
    *   *Note:* Scan operations can be inefficient and costly on large tables. Consider using specific Get operations or designing tables for efficient Query operations where possible.

**Parameters:**

Parameters vary based on the selected Operation:

*   **Table Name:** (String, Required) The name of the DynamoDB table to interact with.
*   **Region:** (String, Required) The AWS region where the DynamoDB table is located (e.g., `us-east-1`).
*   **Key:** (Object, Required for Get/Delete/Create-if-exists) Specifies the primary key of the item. This is an object containing attribute names and their values (e.g., `{"id": "123"}` or `{"partitionKey": "abc", "sortKey": 456}`). The structure must match the table's key schema.
*   **Item:** (Object, Required for Create/Upsert) The data for the item to be created or updated, represented as a JSON object. Attribute names are keys, and values must conform to DynamoDB data types (String, Number, Boolean, Binary, List, Map, Set).
*   **Return Values:** (Dropdown, Optional for Delete/Update) Specifies what information to return after an operation (e.g., `NONE`, `ALL_OLD`, `UPDATED_NEW`).
*   **Options (for Get All):**
    *   **Limit:** (Number) Maximum number of items to return.
    *   **Scan Index Forward:** (Boolean) For Query operations, specifies the order for index traversal.
    *   **Filter Expression:** (String) A condition expression to filter results (used with Scan).
    *   **Projection Expression:** (String) Specifies the attributes to retrieve.
    *   **Expression Attribute Names/Values:** (Objects) Placeholders for attribute names and values used in expressions.

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters like Key or Item data.

**Output:**

Outputs the result of the DynamoDB API call. For Get/Get All, this includes the retrieved item(s). For Create/Delete/Update, it might include returned values based on the `Return Values` parameter or just a success status.

**Note on Unsupported Operations:**

For advanced DynamoDB operations not directly exposed by the node (e.g., complex queries, batch operations, table management), use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with AWS Signature V4 authentication provided by your AWS credentials.

---

## 15. AwsLambda.md ---

# n8n-nodes-base.awsLambda

## Description

The AWS Lambda node allows you to invoke AWS Lambda functions directly from your n8n workflows. This enables integration with serverless compute resources on AWS.

## Credentials

Requires AWS credentials (Access Key ID, Secret Access Key, and optionally Session Token) with appropriate IAM permissions to invoke the target Lambda function (`lambda:InvokeFunction`).

## Operations

*   **Invoke**: Executes a specified Lambda function.

## Parameters

*   **Authentication**: Select the AWS credential to use.
*   **Region**: Select the AWS region where the Lambda function is deployed.
*   **Function Name**: The name or ARN (Amazon Resource Name) of the Lambda function to invoke.
*   **Invocation Type**: (Optional) Specifies how to invoke the function:
    *   `RequestResponse` (default): Invoke synchronously. Waits for the function to complete and returns the response.
    *   `Event`: Invoke asynchronously. Sends the event and returns immediately.
    *   `DryRun`: Validate parameter values and verify permissions without executing the function.
*   **Payload**: (JSON/Expression) The input payload (event data) to pass to the Lambda function. This should be a valid JSON object or an expression evaluating to one.
*   **Qualifier**: (Optional, String) Specify a Lambda function version or alias name.
*   **Log Type**: (Optional) Set to `Tail` to include the last 4 KB of execution log returned in the `LogResult` field (only for `RequestResponse` invocation type).

## JSON Structure Example (Conceptual - Invoke Operation)

```json
{
  "parameters": {
    "functionName": "arn:aws:lambda:us-east-1:123456789012:function:my-function", // Function Name or ARN
    "region": "us-east-1",
    "invocationType": "RequestResponse", // or "Event", "DryRun"
    "payload": "={{ { \"key1\": \"value1\", \"key2\": $json.someData } }}" // JSON payload as string or expression
    // "qualifier": "$LATEST" // Optional version or alias
    // "logType": "Tail" // Optional
  },
  "name": "Invoke My Lambda",
  "type": "n8n-nodes-base.awsLambda",
  "typeVersion": 1,
  "position": [
    1300,
    500
  ],
  "credentials": {
    "aws": {
      "id": "YOUR_AWS_CREDENTIAL_ID",
      "name": "AWS Credential Name"
    }
  }
}
```

---

## 16. AwsRekognition.md ---

## AWS Rekognition Node

**Node Type:** Action Node (Base)

**Description:**

The AWS Rekognition node integrates with Amazon Rekognition, a service that provides image and video analysis capabilities. This node allows you to leverage Rekognition's features, primarily focusing on analyzing images to detect objects, scenes, faces, text, and more within your n8n workflows.

**Credentials:**

Requires AWS credentials configured in n8n. These can be AWS Access Key/Secret Key pairs or IAM Role credentials. Refer to the [AWS credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/aws/) for setup details.

**Operations:**

The node supports the following resource and operation:

*   **Image:**
    *   **Analyze:** Performs various analyses on an input image. You select the specific features you want to detect.

**Parameters (for Image > Analyze):**

*   **Region:** (String, Required) The AWS region where the Rekognition service should be called (e.g., `us-east-1`).
*   **Features:** (Multi-select, Required) Choose one or more analysis types to perform:
    *   `Detect Labels`: Identifies objects, scenes, actions, etc.
    *   `Detect Faces`: Detects faces and analyzes attributes (e.g., gender, emotions).
    *   `Detect Moderation Labels`: Identifies potentially unsafe or inappropriate content.
    *   `Detect Text`: Extracts text found within the image (OCR).
    *   `Recognize Celebrities`: Identifies known celebrities in the image.
    *   `Detect Protective Equipment`: Detects personal protective equipment (PPE) like face masks, head covers, hand covers.
*   **Source:** (Dropdown, Required) Specify the image source:
    *   `S3 Object`: Analyze an image stored in an S3 bucket.
        *   **Bucket:** (String) Name of the S3 bucket.
        *   **Filename:** (String) Key (path) of the image file within the bucket.
        *   **Version ID:** (String, Optional) Specific version of the S3 object.
    *   `File Upload`: Analyze an image provided as binary data from a previous node.
        *   **Binary Property:** (String) Name of the binary property containing the image data (usually `data`).
*   **Options:**
    *   **Min Confidence:** (Number, 0-100) Minimum confidence level for detected labels/faces/etc. to be included in the results.
    *   **Max Labels:** (Number) Maximum number of labels to return.

**Input:**

If using `File Upload`, expects binary image data from a preceding node.

**Output:**

Outputs the analysis results from AWS Rekognition, structured according to the selected features. This typically includes detected labels, faces, text blocks, moderation labels, etc., along with confidence scores and bounding box coordinates.

**Note on Unsupported Operations:**

For other Rekognition API actions not directly supported by this node (e.g., video analysis, custom labels, collection management), use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with AWS Signature V4 authentication provided by your AWS credentials.

**Templates and Examples:**

*   [Browse AWS Rekognition integration templates](https://n8n.io/integrations/aws-rekognition/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 17. AwsS3.md ---

# n8n-nodes-base.awsS3

## Description

The AWS S3 node allows interaction with Amazon Simple Storage Service (S3). It supports operations on buckets, files (objects), and folders within S3.

## Credentials

Requires AWS credentials (Access Key ID, Secret Access Key, and optionally Session Token) with appropriate IAM permissions for the desired S3 operations (e.g., `s3:ListAllMyBuckets`, `s3:PutObject`, `s3:GetObject`, `s3:DeleteObject`, `s3:CreateBucket`, `s3:DeleteBucket`).

## Resources and Operations

*   **Bucket**
    *   `Create`: Create a new S3 bucket.
    *   `Delete`: Delete an existing S3 bucket (must be empty).
    *   `Get All`: List all buckets owned by the authenticated sender.
    *   `Search`: List objects within a bucket (can filter by prefix, effectively searching).
*   **File**
    *   `Copy`: Copy an object within S3 or between buckets.
    *   `Delete`: Delete an object from a bucket.
    *   `Download`: Download an object from a bucket (retrieves as binary data in n8n).
    *   `Get All`: List all objects within a bucket (can filter by prefix).
    *   `Upload`: Upload a file (binary data from n8n) to an S3 bucket.
*   **Folder** (Note: S3 doesn't have true folders, operations often work on prefixes)
    *   `Create`: Create a 'folder' by creating an object with a trailing slash (e.g., `myfolder/`).
    *   `Delete`: Delete a 'folder' (objects with the specified prefix).
    *   `Get All`: List 'folders' (common prefixes) within a bucket/prefix.

## Parameters (Common)

*   **Authentication**: Select the AWS credential.
*   **Region**: Select the AWS region for the operation (important for bucket creation and accessing regional buckets).
*   **Resource**: Select the resource type (Bucket, File, Folder).
*   **Operation**: Select the operation for the chosen resource.
*   **Bucket Name**: The name of the target S3 bucket.

### Parameters (Vary by Resource/Operation)

*   **File Name / Key**: The object key (path) within the bucket.
*   **Prefix**: Used for filtering in `Get All` or `Search` operations (e.g., `images/` or `documents/report`).
*   **Source Bucket/Key**: For the `Copy` file operation.
*   **Destination Bucket/Key**: For the `Copy` file operation.
*   **Binary Property**: Name of the binary property in n8n's input data containing the file to upload (for `Upload` operation).
*   **Folder Name**: Prefix used for folder operations.
*   **ACL (Access Control List)**: (Optional) Set predefined ACLs during bucket creation or file upload (e.g., `private`, `public-read`).
*   **Metadata**: (Optional, Object) Set custom metadata during file upload.
*   **Return All**: (Boolean) Option in `Get All` operations to handle pagination automatically.
*   **Limit**: (Number) Limit the number of results returned in `Get All` operations.
*   **Delimiter**: Used in `Get All` operations to group keys by prefix (simulating folders).

## JSON Structure Example (Conceptual - Upload File)

```json
{
  "parameters": {
    "resource": "file",
    "operation": "upload",
    "bucketName": "my-n8n-data-bucket",
    "fileName": "reports/{{ $now.toFormat('yyyy-MM-dd') }}/report-{{ $json.id }}.pdf", // Dynamic file key
    "binaryPropertyName": "data", // Assumes input item has binary data in property 'data'
    "region": "eu-west-1",
    "options": {
        "acl": "private",
        "metadata": {
            "processed-by": "n8n-workflow-xyz",
            "original-source": "{{ $json.sourceSystem }}"
        }
    }
  },
  "name": "Upload Report to S3",
  "type": "n8n-nodes-base.awsS3",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    1400,
    600
  ],
  "credentials": {
    "aws": {
      "id": "YOUR_AWS_CREDENTIAL_ID",
      "name": "AWS Credential Name"
    }
  }
}
```

---

## 18. AwsSes.md ---

## AWS SES Node

**Node Type:** Action Node (Base)

**Description:**

The AWS SES (Simple Email Service) node allows you to send emails and manage email templates and verification using Amazon SES. It provides a scalable and cost-effective way to handle email communication within your n8n workflows.

**Credentials:**

Requires AWS credentials configured in n8n. These can be AWS Access Key/Secret Key pairs or IAM Role credentials. Refer to the [AWS credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/aws/) for setup details. You also need to ensure the email addresses or domains you are sending from/to are verified within your AWS SES account.

**AI Tool Integration:**

This node can be utilized as a tool within n8n's AI Agent, allowing AI to direct its operations and parameters. See [AI tool parameters documentation](https://docs.n8n.io/ai/tools/#tool-parameters) for more details.

**Operations:**

The node supports various resources and actions:

*   **Custom Verification Email:**
    *   Create: Define a custom template for verification emails.
    *   Delete: Remove an existing custom verification email template.
    *   Get: Retrieve details of a specific custom verification email template.
    *   Get All: List all custom verification email templates.
    *   Add Identity: Register an email address or domain for sending.
    *   Update: Modify an existing custom verification email template.
*   **Email:**
    *   Send: Send a standard email (HTML or Text).
    *   Send Template: Send an email using a pre-defined SES template, allowing for personalized content via template data.
*   **Template:**
    *   Create: Define an email template within SES.
    *   Delete: Remove an existing SES template.
    *   Get: Retrieve details of a specific SES template.
    *   Get All: List all SES templates.
    *   Update: Modify an existing SES template.

**Parameters (Common for Email > Send):**

*   **Region:** (String, Required) The AWS region where your SES service is configured (e.g., `us-east-1`).
*   **From Email:** (String, Required) The verified email address to send the email from.
*   **To Addresses:** (String/Array, Required) Comma-separated list or array of recipient email addresses.
*   **Subject:** (String, Required) The subject line of the email.
*   **HTML:** (String, Optional) The HTML content of the email body.
*   **Text:** (String, Optional) The plain text content of the email body (provide at least HTML or Text).
*   **CC Addresses:** (String/Array, Optional) Comma-separated list or array of CC recipient email addresses.
*   **BCC Addresses:** (String/Array, Optional) Comma-separated list or array of BCC recipient email addresses.
*   **Reply To Addresses:** (String/Array, Optional) Email addresses to which replies should be directed.
*   **Attachments:** (String, Optional) Name of the binary property containing attachments (if sending from previous node's binary data).
*   **Source ARN:** (String, Optional) ARN of the identity used for sending authorization.
*   **Return Path ARN:** (String, Optional) ARN of the identity used for bounce/complaint notifications.
*   **Configuration Set Name:** (String, Optional) Name of the SES configuration set to use for tracking/rules.
*   **Tags:** (Object, Optional) Key-value pairs to tag the email message.

**Parameters (Common for Email > Send Template):**

*   Includes parameters like Region, From, To, CC, BCC, Reply To, Source ARN, Return Path ARN, Configuration Set Name, Tags.
*   **Template Name:** (String, Required) The name of the SES template to use.
*   **Template Data:** (JSON String, Required) A JSON string containing key-value pairs to replace placeholders in the template (e.g., `{"name":"John", "orderId":"123"}`).

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters like recipient addresses, subject, body content, or template data.

**Output:**

Outputs the result of the SES API call, typically including a `MessageId` upon successful sending, or details of the created/retrieved/updated/deleted resource.

**Note on Unsupported Operations:**

For other SES API actions not directly supported (e.g., managing identity policies, reputation metrics), use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with AWS Signature V4 authentication.

---

## 19. AwsSns.md ---

## AWS SNS Node

**Node Type:** Action Node (Base)

**Description:**

The AWS SNS (Simple Notification Service) node allows you to publish messages to SNS topics. SNS is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication. This node enables sending notifications or triggering downstream processes subscribed to an SNS topic.

**Credentials:**

Requires AWS credentials configured in n8n. These can be AWS Access Key/Secret Key pairs or IAM Role credentials. Refer to the [AWS credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/aws/) for setup details. The credentials must have permissions to publish to the specified SNS topic.

**Operations:**

The node supports the following primary operation:

*   **Publish Message:** Sends a message to a specified SNS topic. Subscribers to the topic (e.g., SQS queues, Lambda functions, HTTP endpoints, email addresses, SMS numbers) will receive the message.

**Parameters (for Publish Message):**

*   **Region:** (String, Required) The AWS region where the SNS topic exists (e.g., `us-east-1`).
*   **Topic ARN:** (String, Required) The Amazon Resource Name (ARN) of the SNS topic to publish the message to.
*   **Message:** (String, Required) The content of the message to be published. The exact format might depend on the subscribers (e.g., JSON for SQS/Lambda, plain text for email/SMS).
*   **Subject:** (String, Optional) The subject line for the message, primarily used when sending to email subscribers. Limited to 100 characters.
*   **Options:**
    *   **Message Attributes:** (Object/Key-Value Pairs, Optional) Add custom metadata (key-value pairs) to the message. Subscribers can use these attributes for filtering or routing.
        *   *Key:* Name of the attribute.
        *   *Value:* Value of the attribute.
        *   *Data Type:* (String, Required) Type of the attribute value (e.g., `String`, `Number`, `Binary`, `String.Array`).
    *   **Message Deduplication ID:** (String, Optional) Used for FIFO (First-In, First-Out) topics to prevent duplicate messages within the deduplication interval.
    *   **Message Group ID:** (String, Optional) Required for FIFO topics. Messages with the same group ID are processed in order within that group.
    *   **Message Structure:** (String, Optional, Default: `plain`) Set to `json` if the `Message` field contains different message formats for different protocols (e.g., specific content for `email`, `sms`, `sqs`). The `Message` field should then be a JSON string like `{"default": "Default message", "email": "Email body", "sms": "SMS body"}`.
    *   **Phone Number:** (String, Optional) If publishing directly to a phone number (without a topic subscription), specify the E.164 formatted phone number here.

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters like Topic ARN, Message content, Subject, or Message Attributes.

**Output:**

Outputs the result of the SNS Publish API call, typically including a `MessageId` upon successful publication.

**Note on Unsupported Operations:**

For other SNS API actions not directly supported (e.g., creating/managing topics, subscriptions, platform applications), use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with AWS Signature V4 authentication provided by your AWS credentials.

**Templates and Examples:**

*   [Browse AWS SNS integration templates](https://n8n.io/integrations/aws-sns/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 20. AwsTextract.md ---

## AWS Textract Node

**Node Type:** Action Node (Base)

**Description:**

The AWS Textract node integrates with Amazon Textract, a machine learning service that automatically extracts text, handwriting, and data from scanned documents. It goes beyond simple optical character recognition (OCR) to identify the contents of fields in forms and information stored in tables. This node currently focuses on analyzing receipts and invoices.

**Credentials:**

Requires AWS credentials configured in n8n. These can be AWS Access Key/Secret Key pairs or IAM Role credentials. Refer to the [AWS credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/aws/) for setup details. The credentials must have permissions to call the Textract API.

**AI Tool Integration:**

This node can be utilized as a tool within n8n's AI Agent, allowing AI to direct its operations and parameters. See [AI tool parameters documentation](https://docs.n8n.io/ai/tools/#tool-parameters) for more details.

**Operations:**

The node supports the following specific analysis operation:

*   **Analyze Receipt or Invoice:** Extracts data specifically from receipt or invoice documents. Textract uses models trained on these document types to identify relevant fields (e.g., vendor name, total amount, item descriptions, prices).

**Parameters (for Analyze Receipt or Invoice):**

*   **Region:** (String, Required) The AWS region where the Textract service should be called (e.g., `us-east-1`).
*   **Source:** (Dropdown, Required) Specify the document source:
    *   `S3 Object`: Analyze a document stored in an S3 bucket.
        *   **Bucket:** (String, Required) Name of the S3 bucket.
        *   **Filename:** (String, Required) Key (path) of the document file within the bucket.
        *   **Version ID:** (String, Optional) Specific version of the S3 object.
    *   `File Upload`: Analyze a document provided as binary data from a previous node.
        *   **Binary Property:** (String, Required) Name of the binary property containing the document data (usually `data`).
*   **Options:** (Currently no specific options listed in the basic documentation for this operation within the node, but the Textract API itself might support additional parameters like feature types if extended via HTTP Request).

**Input:**

If using `File Upload`, expects binary document data (e.g., PDF, JPG, PNG) from a preceding node.

**Output:**

Outputs the structured data extracted from the receipt or invoice. This includes detected text lines, words, form fields (key-value pairs), and table data, along with confidence scores and geometric bounding box information.

**Note on Unsupported Operations:**

For other Textract API actions not directly supported by this node (e.g., general document text detection `DetectDocumentText`, form/table analysis `AnalyzeDocument`, asynchronous operations for large documents), use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with AWS Signature V4 authentication provided by your AWS credentials.

**Templates and Examples:**

*   [Browse AWS Textract integration templates](https://n8n.io/integrations/aws-textract/templates/)
*   [Search all templates](https://n8n.io/templates/)

---

## 21. AzureStorage.md ---

## Azure Storage Node

**Node Type:** Action Node (`n8n-nodes-base.azurestorage`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.azurestorage/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.azurestorage/)

**Description:**

The Azure Storage node provides built-in support for various features within the Azure Storage service, including managing blobs (like Azure Blob Storage) and containers. It allows automating tasks and integrating Azure Storage with other services in your n8n workflows.

**Credentials:**

Authentication details can be found in the [Azure Storage credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/azurestorage/).

**Operations:**

*   **Blob**
    *   **Create blob**: Creates a new blob or replaces an existing one.
    *   **Delete blob**: Deletes an existing blob.
    *   **Get blob**: Retrieves data for a specific blob.
    *   **Get many blobs**: Retrieves a list of blobs within a container.
*   **Container**
    *   **Create container**: Creates a new container.
    *   **Delete container**: Deletes an existing container.
    *   **Get container**: Retrieves properties for a specific container.
    *   **Get many containers**: Retrieves a list of containers in the storage account.

**Related Resources:**

*   [Microsoft's Azure Storage documentation](https://learn.microsoft.com/en-us/azure/storage/)

**Unsupported Operations:**

If an operation is not listed, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Azure Storage credentials to call the Azure Storage REST API directly. Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-api-operations/) for more details.

---

## 22. Bamboohr.md ---

## BambooHR Node

**Node Type:** Action Node (`n8n-nodes-base.bamboohr`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bamboohr/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bamboohr/)

**Description:**

Use the BambooHR node to automate work in BambooHR and integrate it with other applications. n8n provides built-in support for a wide range of BambooHR features, including creating, deleting, downloading, and getting company reports, employee data, employee documents, and files.

**Credentials:**

Refer to the [BambooHR credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/bamboohr/) for guidance on setting up authentication.

**Operations:**

*   **Company Report**
    *   **Get a company report**: Retrieves a specified company report.
*   **Employee**
    *   **Create an employee**: Adds a new employee record.
    *   **Get an employee**: Retrieves details for a specific employee.
    *   **Get all employees**: Retrieves a list of all employees (potentially filtered).
    *   **Update an employee**: Modifies an existing employee record.
*   **Employee Document**
    *   **Delete an employee document**: Removes a specific document associated with an employee.
    *   **Download an employee document**: Downloads a specific document associated with an employee.
    *   **Get all employee document**: Retrieves a list of documents associated with an employee.
    *   **Update an employee document**: Modifies metadata or details of an employee document.
    *   **Upload an employee document**: Adds a new document associated with an employee.
*   **File**
    *   **Delete a company file**: Removes a specific company-level file.
    *   **Download a company file**: Downloads a specific company-level file.
    *   **Get all company files**: Retrieves a list of all company-level files.
    *   **Update a company file**: Modifies metadata or details of a company file.
    *   **Upload a company file**: Adds a new company-level file.

**Related Resources:**

*   [BambooHR Integration Templates](https://n8n.io/integrations/bamboohr/templates/)
*   [All n8n Templates](https://n8n.io/templates/)

---

## 23. Bannerbear.md ---

## Bannerbear Node

**Node Type:** Action Node (Base)

**Description:**

The Bannerbear node allows you to automate image and video generation using the Bannerbear API. You can create dynamic visuals based on templates and data provided within your n8n workflows.

**Credentials:**

Requires a Bannerbear API Key. Refer to the [Bannerbear credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/bannerbear/) for guidance on obtaining and configuring the API key in n8n.

**Operations:**

The node supports operations on the following resources:

*   **Image:**
    *   Create an image: Generates a new image based on a specified template and modifications.
    *   Get an image: Retrieves details or the status of a previously generated image by its UID.
*   **Template:**
    *   Get a template: Retrieves details of a specific template by its UID.
    *   Get all templates: Retrieves a list of all templates available in your Bannerbear account.

**Parameters (Common for Image > Create):**

*   **Template ID:** (String, Required) The UID of the Bannerbear template to use for image generation.
*   **Modifications:** (Array of Objects/Key-Value Pairs, Optional) Specifies the dynamic changes to apply to the template layers. Each modification object typically includes:
    *   `name`: The name of the layer in the Bannerbear template.
    *   `text`: The new text content (for text layers).
    *   `image_url`: The URL of a new image (for image layers).
    *   `color`: The new color hex code (for shape/text layers).
    *   Other layer-specific properties.
*   **Webhook URL:** (String, Optional) A URL Bannerbear will call upon completion of asynchronous image generation.
*   **Metadata:** (String, Optional) Any custom metadata to associate with the generated image.
*   **Transparent:** (Boolean, Optional) Whether to render the image with a transparent background (if the template supports it).
*   **Render PDF:** (Boolean, Optional) Whether to render a PDF instead of the default image format.

**Parameters (Common for Get/Get All):**

*   **UID:** (String, Required for Get Image/Get Template) The unique identifier of the image or template.
*   **Return All:** (Boolean, Optional for Get All Templates) Whether to retrieve all templates across multiple pages.
*   **Limit:** (Number, Optional for Get All Templates) Maximum number of templates to return per page.
*   **Page:** (Number, Optional for Get All Templates) The page number to retrieve.

**Input:**

Accepts data from previous nodes, often used via expressions to populate parameters like Template ID or Modifications.

**Output:**

*   **Create Image:** Outputs details of the created image, including its UID, status (e.g., `pending`, `completed`), and image URL upon completion.
*   **Get Image:** Outputs the details and status of the specified image.
*   **Get Template/Get All Templates:** Outputs the details of the requested template(s).

**Templates and Examples:**

*   Refer to Bannerbear integration examples on the n8n website or community forums.

---

## 24. Baserow.md ---

## Baserow Node

**Node Type:** Action Node (Base)

**Description:**

The Baserow node allows interaction with Baserow databases, an open-source no-code database platform. It enables creating, retrieving, updating, and deleting rows within your Baserow tables directly from n8n workflows.

**Credentials:**

Requires Baserow credentials, which include your Baserow Host URL (if self-hosted, otherwise `https://api.baserow.io`) and an API Token generated from your Baserow account settings. Refer to the [Baserow credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/baserow/) for setup details.

**AI Tool Integration:**

This node can be utilized as a tool within n8n's AI Agent, allowing AI to direct its operations and parameters. When used this way, ensure tool names clearly indicate the table and function (e.g., `Contacts_CreateRow`, `Projects_UpdateRow`). Field values should be explicitly set using formats like `{{ $fromAI("fieldName") }}` to avoid ambiguity. See [AI tool parameters documentation](https://docs.n8n.io/ai/tools/#tool-parameters) for more details.

**Operations:**

The node operates on the **Row** resource within a specified table:

*   **Create a row:** Adds a new row to the selected table with the provided field data.
    *   *Field Input:* Provide data for each field using the 'Fields' parameter. Ensure data types match the Baserow field types (Text, Number, Boolean, Date, Link Row, etc.). Use explicit formats like `{{ $json.fieldName }}` when mapping from input data.
*   **Delete a row:** Removes a specific row identified by its Row ID.
*   **Retrieve a row:** Fetches the data for a single row identified by its Row ID.
*   **Retrieve all rows:** Fetches multiple rows from the table. Supports filtering, sorting, and pagination.
*   **Update a row:** Modifies the data in an existing row identified by its Row ID.
    *   *Field Input:* Provide data only for the fields you wish to update using the 'Fields' parameter.
    *   *Field Update Behavior:* 
        *   **Text/Number/Email/URL/Date/Boolean:** The provided value replaces the existing value.
        *   **Single Select/Multiple Select:** Provide the *ID* or *Value* of the option(s). Providing an empty value or array clears the selection.
        *   **Link Row (Many-to-Many or One-to-Many):** Provide an *array of Row IDs* from the linked table. This *replaces* the existing linked rows. To add/remove without replacing, you may need multiple steps or custom API calls.
        *   **File:** Provide an *array of objects*, each containing a `name` (filename) and `url` (publicly accessible URL of the file to upload). This *replaces* existing files.
        *   **Other Field Types:** Refer to the Baserow API documentation for specific update requirements for fields like Formula, Lookup, etc., as direct updates might be restricted.
    *   *Important:* Ensure data types and formats match the target field requirements (e.g., dates in ISO format, numbers as numeric types).

**Parameters (Common):**

*   **Table ID:** (Number, Required) The unique ID of the Baserow table to interact with.
*   **Row ID:** (Number, Required for Retrieve/Update/Delete) The unique ID of the row.
*   **Fields:** (Object/Key-Value Pairs, Required for Create/Update) An object where keys are the Baserow field names (or `field_###` IDs) and values are the data to be inserted or updated. Use the 'Add Field' button to map fields.
*   **Options (for Retrieve All):**
    *   **Return All:** (Boolean) Whether to fetch all rows across pages.
    *   **Limit:** (Number) Maximum rows per page.
    *   **Filters:** (Object) Define conditions to filter rows (e.g., `{"field_123": {"equal": "value"}}`). Refer to Baserow API docs for filter types.
    *   **Sorts:** (String) Define sorting order (e.g., `field_123 ASC`, `-field_456 DESC`).
    *   **Include Fields:** (String) Comma-separated list of field names/IDs to include.
    *   **Exclude Fields:** (String) Comma-separated list of field names/IDs to exclude.
    *   **Search:** (String) A general search query across text/email/url fields.
    *   **User Field Names:** (Boolean) Use field names instead of `field_###` IDs in input/output (recommended).

**Input:**

Accepts data from previous nodes, often used via expressions `{{ $json.fieldName }}` to populate the 'Fields' parameter for Create/Update operations or Row ID/Filters for other operations.

**Output:**

Outputs the result of the Baserow API call. For Create/Retrieve/Update, this includes the data of the affected row(s). For Delete, it usually confirms success. For Retrieve All, it outputs an array of row objects.

**Templates and Examples:**

*   Refer to Baserow integration examples on the n8n website or community forums.

---

## 25. Beeminder.md ---

## Beeminder Node

**Node Type:** Action Node (`n8n-nodes-base.beeminder`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.beeminder/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.beeminder/)

**Description:**

Use the Beeminder node to automate work in Beeminder, the goal-tracking tool with commitment contracts. Integrate Beeminder with other applications to automatically add data points to your goals. n8n has built-in support for creating, deleting, getting, and updating data points for Beeminder goals.

**Credentials:**

Refer to the [Beeminder credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/beeminder/) for guidance on setting up authentication (using your username and auth token).

**Operations:**

*   **Data Point**
    *   **Create data point for a goal**: Adds a new data point to a specified goal.
    *   **Delete a data point**: Removes a specific data point by its ID.
    *   **Get all data points for a goal**: Retrieves all data points associated with a specified goal.
    *   **Update a data point**: Modifies an existing data point.

**Related Resources:**

*   [Beeminder Integration Templates](https://n8n.io/integrations/beeminder/templates/)
*   [All n8n Templates](https://n8n.io/templates/)

**Unsupported Operations:**

If an operation is not listed (e.g., managing goals themselves), you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Beeminder credentials to call the Beeminder API directly. Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-api-operations/) for more details.

---

## 26. Bigcommerce.md ---

# BigCommerce Integration

Based on the latest research, n8n does not currently offer an official built-in integration node specifically for BigCommerce.

BigCommerce is a popular e-commerce platform, but integrating it directly with n8n requires alternative approaches. While there might be community interest or third-party solutions, no official node is part of the standard n8n package.

Users looking to connect n8n with BigCommerce can explore the following options:

1.  **Community Nodes:** Search the n8n community forums and GitHub for any community-developed BigCommerce nodes. Previous research indicated a third-party package might exist.
2.  **HTTP Request Node:** Use n8n's versatile HTTP Request node to interact directly with the BigCommerce API. This requires understanding BigCommerce's API structure, authentication methods (often API keys/tokens), and constructing the necessary requests (GET, POST, PUT, DELETE) according to their API documentation.

For detailed information on API endpoints, request formats, and authentication, consult the official BigCommerce API documentation.

---

## 27. Bitly.md ---

## Bitly Node

**Node Type:** Action Node (`n8n-nodes-base.bitly`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bitly/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bitly/)

**Description:**

This node allows interaction with the Bitly API to shorten, retrieve, and manage Bitlinks (shortened URLs).

**Credentials:**

Requires Bitly API credentials (Generic Access Token). Refer to [Bitly Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/bitly/) for setup guidance.

**Resources and Operations:**

The node supports the following resource and operations:

1.  **Link (`link`)**
    *   **Create:** Shortens a long URL into a Bitlink.
        *   *Parameters:*
            *   Long URL (Required, String): The URL to shorten.
            *   Group GUID (Optional, String): The GUID of the group to associate the link with. Defaults to the user's default group.
            *   Domain (Optional, String): The short domain to use (e.g., `bit.ly` or a custom domain). Defaults to `bit.ly` or the group's default BSD.
            *   Title (Optional, String): A title for the Bitlink.
            *   Tags (Optional, String Array): Tags to associate with the Bitlink.
            *   Deeplinks (Optional, Object Array): Parameters for mobile deep linking.
                *   App ID (String)
                *   App URI Path (String)
                *   Install URL (String)
                *   Install Type (String, e.g., `promote_install`)
    *   **Get:** Retrieves details for an existing Bitlink.
        *   *Parameters:*
            *   Bitlink ID (Required, String): The Bitlink ID (e.g., `bit.ly/3xyzABC` or `your.domain/xyzABC`).
    *   **Update:** Modifies an existing Bitlink.
        *   *Parameters:*
            *   Bitlink ID (Required, String): The Bitlink ID to update.
            *   Title (Optional, String): New title for the Bitlink.
            *   Archived (Optional, Boolean): Whether to archive the Bitlink.
            *   Tags (Optional, String Array): New set of tags (replaces existing).
            *   Deeplinks (Optional, Object Array): New set of deeplinks (replaces existing).

**Input:**

Accepts data from previous nodes, typically used via expressions `{{ $json.fieldName }}` to populate parameters like Long URL or Bitlink ID.

**Output:**

*   **Create:** Outputs the details of the newly created Bitlink, including the short URL (`link`), ID (`id`), and the original long URL (`long_url`).
*   **Get:** Outputs the details of the retrieved Bitlink.
*   **Update:** Outputs the updated details of the Bitlink.

**Example Usage:**

*   Automatically shorten URLs from a spreadsheet or database.
*   Retrieve Bitlink details for reporting.
*   Update tags or titles of existing Bitlinks based on external triggers.

---

## 28. Bitwarden.md ---

## Bitwarden Node

**Node Type:** Action Node (`n8n-nodes-base.bitwarden`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bitwarden/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bitwarden/)

**Description:**

Use the Bitwarden node to automate work in Bitwarden, the open-source password manager. Integrate Bitwarden with other applications to manage collections, events, groups, and members within your Bitwarden organization.

**Credentials:**

Refer to the [Bitwarden credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/bitwarden/) for guidance on setting up authentication (using API Key - Client ID and Client Secret).

**Operations:**

*   **Collection**
    *   **Delete**: Removes a specific collection.
    *   **Get**: Retrieves details for a specific collection.
    *   **Get All**: Retrieves a list of all collections.
    *   **Update**: Modifies an existing collection.
*   **Event**
    *   **Get All**: Retrieves a list of audit log events.
*   **Group**
    *   **Create**: Adds a new group.
    *   **Delete**: Removes a specific group.
    *   **Get**: Retrieves details for a specific group.
    *   **Get All**: Retrieves a list of all groups.
    *   **Get Members**: Retrieves members associated with a specific group.
    *   **Update**: Modifies an existing group.
    *   **Update Members**: Updates the members associated with a group.
*   **Member**
    *   **Create**: Invites a new member to the organization.
    *   **Delete**: Removes a specific member from the organization.
    *   **Get**: Retrieves details for a specific member.
    *   **Get All**: Retrieves a list of all members in the organization.
    *   **Get Groups**: Retrieves groups associated with a specific member.
    *   **Update**: Modifies an existing member's details or status.
    *   **Update Groups**: Updates the groups associated with a member.

**Related Resources:**

*   [Bitwarden Integration Templates](https://n8n.io/integrations/bitwarden/templates/)
*   [All n8n Templates](https://n8n.io/templates/)

---

## 29. Box.md ---

## Box Node

**Node Type:** Action Node (`n8n-nodes-base.box`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.box/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.box/)

**Description:**

Use the Box node to automate work in Box, the cloud content management and file sharing service. Integrate Box with other applications to manage files and folders. n8n provides built-in support for creating, copying, deleting, searching, uploading, downloading, and sharing files and folders.

**Credentials:**

Refer to the [Box credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/box/) for guidance on setting up authentication (using OAuth2).

**Operations:**

*   **File**
    *   **Copy a file**: Creates a copy of a file in a specified location.
    *   **Delete a file**: Permanently deletes a file.
    *   **Download a file**: Downloads the content of a file.
    *   **Get a file**: Retrieves metadata for a specific file.
    *   **Search files**: Searches for files based on specified criteria.
    *   **Share a file**: Creates or modifies a shared link for a file.
    *   **Upload a file**: Uploads a new file or creates a new version of an existing file.
*   **Folder**
    *   **Create a folder**: Creates a new folder in a specified parent folder.
    *   **Get a folder**: Retrieves metadata for a specific folder.
    *   **Delete a folder**: Permanently deletes a folder (recursive option available).
    *   **Search files**: Searches for files within a specific folder (or recursively).
    *   **Share a folder**: Creates or modifies a shared link for a folder.
    *   **Update folder**: Modifies the metadata of a folder (e.g., rename, move).

**Related Resources:**

*   [Box Integration Templates](https://n8n.io/integrations/box/templates/)
*   [All n8n Templates](https://n8n.io/templates/)
*   [Box Trigger Node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.boxtrigger/)

**Unsupported Operations:**

If an operation is not listed, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Box credentials (OAuth2) to call the Box API directly. Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-api-operations/) for more details.

---

## 30. Brandfetch.md ---

## Brandfetch Node

**Node Type:** Action Node (`n8n-nodes-base.brandfetch`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.brandfetch/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.brandfetch/)

**Description:**

Use the Brandfetch node to retrieve brand assets and information directly within your n8n workflows. Integrate Brandfetch to automate tasks involving company logos, colors, fonts, and other brand data.

**Credentials:**

Refer to the [Brandfetch credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/brandfetch/) for guidance on setting up authentication (using API Key).

**Operations:**

*   **Get Company Data**: Returns comprehensive data for a company based on its domain.
*   **Get Company Logo & Icon**: Retrieves the logo and icon for a company based on its domain.
*   **Get Company Colors**: Returns the primary and secondary brand colors for a company based on its domain.
*   **Get Company Fonts**: Retrieves the fonts used by a company based on its domain.
*   **Get Company Industry**: Returns the industry classification for a company based on its domain.

**Input:**

All operations require the company's domain name as input.

**Output:**

The node outputs JSON data containing the requested brand information (e.g., URLs for logos/icons, hex codes for colors, font names, industry details, or a full company profile).

**Related Resources:**

*   [Brandfetch Integration Templates](https://n8n.io/integrations/brandfetch/templates/)
*   [All n8n Templates](https://n8n.io/templates/)

---

## 31. Brevo.md ---

# n8n Node: Brevo (formerly Sendinblue)

The Brevo node provides a comprehensive interface for interacting with the Brevo (formerly Sendinblue) marketing platform directly within n8n workflows. This integration allows users to automate various tasks related to customer relationship management, email marketing, and sender management, seamlessly connecting Brevo's capabilities with other applications and services supported by n8n.

## Functionality

The node offers a wide array of operations categorized under different resources, enabling granular control over Brevo data and actions. Users can manage contacts by creating new entries, updating existing ones, or performing bulk create-or-update operations. It also supports retrieving specific contact details or fetching a list of all contacts based on specified criteria. Deleting contacts is also a supported function.

Beyond basic contact management, the node facilitates interaction with contact attributes. Users can define new custom attributes to store specific data points about their contacts, update the values of these attributes for individual contacts, retrieve a list of all defined attributes within their Brevo account, or remove attributes that are no longer needed.

Email marketing automation is a core feature, with operations dedicated to sending emails. Users can send transactional emails directly through the node or leverage pre-designed templates stored within their Brevo account by using the 'Send Template' operation. This allows for personalized and branded communication triggered by workflow events.

Finally, the node includes operations for managing email senders. Users can programmatically create new sender identities within Brevo, retrieve a list of all configured senders, or delete senders that are no longer active or required.

## Credentials

To utilize the Brevo node, users must first configure appropriate credentials within n8n. This typically involves obtaining an API key from the Brevo account settings (under SMTP & API). Once obtained, this key is used to create a Brevo credential entry in n8n, which securely stores the authentication details. This credential can then be selected within the Brevo node configuration to authorize its actions against the user's Brevo account.

## Operations Overview

The Brevo node supports the following resources and operations:

*   **Contact:**
    *   *Create:* Adds a new contact to your Brevo account.
    *   *Create or Update:* Adds a new contact or updates an existing one based on the provided email address or ID.
    *   *Delete:* Removes a contact from your Brevo account.
    *   *Get:* Retrieves the details of a specific contact.
    *   *Get All:* Fetches a list of all contacts, potentially filtered by specific criteria.
    *   *Update:* Modifies the details or attributes of an existing contact.
*   **Contact Attribute:**
    *   *Create:* Defines a new custom attribute for contacts.
    *   *Delete:* Removes an existing contact attribute.
    *   *Get All:* Retrieves a list of all defined contact attributes.
    *   *Update:* Modifies the properties of an existing contact attribute.
*   **Email:**
    *   *Send:* Dispatches a standard email message.
    *   *Send Template:* Sends an email using a pre-defined Brevo template, allowing for dynamic content insertion.
*   **Sender:**
    *   *Create:* Adds and verifies a new sender identity.
    *   *Delete:* Removes an existing sender identity.
    *   *Get All:* Retrieves a list of all configured sender identities.

## Use Cases

Common use cases for the Brevo node include synchronizing contacts from a CRM system, adding new leads captured via web forms to specific Brevo lists, triggering transactional emails (like order confirmations or password resets) based on events in other applications, or managing sender identities as part of an automated onboarding process.

## Handling Unsupported Operations

If a specific Brevo API endpoint or operation is not directly supported by the node, users can leverage the generic [HTTP Request node](../http-request/) available in n8n. By selecting the previously configured Brevo credential within the HTTP Request node's authentication settings, users can manually construct and send requests to any Brevo API endpoint, effectively extending the integration possibilities beyond the built-in operations.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.brevo/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.brevo/)*

---

## 32. Bubble.md ---

# n8n Node: Bubble

The Bubble node allows n8n users to interact with applications built on the Bubble visual programming platform. This integration facilitates the automation of workflows that involve creating, retrieving, updating, or deleting data objects within a Bubble application, connecting Bubble's no-code capabilities with the broader ecosystem of services available through n8n.

## Functionality

The primary function of the Bubble node revolves around Data API operations on Bubble objects (also known as 'Things'). Users can specify the Bubble application domain and the specific data 'Type' they wish to interact with. The node supports the standard CRUD (Create, Read, Update, Delete) operations:

*   **Create:** Allows for the creation of new data objects (Things) of a specified Type within the connected Bubble application. Users define the fields and corresponding values for the new object.
*   **Get:** Retrieves a specific data object based on its unique ID.
*   **Get All:** Fetches multiple data objects of a specified Type. This operation supports adding constraints (filters) to narrow down the results based on field values, similar to Bubble's own data searching capabilities. Sorting and pagination options are also typically available to manage the retrieved data.
*   **Update:** Modifies an existing data object identified by its unique ID. Users specify the fields to be updated and their new values.
*   **Delete:** Removes a specific data object from the Bubble application based on its unique ID.

## Credentials

Authentication with a Bubble application requires configuring Bubble credentials in n8n. This involves providing the Bubble App Domain (e.g., `myapp.bubbleapps.io` or a custom domain) and a Private Key (API Token). The API Token must be generated within the Bubble application's settings under the API section, ensuring the necessary Data API endpoints (e.g., Data Types) are exposed and the token has the appropriate permissions (e.g., read, write) for the intended operations.

## AI Tool Capability

The documentation notes that the Bubble node can also function as an AI tool within n8n's AI agent features. When used in this context, parameters like the object type or specific fields might be dynamically determined or populated based on the AI agent's instructions or context, allowing for more flexible and intelligent interactions with Bubble data.

## Use Cases

Common scenarios include synchronizing data between Bubble and external databases or services, creating new Bubble objects based on form submissions captured by n8n webhooks, updating Bubble records based on events in other applications (like a CRM or payment gateway), or retrieving data from Bubble to use in subsequent workflow steps like generating reports or sending notifications.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bubble/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bubble/)*

---

## 33. Calendly.md ---

# n8n-nodes-base.calendly

## Description

Based on n8n documentation and search results, there isn't a dedicated `n8n-nodes-base.calendly` **action** node for performing operations like creating events or managing users directly via a specific node interface.

Instead, Calendly integration in n8n primarily consists of:

1.  **`n8n-nodes-base.calendlytrigger`**: A trigger node that starts workflows based on Calendly events (e.g., Invitee Created, Invitee Canceled).
2.  **HTTP Request Node**: For performing actions not covered by the trigger (like getting event details, managing users, etc.), the recommended approach is to use the generic `n8n-nodes-base.httpRequest` node combined with Calendly API credentials (Personal Access Token).

## Credentials

*   **Calendly API**: Requires a Personal Access Token for authentication when using the HTTP Request node.
*   **Calendly Trigger**: Uses webhook authentication managed by n8n.

## Common Use Cases (using HTTP Request Node)

*   Get user information
*   List event types
*   Get event invitee details
*   List organization members
*   Cancel an event

Refer to the [Calendly API Documentation](https://developer.calendly.com/api-docs/getting-started) for available endpoints and request formats.

## JSON Structure Example (Conceptual - Using HTTP Request for 'Get User')

```json
{
  "parameters": {
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "calendlyApi", // Use the Calendly API credential type
    "requestMethod": "GET",
    "url": "https://api.calendly.com/users/me",
    "options": {}
  },
  "name": "Get Calendly User (HTTP)",
  "type": "n8n-nodes-base.httpRequest", // Using the HTTP Request node
  "typeVersion": 4.1, // Check current version
  "position": [
    1600,
    800
  ],
  "credentials": {
    "calendlyApi": {
      "id": "YOUR_CALENDLY_CREDENTIAL_ID",
      "name": "Calendly API Credential"
    }
  }
}
```

*Note: This example shows how to use the `httpRequest` node for a Calendly action. The specific node type `n8n-nodes-base.calendly` does not exist as an action node.*

---

## 34. CalTrigger.md ---

# n8n Node: Cal Trigger

The Cal Trigger node allows n8n workflows to be initiated based on events occurring within the Cal.com scheduling platform. Cal.com is described as an "event-juggling scheduler" designed to simplify the process of arranging meetings. This trigger node acts as the entry point for automations related to scheduling activities managed through Cal.com.

## Functionality

As a trigger node, its primary purpose is to listen for specific events within a connected Cal.com account and start the n8n workflow whenever one of those events occurs. While the specific trigger events are not detailed on the main documentation page, typical events for scheduling platforms often include:

*   Booking Created: When a new meeting or appointment is scheduled.
*   Booking Rescheduled: When an existing meeting time is changed.
*   Booking Cancelled: When a scheduled meeting is cancelled.
*   New Attendee Added: When someone joins a scheduled event.

The node likely allows users to select which specific Cal.com event(s) should activate the workflow. Upon triggering, it will output data related to the event (e.g., details of the booking, attendees, time, etc.) which can then be used by subsequent nodes in the workflow.

## Credentials

To connect n8n to a Cal.com account, users need to configure Cal.com credentials within n8n. This typically involves obtaining an API key from the Cal.com account settings. The specific steps involve logging into Cal.com, navigating to Settings, finding the API keys section, and generating a new key. This key is then used to create the credential entry in n8n, which the Cal Trigger node uses for authentication and event listening.

## Use Cases

Common use cases involve automating actions based on scheduling events. For example, when a new meeting is booked via Cal.com, a workflow could be triggered to:

*   Add the event to a Google Calendar or Outlook Calendar.
*   Send a confirmation email or Slack message to the attendee and/or host.
*   Create a new lead or update a contact record in a CRM.
*   Prepare meeting notes templates in Notion or Google Docs.
*   Notify relevant team members about new bookings.

*Reference: [https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.caltrigger/](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.caltrigger/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/cal/](https://docs.n8n.io/integrations/builtin/credentials/cal/)*

---

## 35. Chargebee.md ---

# n8n Node: Chargebee

The Chargebee node enables interaction with the Chargebee subscription billing and revenue management platform within n8n workflows. It allows users to automate tasks related to customer management, invoicing, and subscription handling, connecting Chargebee's functionalities with other services integrated into n8n.

## Functionality

The node provides operations focused on key Chargebee resources:

*   **Customer:**
    *   *Create a customer:* Allows for the creation of new customer records within Chargebee. This typically involves providing details like email address, name, and potentially billing/shipping addresses or custom fields.
*   **Invoice:**
    *   *Return the invoices:* Fetches a list of invoices based on specified criteria (e.g., customer ID, subscription ID, status, date range).
    *   *Get URL for the invoice PDF:* Retrieves a downloadable link for the PDF version of a specific invoice, identified by its ID.
*   **Subscription:**
    *   *Cancel a subscription:* Initiates the cancellation process for an existing subscription, often allowing specification of whether the cancellation should happen immediately or at the end of the current term.
    *   *Delete a subscription:* Permanently removes a subscription record from Chargebee. This is typically used for cleanup and might be restricted based on subscription status.

## Credentials

To use the Chargebee node, users must configure Chargebee credentials in n8n. This requires obtaining an API Key and specifying the Site Name (the unique prefix of your Chargebee domain, e.g., `your-site` from `your-site.chargebee.com`). The API key needs to be generated within the Chargebee application under the API Keys settings, ensuring it has the necessary permissions for the desired operations (e.g., managing customers, invoices, subscriptions).

## Use Cases

Common applications include automating customer creation in Chargebee when a user signs up in another system, retrieving invoice details for reporting or accounting purposes, generating PDF invoice links to send to customers via email, or automating subscription cancellations based on triggers from other applications (e.g., CRM status changes, support ticket resolutions).

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.chargebee/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.chargebee/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/chargebee/](https://docs.n8n.io/integrations/builtin/credentials/chargebee/)*

---

## 36. Circleci.md ---

# n8n Node: CircleCI

The CircleCI node integrates n8n with the CircleCI continuous integration and continuous delivery (CI/CD) platform. This allows users to automate workflows involving CircleCI pipelines directly from n8n, connecting CI/CD processes with other applications and services.

## Functionality

The node focuses on interacting with CircleCI pipelines:

*   **Pipeline Operations:**
    *   *Get a pipeline:* Retrieves detailed information about a specific CircleCI pipeline, identified by its unique ID or number.
    *   *Get all pipelines:* Fetches a list of pipelines for a specific project, potentially allowing filtering by branch, status, or other parameters.
    *   *Trigger a pipeline:* Initiates a new pipeline run for a specified project, usually requiring parameters like the branch name and optional pipeline parameters (environment variables).

## Credentials

Authentication with CircleCI requires configuring CircleCI credentials within n8n. This involves generating a Personal API Token from the CircleCI user settings (under Personal API Tokens). This token grants n8n the necessary permissions to interact with the CircleCI API on behalf of the user. The generated token is then securely stored in an n8n credential entry.

## Use Cases

Common use cases for the CircleCI node include:

*   Triggering deployment pipelines automatically after successful builds or tests monitored by other n8n workflows.
*   Starting specific CI/CD jobs based on external events, such as code merges detected by GitLab or GitHub triggers in n8n.
*   Monitoring pipeline statuses by periodically fetching pipeline details and sending notifications (e.g., via Slack or email) upon completion or failure.
*   Integrating CI/CD results into broader reporting dashboards or project management tools.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.circleci/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.circleci/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/circleci/](https://docs.n8n.io/integrations/builtin/credentials/circleci/)*

---

## 37. CiscoWebex.md ---

# n8n Node: Webex by Cisco

The Webex by Cisco node allows n8n users to integrate and automate tasks within the Cisco Webex platform. Webex provides solutions for video conferencing, team messaging, calling, and events. This node enables interaction with Webex Meetings and Webex Messaging directly within n8n workflows.

## Functionality

The node supports operations across two main Webex resources: Meetings and Messages.

*   **Meeting Operations:**
    *   *Create:* Schedules a new Webex meeting. This typically involves setting parameters like the meeting topic, start time, duration, attendees, and password.
    *   *Delete:* Cancels or removes an existing Webex meeting based on its ID.
    *   *Get:* Retrieves the details of a specific Webex meeting using its ID.
    *   *Get All:* Fetches a list of scheduled Webex meetings, potentially filterable by date range, host, or other criteria.
    *   *Update:* Modifies the details of an existing Webex meeting, such as changing the time, topic, or attendees.
*   **Message Operations:**
    *   *Create:* Sends a message to a Webex space (room) or directly to a person. This can include text content, markdown formatting, and potentially file attachments.
    *   *Delete:* Removes a message previously sent by the authenticated user/bot, identified by its message ID.
    *   *Get:* Retrieves the content and details of a specific message using its ID.
    *   *Get All:* Fetches a list of messages from a specific Webex space, often with options for pagination or limiting the number of messages retrieved.
    *   *Update:* Edits the content of a message previously sent by the authenticated user/bot. (Note: Webex API might have limitations on message editing).

## Credentials

Authentication with Webex requires setting up Webex by Cisco credentials in n8n. This is typically done using OAuth 2.0. Users will need to register an integration/application within the Cisco Webex Developer portal to obtain client ID and client secret credentials. When configuring the credential in n8n, users initiate an OAuth flow, granting n8n permission to access their Webex account based on the scopes defined during app registration.

## Use Cases

Common use cases include:

*   Automatically scheduling Webex meetings based on calendar events or CRM triggers.
*   Sending notifications or summaries to Webex spaces after workflow completion.
*   Creating automated reminders for upcoming meetings.
*   Logging meeting details or participant information to external systems.
*   Building simple Webex bots that respond to messages or commands.

## Handling Unsupported Operations

If a specific Webex API feature is not directly available through the node's operations, users can utilize the generic [HTTP Request node](../http-request/). By selecting the configured Webex credential, users can make custom calls to any endpoint provided by the Webex REST API.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.ciscowebex/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.ciscowebex/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/ciscowebex/](https://docs.n8n.io/integrations/builtin/credentials/ciscowebex/)*

---

## 38. Clearbit.md ---

# n8n Node: Clearbit

The Clearbit node provides integration with the Clearbit data enrichment platform, allowing users to automate workflows that involve finding information about companies and people directly within n8n. Clearbit offers APIs for company and person lookups, enrichment, and prospecting.

## Functionality

The n8n Clearbit node focuses on enrichment and lookup operations:

*   **Company Operations:**
    *   *Autocomplete:* Takes a partial company name and returns potential matches along with their domain and logo. This is useful for user interfaces or standardizing company names.
    *   *Lookup:* Retrieves detailed company information based on a company's domain name. This can include data like company size, industry, location, technology stack, social media profiles, and more.
*   **Person Operations:**
    *   *Lookup:* Retrieves detailed information about a person and their associated company based on an email address. This can return data points like the person's name, title, role, location, social media profiles, and company details.

Note: The documentation mentions looking up person and company data based on *email or domain* under both Company and Person resources. This likely refers to the combined enrichment endpoint in the Clearbit API, where providing an email yields person and company data, while providing a domain yields company data.

## Credentials

To use the Clearbit node, users must configure Clearbit credentials in n8n. This requires obtaining an API Key from the Clearbit account dashboard (under the API section). This key authenticates requests made by n8n to the Clearbit API and is associated with the user's Clearbit plan and usage limits.

## Use Cases

Common use cases for the Clearbit node include:

*   Enriching new leads captured via web forms or other sources with company and person details before adding them to a CRM.
*   Qualifying leads based on company size, industry, or technology usage.
*   Personalizing outreach emails or sales pitches based on enriched data.
*   Verifying company domains or finding logos for contacts.
*   Segmenting contacts based on demographic or firmographic data obtained from Clearbit.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.clearbit/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.clearbit/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/clearbit/](https://docs.n8n.io/integrations/builtin/credentials/clearbit/)*

---

## 39. Clickhouse.md ---

# ClickHouse Integration

According to the latest research, n8n does not provide an official built-in integration node for ClickHouse.

ClickHouse is a fast open-source column-oriented database management system. While direct integration via a dedicated node isn't available out-of-the-box, users can still connect n8n to ClickHouse using alternative methods.

Options for integrating ClickHouse with n8n include:

1.  **Community Nodes:** Investigate the n8n community forums and GitHub repositories for any community-developed nodes designed for ClickHouse. Research suggested a community node might be available.
2.  **HTTP Request Node:** ClickHouse offers an HTTP interface. You can use n8n's HTTP Request node to send queries and commands directly to your ClickHouse instance via this interface. This requires configuring the request method (usually POST for queries), URL (including host and port), authentication (if applicable), and the query payload according to the ClickHouse HTTP interface documentation.
3.  **Database Nodes (Generic):** Depending on the specific drivers and connection methods supported, it might be possible to use generic database nodes within n8n if a suitable driver for ClickHouse can be configured, although this is less common than using the HTTP interface.

Refer to the official ClickHouse documentation, particularly regarding its HTTP interface, for specific details on endpoints, query formats, and authentication.

---

## 40. ClickUp.md ---

# n8n-nodes-base.clickUp

## Description

The ClickUp node allows interaction with the ClickUp project management platform. It provides a wide range of operations for managing resources like Folders, Lists, Tasks, Checklists, Comments, Goals, Tags, Time Entries, and Dependencies.

## Credentials

Requires ClickUp API credentials (API Token).

## Resources and Operations

*   **Checklist**: Create, Delete, Update
*   **Checklist Item**: Create, Delete, Update
*   **Comment**: Create, Delete, Get All, Update
*   **Folder**: Create, Delete, Get, Get All, Update
*   **Goal**: Create, Delete, Get, Get All, Update
*   **Goal Key Result**: Create, Delete, Update
*   **List**: Create, Retrieve Custom Fields, Delete, Get, Get All, Get Members, Update
*   **Space Tag**: Create, Delete, Get All, Update
*   **Task**: Create, Delete, Get, Get All, Get Members, Set Custom Field, Update
*   **Task List**: Add Task to List, Remove Task from List
*   **Task Tag**: Add Tag to Task, Remove Tag from Task
*   **Task Dependency**: Create, Delete
*   **Time Entry**: Create, Delete, Get, Get All, Start Timer, Stop Timer, Update
*   **Time Entry Tag**: Add Tag, Get All Tags, Remove Tag

## Parameters (Common)

*   **Authentication**: Select the ClickUp credential.
*   **Resource**: Select the ClickUp resource (Task, Folder, List, etc.).
*   **Operation**: Select the operation for the chosen resource.
*   **Team ID / Workspace ID**: Often required to specify the workspace context.

### Parameters (Vary by Resource/Operation)

*   **Space ID**: Required for space-level resources (e.g., creating folders, getting space tags).
*   **Folder ID**: Required for folder-level resources (e.g., creating lists).
*   **List ID**: Required for list-level resources (e.g., creating tasks).
*   **Task ID**: Required for task-specific operations (e.g., update task, add comment, create checklist).
*   **Checklist ID**: Required for checklist operations.
*   **Checklist Item ID**: Required for checklist item operations.
*   **Comment ID**: Required for comment operations.
*   **Goal ID**: Required for goal operations.
*   **Key Result ID**: Required for key result operations.
*   **Tag Name**: For creating/updating tags.
*   **Name**: For creating/updating resources like tasks, lists, folders, checklists.
*   **Content/Description**: For tasks, comments, etc.
*   **Assignees**: Array of user IDs to assign.
*   **Status**: Task status.
*   **Priority**: Task priority.
*   **Due Date**: Task due date (often as a timestamp).
*   **Custom Fields**: Array of objects to set custom field values (`id` and `value`).
*   **Filters/Query Parameters**: Options for `Get All` operations (e.g., statuses, assignees, dates, archived status).
*   **Return All**: (Boolean) Option in `Get All` operations to handle pagination automatically.
*   **Limit**: (Number) Limit the number of results returned in `Get All` operations.

## JSON Structure Example (Conceptual - Create Task)

```json
{
  "parameters": {
    "resource": "task",
    "operation": "create",
    "listId": "12345678", // ID of the list to create the task in
    "name": "{{ $json.taskTitle }}",
    "description": "{{ $json.taskDetails }}",
    "assignees": {
        "add": [ // Array of user IDs to assign
            183
        ]
    },
    "status": "To Do",
    "priority": 3, // Example priority level
    "dueDate": "{{ $json.dueDateTimestamp }}", // Unix timestamp in milliseconds
    "notifyAll": true,
    "additionalFields": {
        "customFields": [ // Example setting custom fields
            {
                "id": "a1b2c3d4-e5f6-7890-gh12-i3j4k5l6m7n8",
                "value": "{{ $json.customFieldValue }}"
            }
        ]
    }
  },
  "name": "Create ClickUp Task",
  "type": "n8n-nodes-base.clickUp",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    1700,
    900
  ],
  "credentials": {
    "clickUpApi": {
      "id": "YOUR_CLICKUP_CREDENTIAL_ID",
      "name": "ClickUp Credential Name"
    }
  }
}
```

---

## 41. Clockify.md ---

# n8n-nodes-base.clockify

## Description

The Clockify node allows interaction with the Clockify time tracking service. It supports operations on Projects, Tags, Tasks, and Time Entries.

## Credentials

Requires Clockify API credentials (API Key).

## Resources and Operations

*   **Project**
    *   `Create`: Create a new project.
    *   `Delete`: Delete a project.
    *   `Get`: Retrieve details of a specific project.
    *   `Get All`: List all projects in a workspace.
    *   `Update`: Modify an existing project.
*   **Tag**
    *   `Create`: Create a new tag.
    *   `Delete`: Delete a tag.
    *   `Get All`: List all tags in a workspace.
    *   `Update`: Modify an existing tag.
*   **Task**
    *   `Create`: Create a new task within a project.
    *   `Delete`: Delete a task.
    *   `Get`: Retrieve details of a specific task.
    *   `Get All`: List all tasks within a project.
    *   `Update`: Modify an existing task.
*   **Time Entry**
    *   `Create`: Create a new time entry.
    *   `Delete`: Delete a time entry.
    *   `Get`: Retrieve details of a specific time entry.
    *   `Update`: Modify an existing time entry.

## Parameters (Common)

*   **Authentication**: Select the Clockify credential.
*   **Workspace ID**: The ID of the Clockify workspace.
*   **Resource**: Select the Clockify resource (Project, Tag, Task, Time Entry).
*   **Operation**: Select the operation for the chosen resource.

### Parameters (Vary by Resource/Operation)

*   **Project ID**: Required for project-specific operations or task/time entry operations within a project.
*   **Task ID**: Required for task-specific operations.
*   **Tag ID**: Required for tag-specific operations.
*   **Time Entry ID**: Required for time entry operations.
*   **Name**: For creating/updating projects, tags, tasks.
*   **Start Time**: Start date/time for a time entry (ISO 8601 format).
*   **End Time**: End date/time for a time entry (ISO 8601 format).
*   **Description**: For time entries.
*   **Billable**: (Boolean) Mark project/time entry as billable.
*   **Assignee ID / User ID**: For assigning tasks or filtering time entries.
*   **Filters/Query Parameters**: Options for `Get All` operations (e.g., date ranges, user IDs, project IDs, billable status).
*   **Return All**: (Boolean) Option in `Get All` operations to handle pagination automatically.
*   **Limit**: (Number) Limit the number of results returned in `Get All` operations.

## JSON Structure Example (Conceptual - Create Time Entry)

```json
{
  "parameters": {
    "workspaceId": "61a7b8c9d0e1f2a3b4c5d6e7", // Your Workspace ID
    "resource": "timeEntry",
    "operation": "create",
    "projectId": "{{ $json.projectId }}", // Project ID for the time entry
    "start": "{{ $json.startTimeISO }}", // ISO 8601 Format, e.g., "2025-05-04T10:00:00Z"
    "end": "{{ $json.endTimeISO }}", // ISO 8601 Format, e.g., "2025-05-04T11:30:00Z"
    "description": "{{ $json.entryDescription }}",
    "additionalFields": {
        "billable": true,
        "tagIds": [ // Optional array of Tag IDs
            "t1a2b3c4d5e6f7a8b9c0d1e2"
        ],
        "taskId": "{{ $json.taskId }}" // Optional Task ID
    }
  },
  "name": "Log Time in Clockify",
  "type": "n8n-nodes-base.clockify",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    1800,
    1000
  ],
  "credentials": {
    "clockifyApi": {
      "id": "YOUR_CLOCKIFY_CREDENTIAL_ID",
      "name": "Clockify Credential Name"
    }
  }
}
```

---

## 42. Cloudflare.md ---

# n8n Node: Cloudflare

The Cloudflare node enables interaction with the Cloudflare global network platform directly within n8n workflows. Cloudflare provides services like CDN, DNS, DDoS protection, and security features. This node allows users to automate tasks related to managing Cloudflare resources, specifically focusing on zone certificates.

## Functionality

The current implementation of the Cloudflare node centers around managing SSL/TLS certificates for specific zones (domains) configured in Cloudflare:

*   **Zone Certificate Operations:**
    *   *Delete:* Removes a specific custom SSL certificate from a zone, identified by its ID.
    *   *Get:* Retrieves the details of a specific custom SSL certificate for a zone using its ID.
    *   *Get Many:* Fetches a list of all custom SSL certificates associated with a particular zone.
    *   *Upload:* Adds a new custom SSL certificate (including the certificate chain and private key) to a specified zone.

## Credentials

To interact with the Cloudflare API, the node requires credentials configured in n8n. This typically involves using a Cloudflare API Token or potentially a Global API Key (though API Tokens are generally recommended for better security and granular permissions). 

*   **API Token:** A scoped token generated within the Cloudflare dashboard (My Profile > API Tokens) with specific permissions (e.g., Zone.SSL and Certificates:Edit, Zone.SSL and Certificates:Read) for the required zones.
*   **API Key (Global):** Requires the user's Cloudflare account email address and the Global API Key found in the Cloudflare dashboard (My Profile > API Tokens > Global API Key). Using the Global API Key grants broad access and should be used cautiously.

## Use Cases

Common use cases for this node include:

*   Automating the renewal and uploading of custom SSL certificates obtained from third-party Certificate Authorities.
*   Periodically checking the status or details of certificates deployed in Cloudflare zones.
*   Integrating certificate management into broader infrastructure automation workflows.
*   Removing expired or unnecessary custom certificates.

## Handling Unsupported Operations

For Cloudflare API operations not covered by this node (e.g., managing DNS records, firewall rules, Workers), users can leverage the generic [HTTP Request node](../http-request/). By selecting the configured Cloudflare credential, custom calls can be made to any endpoint in the extensive Cloudflare API.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cloudflare/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cloudflare/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/cloudflare/](https://docs.n8n.io/integrations/builtin/credentials/cloudflare/)*
*Cloudflare API Docs: [https://developers.cloudflare.com/api/](https://developers.cloudflare.com/api/)*

---

## 43. Cockpit.md ---

# n8n Node: Cockpit

The Cockpit node allows interaction with Cockpit, a headless Content Management System (CMS). It enables users to manage content stored in Cockpit collections, singletons, and forms directly within n8n workflows, integrating CMS operations with other applications and services.

## Functionality

The node provides operations for interacting with different Cockpit content structures:

*   **Collection Operations:** Collections are used for managing multiple entries of the same structure (e.g., blog posts, products).
    *   *Create a collection entry:* Adds a new item to a specified Cockpit collection, requiring the collection name and the data for the new entry.
    *   *Get all collection entries:* Retrieves multiple entries from a specified collection, often with options for filtering, sorting, and pagination.
    *   *Update a collection entry:* Modifies an existing entry within a collection, identified by its unique ID.
*   **Form Operations:** Cockpit allows creating forms and storing submissions.
    *   *Store data from a form submission:* Saves the data submitted through a specific Cockpit form.
*   **Singleton Operations:** Singletons are used for managing single, unique pieces of content (e.g., site settings, homepage content).
    *   *Get a singleton:* Retrieves the data stored in a specified Cockpit singleton.

## Credentials

To use the Cockpit node, users need to configure Cockpit credentials in n8n. This requires:

*   **Host URL:** The base URL of the Cockpit instance (e.g., `http://localhost:8080` or `https://your-cockpit-domain.com`).
*   **API Key:** An API access token generated within the Cockpit settings (Settings > API Access). This key grants n8n the necessary permissions to interact with the Cockpit API.

## Use Cases

Common use cases for the Cockpit node include:

*   Automatically creating new content entries in Cockpit based on external triggers (e.g., new product added in an e-commerce platform).
*   Fetching content from Cockpit collections or singletons to populate websites, applications, or reports.
*   Updating Cockpit entries based on changes in other systems.
*   Processing form submissions received through Cockpit forms.
*   Integrating content management tasks into broader automation workflows.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cockpit/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cockpit/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/cockpit/](https://docs.n8n.io/integrations/builtin/credentials/cockpit/)*

---

## 44. Coda.md ---

# n8n Node: Coda

The Coda node allows n8n users to interact with Coda documents. Coda is an all-in-one doc that brings words, data, and teams together. This node enables automation of tasks involving Coda tables, rows, columns, views, controls, and formulas directly within n8n workflows.

## Functionality

The node provides a comprehensive set of operations across various Coda document elements:

*   **Control Operations:** Controls are interactive elements within a Coda doc (e.g., buttons, sliders).
    *   *Get a control:* Retrieves details about a specific control.
    *   *Get all controls:* Fetches a list of all controls within a doc or page.
*   **Formula Operations:** Formulas perform calculations or retrieve data within Coda.
    *   *Get a formula:* Retrieves the definition or result of a specific formula.
    *   *Get all formulas:* Fetches a list of all formulas within a doc or page.
*   **Table Operations:** Tables are the primary way to structure data in Coda.
    *   *Create/Insert a row:* Adds a new row to a specified table with provided column data.
    *   *Delete one or multiple rows:* Removes specific rows from a table based on their IDs or a filter.
    *   *Get all columns:* Retrieves the schema/definitions of all columns in a table.
    *   *Get all the rows:* Fetches all rows from a table, potentially with filtering or sorting.
    *   *Get a column:* Retrieves the definition of a specific column.
    *   *Get a row:* Fetches data for a specific row based on its ID.
    *   *Pushes a button:* Triggers the action associated with a button column in a specific row.
*   **View Operations:** Views are customized perspectives of tables.
    *   *Delete view row:* Removes a row from a view (which might also delete it from the underlying table depending on the view setup).
    *   *Get a view:* Retrieves details about a specific view.
    *   *Get all views:* Fetches a list of all views within a doc or page.
    *   *Get all views columns:* Retrieves the schema/definitions of columns as they appear in a specific view.
    *   *Get all views rows:* Fetches all rows visible in a specific view.
    *   *Update row:* Modifies data in a specific row within a view.
    *   *Push view button:* Triggers the action associated with a button column within a view row.

## Credentials

Authentication requires a Coda API token. Users need to generate an API token from their Coda account settings (Account Settings > API settings > Generate API token). This token is then used to create a Coda credential entry in n8n, granting n8n permission to access the user's Coda docs via the API.

## Use Cases

Common use cases include:

*   Syncing data between Coda tables and other applications (CRMs, databases, spreadsheets).
*   Adding new rows to Coda tables based on form submissions or external events.
*   Updating row data in Coda based on workflow progress.
*   Triggering actions in Coda (like pushing buttons) as part of an automated process.
*   Fetching data from Coda docs for reporting or further processing in n8n.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.coda/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.coda/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/coda/](https://docs.n8n.io/integrations/builtin/credentials/coda/)*

---

## 45. Coingecko.md ---

# n8n Node: CoinGecko

The CoinGecko node allows n8n users to interact with the CoinGecko API, a popular source for cryptocurrency market data. It enables fetching information about coins, prices, market data, historical trends, and events directly within n8n workflows.

## Functionality

The node provides operations primarily focused on retrieving cryptocurrency data:

*   **Coin Operations:**
    *   *Get Candlestick Chart:* Retrieves Open-High-Low-Close (OHLC) data for a specified coin against a target currency over a given period, suitable for charting.
    *   *Get Current Data:* Fetches the latest market data for a specific coin (e.g., current price, market cap, volume, price change percentages).
    *   *Get All Coins:* Retrieves a list of all cryptocurrencies supported by CoinGecko, often including basic details like ID, symbol, and name.
    *   *Get Historical Data:* Fetches historical market data (price, market cap, volume) for a specific coin on a particular date.
    *   *Get Market Data for Trading Pairs:* Retrieves prices and market data for all trading pairs involving a selected currency.
    *   *Get Historical Market Chart:* Fetches historical price, market cap, and volume data over a specified date range, with granularity often determined automatically based on the range.
    *   *Get Current Price:* Retrieves the current price of one or more cryptocurrencies in one or more specified fiat or cryptocurrencies.
    *   *Get Coin Tickers:* Fetches recent trading activity (tickers) for a specific coin across various exchanges.
*   **Event Operations:**
    *   *Get All Events:* Retrieves a list of cryptocurrency-related events (e.g., conferences, updates, airdrops) listed on CoinGecko.

## Credentials

While many CoinGecko API endpoints are public and don't strictly require authentication for basic use, using an API key (obtained from CoinGecko Pro) might be necessary for higher rate limits or access to specific paid endpoints. The n8n node might support using an API key via credentials, although the documentation primarily focuses on the operations which often work without one.

## AI Tool Capability

This node is noted as being usable as an AI tool within n8n, suggesting its parameters can be dynamically set or inferred by an AI agent in specific AI-driven workflows.

## Use Cases

Common use cases include:

*   Tracking cryptocurrency prices and market movements.
*   Building crypto portfolio dashboards.
*   Fetching historical data for analysis or backtesting trading strategies.
*   Integrating real-time crypto prices into financial applications or reports.
*   Monitoring upcoming crypto events.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.coingecko/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.coingecko/)*

---

## 46. Community_beehiiv.md ---

## Beehiiv Node (Community)

**Node Type:** Action Node (Community - `n8n-nodes-beehiiv`)

**Source:** [https://github.com/jdbohrman/n8n-nodes-beehiiv](https://github.com/jdbohrman/n8n-nodes-beehiiv)

**Description:**

This community node allows interaction with the Beehiiv API, enabling automation of newsletter tasks such as managing subscriptions, posts, tags, custom fields, automations (journeys), and referral programs.

**Note:** This is a community-developed node. Installation requires adding `n8n-nodes-beehiiv` to your n8n instance. Refer to the [n8n community node installation guide](https://docs.n8n.io/integrations/community-nodes/installation/).

**Credentials:**

Requires Beehiiv API credentials. You need your Beehiiv API Key and Publication ID, obtainable from your Beehiiv account settings.

**Resources and Operations:**

The node supports the following resources and operations:

1.  **Subscription (`subscription`)**
    *   **Create:** Creates a new subscription.
        *   *Parameters:* Email (Required), Send Welcome Email (Boolean), UTM Source/Medium/Campaign/Term/Content (Strings), Referring Site (String), Referral Code (String), Subscription Tier (Options: Free, Premium), Additional Fields (Key-Value for Custom Fields).
    *   **Delete:** Deletes a subscription.
        *   *Parameters:* Subscription ID (Required).
    *   **Get:** Retrieves a specific subscription.
        *   *Parameters:* Subscription ID (Required).
    *   **Update:** Updates an existing subscription.
        *   *Parameters:* Subscription ID (Required), Status (Options: Active, Inactive), Subscription Tier (Options: Free, Premium).
    *   **Get All:** Retrieves multiple subscriptions.
        *   *Parameters:* Limit (Number), Status (Options: Active, Pending, Validating, Invalid, Unsubscribed), Subscription Tier (Options: Free, Premium), Additional Fields (Key-Value for Filters).

2.  **Post (`posts`)**
    *   **Delete:** Deletes a post.
        *   *Parameters:* Post ID (Required), Publication ID (Required).
    *   **Get:** Retrieves a specific post.
        *   *Parameters:* Post ID (Required), Publication ID (Required).
    *   **Get All:** Retrieves multiple posts.
        *   *Parameters:* Publication ID (Required), Limit (Number), Page (Number), Status (Options: Confirmed, Draft), Platform (Options: Web, Email, Both), Content Tags (String), Audience (Options: Free, Premium, Both).

3.  **Tag (`tags`)**
    *   **Create:** Creates a new tag.
        *   *Parameters:* Title (Required).

4.  **Custom Field (`custom_fields`)**
    *   **Create:** Creates a new custom field.
        *   *Parameters:* Label (Required), Placeholder (String), Type (Options: String, Number, Boolean, Date, Datetime, Url).
    *   **Delete:** Deletes a custom field.
        *   *Parameters:* Custom Field ID (Required).
    *   **Update:** Updates an existing custom field.
        *   *Parameters:* Custom Field ID (Required), Label (String), Placeholder (String).

5.  **Automation / Journey (`journeys`)**
    *   **Create:** Adds an existing subscription to an automation journey.
        *   *Parameters:* Automation ID (Required), Subscription ID (Required).

6.  **Referral Program (`referral_program`)**
    *   **Get:** Retrieves the referrals for a specific subscription.
        *   *Parameters:* Subscription ID (Required), Limit (Number), Page (Number).

**Input:**

Accepts data from previous nodes, typically used via expressions `{{ $json.fieldName }}` to populate parameters like Email, IDs, or filter values.

**Output:**

Outputs the result from the Beehiiv API call. For Create/Get/Update operations, this usually includes the data of the affected resource(s). For Delete, it confirms success. For Get All operations, it outputs an array of resource objects.

**Example Usage:**

*   Add new subscribers from a form submission.
*   Tag subscribers based on actions in other apps.
*   Retrieve post details for reporting.
*   Add subscribers to specific automation journeys based on triggers.

---

## 47. Community_browser.md ---

# n8n Community Node: Browser (Puppeteer)

**Disclaimer:** This documentation describes a *community-developed node* (`n8n-nodes-browser`) and is not an official built-in n8n node. Community nodes may have different installation requirements, support levels, and stability compared to official nodes.

This node allows you to control a headless browser instance (like Chrome/Chromium) using the [Puppeteer](https://pptr.dev/) library directly within your n8n workflows. It enables tasks like web scraping, taking screenshots, generating PDFs from web pages, and interacting with web elements (although the current documented operations focus on page retrieval and capture).

**GitHub Repository:** [https://github.com/Yann-J/n8n-nodes-browser](https://github.com/Yann-J/n8n-nodes-browser)

## Installation

Installation requires adding the community node package to your n8n instance. Follow the general [installation guide for community nodes](https://docs.n8n.io/integrations/community-nodes/installation/) in the n8n documentation.

**Important Considerations & Potential Issues:**

*   **Chromium Download:** During the `npm install` process for this node, Puppeteer attempts to download and install a compatible version of Chromium. This might fail due to:
    *   Platform incompatibility.
    *   Missing system dependencies.
    *   Network restrictions.
*   **System Dependencies:** Depending on your operating system (especially within Docker containers), you might need to install additional system libraries for Chromium to run correctly.
*   **Environment Variables:** You may need to configure environment variables to manage Puppeteer's behavior:
    *   `PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true`: Prevents Puppeteer from downloading its own Chromium binary if you intend to use a system-installed version.
    *   `PUPPETEER_EXECUTABLE_PATH=/path/to/your/chromium`: Specifies the path to the Chromium executable Puppeteer should use.
    *   `PUPPETEER_CACHE_DIR=/path/to/persistent/cache`: Sets a directory for Puppeteer to store its browser binaries, crucial if the default location is ephemeral (e.g., in non-persistent Docker volumes).

**Example Installation Steps (from Repository README):**

*   **For Alpine-based n8n images (e.g., `n8nio/n8n:latest`):**
    ```bash
    apk add --no-cache \
      chromium \
      nss \
      freetype \
      harfbuzz \
      ca-certificates \
      ttf-freefont
    # Set ENV:
    # PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    # PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    ```
*   **For Debian-based n8n images (e.g., `n8nio/n8n:latest-debian`):**
    ```bash
    apt-get update \
      && apt-get install -y wget gnupg \
      && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
      && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
      && apt-get update \
      && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 --no-install-recommends \
      && rm -rf /var/lib/apt/lists/*
    # Set ENV if needed:
    # PUPPETEER_CACHE_DIR=/root/.n8n/.cache/puppeteer
    ```

Refer to the [Puppeteer troubleshooting documentation](https://pptr.dev/troubleshooting) and the node's GitHub repository issues for more detailed guidance if you encounter installation problems.

## Operations

The node (based on the repository README) primarily focuses on page-level actions:

*   **Page:**
    *   **Take Screenshot:** Captures a screenshot of the current web page loaded in the headless browser.
    *   **Save as PDF:** Generates a PDF document from the current web page.
    *   **Get HTML:** Retrieves the full HTML source code of the current web page.

*(Note: The repository suggests more advanced Puppeteer interactions might be possible but are not explicitly listed as operations in the README.)*

## Credentials

This node does not require specific credentials for its operation, as it interacts with a local browser instance.

## Compatibility

*   Tested against n8n v0.196.0 (as per README - may work with newer versions).

## Resources

*   [Node GitHub Repository](https://github.com/Yann-J/n8n-nodes-browser)
*   [Puppeteer Documentation](https://pptr.dev/)
*   [n8n Community Nodes Documentation](https://docs.n8n.io/integrations/community-nodes/)

---

## 48. Community_influxdb.md ---

# n8n Community Node: InfluxDB

**Package:** `n8n-nodes-influxdb`
**Author:** [naskio](https://github.com/naskio)
**Repository:** [https://github.com/naskio/n8n-nodes-influxdb](https://github.com/naskio/n8n-nodes-influxdb)

**Status:** Community Node (Not officially supported by n8n). Last updated March 2022 (v0.1.0).

**Note:** As this is a community node, it may not be actively maintained and support might be limited. Always test thoroughly.

This node provides integration with InfluxDB version 2.x, allowing you to read and write time-series data within your n8n workflows.

## Installation

To use this node, you need to install it in your n8n instance:

1.  **Self-Hosted (Docker):** Add the package name `n8n-nodes-influxdb` to the `NODE_FUNCTION_ALLOW_EXTERNAL` environment variable.
2.  **n8n Cloud / Self-Hosted (npm):** Navigate to Settings > Community Nodes. Click "Install" and enter `n8n-nodes-influxdb`. Agree to the risks and install.

Refer to the [n8n documentation on installing community nodes](https://docs.n8n.io/integrations/community-nodes/installation/) for detailed instructions.

## Credentials

The node requires credentials to connect to your InfluxDB 2.x instance:

*   **InfluxDB URL:** The base URL of your InfluxDB instance (e.g., `http://localhost:8086` or your InfluxDB Cloud URL).
*   **API Token:** An InfluxDB API token with the necessary read/write permissions for your target bucket(s).
*   **Organization:** Your InfluxDB organization name or ID.

Create a new credential type specifically for this node within n8n.

## Operations

The node provides two main operations:

1.  **Read Data:**
    *   Executes a Flux query against your InfluxDB instance.
    *   Requires specifying the **Bucket** to query from.
    *   Requires providing a **Flux Query** in the query editor.
    *   Returns the query results as JSON items.

2.  **Write Data:**
    *   Writes data points to a specified InfluxDB bucket.
    *   Requires specifying the **Bucket** to write to.
    *   Requires input data formatted correctly, typically including:
        *   `measurement`: The name of the measurement.
        *   `tags`: An object containing key-value pairs for tags.
        *   `fields`: An object containing key-value pairs for fields.
        *   `timestamp` (Optional): A timestamp for the data point (various formats might be supported, often nanoseconds epoch or ISO string).
    *   Consult the node's specific input requirements or the underlying InfluxDB client library documentation for precise formatting.

## Input/Output

*   **Read:** Input can trigger the query. Output is the data returned by the Flux query.
*   **Write:** Input should be the data points to write. Output may confirm the write operation or pass through the input data.

## Alternative: HTTP Request Node

If this community node does not meet your needs (e.g., requires InfluxDB 1.x, needs unsupported operations, or has compatibility issues), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to interact directly with the [InfluxDB API](https://docs.influxdata.com/influxdb/v2/reference/api/). You will need to handle authentication (usually via an `Authorization: Token YOUR_API_TOKEN` header) and request formatting manually.

## Resources

*   [Community Node GitHub Repository](https://github.com/naskio/n8n-nodes-influxdb)
*   [InfluxDB 2.x Documentation](https://docs.influxdata.com/influxdb/v2/)
*   [Flux Language Documentation](https://docs.influxdata.com/flux/v0.x/)
*   [n8n Community Nodes Documentation](https://docs.n8n.io/integrations/community-nodes/)

---

## 49. Community_keycloak.md ---

# n8n Community Nodes: Keycloak

**Source:** [https://gitlab.com/n8n-nodes/keycloak](https://gitlab.com/n8n-nodes/keycloak)

**Status:** Community

**Note:** This documentation describes a set of community-developed nodes for interacting with Keycloak, an open-source Identity and Access Management solution. As community nodes, they are not officially supported by n8n GmbH, and their maintenance, features, and stability depend on the community developer(s). Always review the source repository for the latest information, installation instructions, and potential issues.

## Overview

This collection of nodes provides functionalities to integrate n8n workflows with Keycloak for tasks related to authentication and user management.

## Included Nodes & Functionality

Based on the repository, the following nodes are included:

1.  **Keycloak Get Token:**
    *   **Purpose:** Obtains an access token from Keycloak.
    *   **Methods:** Supports obtaining a token using either username/password (Password Grant) or client credentials (Client Credentials Grant).
    *   **Use Case:** Authenticating subsequent requests to Keycloak-protected resources or Keycloak's Admin API within the workflow.

2.  **Keycloak Token Verify:**
    *   **Purpose:** Verifies the validity of an existing Keycloak access token.
    *   **Use Case:** Checking if a token provided to the workflow (e.g., via webhook header) is still active and valid before proceeding.

3.  **Keycloak Send Email:**
    *   **Purpose:** Triggers Keycloak to send specific action-based emails to a user.
    *   **Actions:** Typically includes actions like sending a password reset email or an email verification link.
    *   **Use Case:** Automating user management tasks like password resets initiated from n8n.

4.  **Keycloak Email Verify:**
    *   **Purpose:** Checks if a specific email address exists within a given Keycloak realm.
    *   **Use Case:** Validating user existence before attempting other actions like sending emails or creating accounts.

## Installation

Community nodes typically require manual installation into your n8n instance. The exact method depends on your n8n setup (npm, Docker, n8n Cloud).

*   **Docker:** You might need to build a custom Docker image including the node package. Refer to n8n documentation on [installing community nodes in Docker](https://docs.n8n.io/hosting/installation/docker/#install-community-nodes).
*   **npm/source:** Install the package using npm or yarn within your n8n installation directory (e.g., `npm install @n8n-nodes/keycloak` - *Note: Verify the correct package name from the repository if different*).
*   **n8n Cloud:** Community node installation is generally not supported on n8n Cloud instances.

**Always consult the specific repository (`https://gitlab.com/n8n-nodes/keycloak`) for the correct installation instructions.**

## Credentials

These nodes will likely require credentials to interact with your Keycloak instance. This might involve:

*   **Keycloak Base URL:** The URL of your Keycloak server (e.g., `https://keycloak.example.com`).
*   **Realm:** The Keycloak realm you want to interact with.
*   **Client ID / Client Secret:** For operations requiring client authentication (e.g., Get Token with client credentials).
*   **Username / Password:** For operations requiring user authentication (e.g., Get Token with password grant).

The community node package may include its own specific credential type within n8n.

## Alternatives

If these community nodes are unsuitable or unavailable for your n8n setup, you can often interact with Keycloak using the generic **HTTP Request node** by calling the [Keycloak Admin REST API](https://www.keycloak.org/docs-api/latest/rest-api/index.html) directly. This requires handling authentication (obtaining tokens, often using OAuth2 Client Credentials flow within the HTTP Request node itself or a prior step) manually.

## Resources

*   **Community Node Repository:** [https://gitlab.com/n8n-nodes/keycloak](https://gitlab.com/n8n-nodes/keycloak)
*   **Keycloak Documentation:** [https://www.keycloak.org/documentation](https://www.keycloak.org/documentation)
*   **Keycloak Admin REST API:** [https://www.keycloak.org/docs-api/latest/rest-api/index.html](https://www.keycloak.org/docs-api/latest/rest-api/index.html)
*   **n8n Community Nodes Documentation:** [https://docs.n8n.io/integrations/community-nodes/](https://docs.n8n.io/integrations/community-nodes/)

---

## 50. Community_klaviyo.md ---

# n8n Community Node: Klaviyo

**Source:** [https://github.com/jayvogt/n8n-nodes-klaviyo](https://github.com/jayvogt/n8n-nodes-klaviyo)
**npm Package:** [@jayvogt/n8n-nodes-klaviyo](https://www.npmjs.com/package/@jayvogt/n8n-nodes-klaviyo)

**Status:** Community (Work in Progress)

**Note:** This documentation describes a community-developed node for interacting with Klaviyo, an email marketing and automation platform. As a community node, it is not officially supported by n8n GmbH, and its maintenance, features, and stability depend on the community developer(s). The developer notes this is a work in progress. Always review the source repository for the latest information, installation instructions, supported operations, and potential issues.

## Overview

This node allows you to interact with the Klaviyo API directly from your n8n workflows, enabling automation of tasks related to profiles (contacts) and lists.

## Installation

Community nodes require manual installation into your n8n instance. The method depends on your n8n setup:

*   **Docker:** You may need to build a custom Docker image including the node package. Refer to n8n documentation on [installing community nodes in Docker](https://docs.n8n.io/hosting/installation/docker/#install-community-nodes).
*   **npm/source:** Install the package using npm or yarn within your n8n installation directory (e.g., `npm install @jayvogt/n8n-nodes-klaviyo`).
*   **n8n Cloud:** Community node installation is generally not supported on n8n Cloud instances.

**Always consult the official n8n documentation and the specific repository (`https://github.com/jayvogt/n8n-nodes-klaviyo`) for the most accurate installation instructions.**

## Credentials

To use this node, you need to configure Klaviyo credentials in n8n:

1.  **Generate Private API Key:** In your Klaviyo account, navigate to **Account > Settings > API Keys**. Create a new Private API Key. Ensure it has the necessary permissions for the operations you intend to perform (e.g., read/write access for Profiles, Lists). The node documentation mentions needing at least read access for events verification.
2.  **Configure n8n Credential:**
    *   In n8n, create new credentials specifically for this community Klaviyo node (it will likely have its own credential type).
    *   Paste the copied **Private API Key** into the corresponding field.

Refer to the [Klaviyo documentation on API Keys](https://help.klaviyo.com/hc/en-us/articles/115005062267-How-to-Manage-Your-Account-s-API-Keys) for more details.

## Operations

Based on the repository information (as of the last check), the node supports the following resources and operations:

*   **Profiles**
    *   `Get All`: Retrieves a list of profiles.
    *   `Get One by ID`: Retrieves a specific profile using its Klaviyo ID.
    *   `Create`: Creates a new profile.
    *   `Update`: Updates an existing profile.
*   **Lists**
    *   `Get All`: Retrieves a list of lists.
    *   `Get One by ID`: Retrieves a specific list using its ID.
    *   `Create`: Creates a new list.

**Note:** The developer indicates this is a work in progress, and more operations might be added. Check the repository for the most current list.

## Use Cases

*   Sync contacts between Klaviyo and other CRM or database systems.
*   Add users to specific Klaviyo lists based on actions in other applications (e.g., purchase, form submission).
*   Update Klaviyo profiles with data from other sources.
*   Trigger workflows based on Klaviyo list or profile changes (requires separate trigger mechanism or polling).

## Alternative: HTTP Request Node

If this community node doesn't support a specific Klaviyo API endpoint or operation, or if you cannot install community nodes, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

1.  Set **Authentication** to `Header Auth`.
2.  Click **Add Header**.
3.  Set **Name** to `Authorization`.
4.  Set **Value** to `Klaviyo-API-Key YOUR_PRIVATE_API_KEY` (replace `YOUR_PRIVATE_API_KEY` with your actual key).
5.  Add another header: **Name** `revision`, **Value** `YYYY-MM-DD` (use the latest API revision date, e.g., `2024-02-15`).
6.  Add another header: **Name** `accept`, **Value** `application/json`.
7.  Configure the Method, URL (using the [Klaviyo API Reference](https://developers.klaviyo.com/en/reference/api-overview)), and Body/Query Parameters as needed.

## Resources

*   **Community Node Repository:** [https://github.com/jayvogt/n8n-nodes-klaviyo](https://github.com/jayvogt/n8n-nodes-klaviyo)
*   **npm Package:** [@jayvogt/n8n-nodes-klaviyo](https://www.npmjs.com/package/@jayvogt/n8n-nodes-klaviyo)
*   **Klaviyo API Documentation:** [https://developers.klaviyo.com/en/reference/api-overview](https://developers.klaviyo.com/en/reference/api-overview)
*   **n8n Community Nodes Documentation:** [https://docs.n8n.io/integrations/community-nodes/](https://docs.n8n.io/integrations/community-nodes/)

---

## 51. Community_listmonk.md ---

# n8n Community Node: Listmonk

**Source:** [https://github.com/LucasSovre/listmonk-n8n](https://github.com/LucasSovre/listmonk-n8n)
**npm Package:** [n8n-nodes-listmonk](https://www.npmjs.com/package/n8n-nodes-listmonk)

**Status:** Community

**Note:** This documentation describes a community-developed node for interacting with Listmonk, a self-hosted email list and newsletter manager. As a community node, it is not officially supported by n8n GmbH, and its maintenance, features, and stability depend on the community developer(s). Always review the source repository for the latest information, installation instructions, supported operations, and potential issues.

## Overview

This node allows you to interact with the Listmonk API directly from your n8n workflows, enabling automation of tasks related to subscribers, lists, campaigns, templates, and transactional emails.

## Installation

Community nodes require manual installation into your n8n instance. The method depends on your n8n setup:

*   **Docker:** You may need to build a custom Docker image including the node package. Refer to n8n documentation on [installing community nodes in Docker](https://docs.n8n.io/hosting/installation/docker/#install-community-nodes).
*   **npm/source:** Install the package using npm or yarn within your n8n installation directory (e.g., `npm install n8n-nodes-listmonk`).
*   **n8n Cloud:** Community node installation is generally not supported on n8n Cloud instances.

**Always consult the official n8n documentation and the specific repository (`https://github.com/LucasSovre/listmonk-n8n`) for the most accurate installation instructions.**

## Credentials

To use this node, you need to configure Listmonk credentials in n8n:

1.  **Listmonk URL:** The base URL of your self-hosted Listmonk instance (e.g., `https://listmonk.example.com`).
2.  **Authentication:** The node uses Basic Authentication.
    *   **User:** Your Listmonk API username.
    *   **Password:** Your Listmonk API password.

Refer to the [Listmonk API Documentation](https://listmonk.app/docs/apis/) for details on API authentication.

## Operations

Based on the repository information, the node aims to cover most Listmonk API functionalities, including:

*   **Lists:** Manage mailing lists (create, get, update, delete).
*   **Subscribers:** Manage subscribers (create, get, update, delete, blocklist, manage subscriptions to lists).
*   **Campaigns:** Manage email campaigns (create, get, update, delete, manage status, get stats).
*   **Media:** Manage uploaded media/images.
*   **Templates:** Manage email templates.
*   **Transactional:** Send transactional emails.

**Note:** Refer to the node within the n8n editor after installation for the specific list of available resources and operations, as community nodes evolve.

## Use Cases

*   Add new users from sign-up forms or other apps to Listmonk lists.
*   Update subscriber details based on CRM data.
*   Trigger campaigns based on external events.
*   Send transactional emails (e.g., password resets, order confirmations) via Listmonk.
*   Synchronize subscriber lists with other platforms.

## Alternative: HTTP Request Node

If this community node doesn't support a specific Listmonk API endpoint or operation, or if you cannot install community nodes, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

1.  Set **Authentication** to `Basic Auth`.
2.  Select or create credentials, entering your Listmonk API **User** and **Password**.
3.  Configure the Method (GET, POST, etc.), URL (using the [Listmonk API Reference](https://listmonk.app/docs/apis/)), and Body/Query Parameters as needed for the desired API call.

## Resources

*   **Community Node Repository:** [https://github.com/LucasSovre/listmonk-n8n](https://github.com/LucasSovre/listmonk-n8n)
*   **npm Package:** [n8n-nodes-listmonk](https://www.npmjs.com/package/n8n-nodes-listmonk)
*   **Listmonk API Documentation:** [https://listmonk.app/docs/apis/](https://listmonk.app/docs/apis/)
*   **n8n Community Nodes Documentation:** [https://docs.n8n.io/integrations/community-nodes/](https://docs.n8n.io/integrations/community-nodes/)

---

## 52. Community_mastodon.md ---

# n8n Integration: Mastodon

**Status:** Community node available; HTTP Request node also viable.

## Overview

Mastodon is a free, open-source, decentralized social networking service. It allows users to host their own server nodes in the network (known as "instances"). n8n can interact with Mastodon instances through a community-developed node or via the generic HTTP Request node.

## Option 1: Community Node (`n8n-nodes-mastodon`)

A community node exists that provides dedicated operations for Mastodon.

*   **Repository:** [https://github.com/n8n-community-node/n8n-nodes-mastodon](https://github.com/n8n-community-node/n8n-nodes-mastodon)
*   **Installation:** Follow the standard n8n [community node installation guide](https://docs.n8n.io/integrations/community-nodes/installation/). You typically need to add the package name `@n8n-community/n8n-nodes-mastodon` to your n8n configuration (e.g., via environment variable `NODE_FUNCTION_ALLOW_EXTERNAL=n8n-nodes-mastodon` or in your `docker-compose.yml`) and restart n8n.

### Credentials (Community Node)

The community node uses OAuth2 for authentication.

1.  **Register an Application in Mastodon:** Go to your Mastodon instance's `Preferences > Development > New Application`.
2.  Give your application a name (e.g., "n8n Integration").
3.  Set the **Redirect URI** to your n8n instance's OAuth callback URL (e.g., `https://your-n8n-domain/rest/oauth2-credential/callback`).
4.  Ensure the necessary **Scopes** are selected (e.g., `read`, `write`, `follow`). The community node documentation might specify required scopes.
5.  Save the application to get your **Client Key** and **Client Secret**.
6.  **Create n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Mastodon** (this should appear after installing the community node).
    *   Enter your Mastodon instance URL (e.g., `https://mastodon.social`).
    *   Enter the **Client ID** (Client Key from Mastodon) and **Client Secret**.
    *   Click **Connect my account** and authorize the application via the Mastodon login prompt.

### Operations (Community Node)

Based on the repository, the node supports operations like:

*   **Create:** Publish a new status (toot).
*   **Delete:** Delete a status.
*   **Favourite:** Favourite a status.
*   **Boost:** Boost (reblog) a status.
*   **Search:** Perform a search.

*(Note: Community nodes might have varying levels of maintenance and feature completeness.)*

## Option 2: HTTP Request Node

You can use n8n's [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to interact directly with the [Mastodon REST API](https://docs.joinmastodon.org/api/rest/).

### Authentication (HTTP Request Node)

1.  **Generate Access Token:** Go to your Mastodon instance's `Preferences > Development > New Application`. Create an application as described above, ensuring the required scopes are selected. After saving, you will see your **Access Token** on the application details page. Copy this token.
2.  **Create n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Select **Header Auth**.
    *   **Name:** `Authorization`
    *   **Value:** `Bearer YOUR_MASTODON_ACCESS_TOKEN` (replace with the token you copied).
    *   Save the credential (e.g., named "Mastodon Header Auth").

### Making API Calls (HTTP Request Node)

1.  **Configure HTTP Request Node:**
    *   **URL:** Construct the URL based on your Mastodon instance URL and the desired API endpoint (e.g., `https://your-instance.social/api/v1/statuses`, `https://your-instance.social/api/v1/accounts/verify_credentials`).
    *   **Method:** Select the appropriate HTTP method (GET, POST, DELETE, etc.) as per the Mastodon API documentation.
    *   **Authentication:** Select `Header Auth` and choose the credential you created.
    *   **Body/Query Parameters:** Add necessary parameters according to the API endpoint requirements (e.g., for posting a status, add `status` parameter in the Body).
    *   **Send Body/Query:** Ensure correct options are selected.

## Recommendation

*   If the **community node** is maintained and covers your required operations, it often provides a more user-friendly experience with pre-defined fields.
*   If the community node is unavailable, outdated, or doesn't support a specific API endpoint you need, the **HTTP Request node** offers full flexibility to interact with the entire Mastodon API.

## Resources

*   [n8n Community Node Installation Guide](https://docs.n8n.io/integrations/community-nodes/installation/)
*   [Mastodon Community Node Repository](https://github.com/n8n-community-node/n8n-nodes-mastodon)
*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Header Auth Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/header-auth/)
*   [Official Mastodon API Documentation](https://docs.joinmastodon.org/api/)

---

## 53. Community_sharepoint.md ---

# n8n Integration: Microsoft SharePoint

**Status:** Community node available (limited documentation); HTTP Request node + Graph API recommended.

## Overview

Microsoft SharePoint is a web-based collaborative platform often used for document management and storage. n8n can interact with SharePoint Online primarily through the Microsoft Graph API, either via a community node or the generic HTTP Request node.

## Option 1: Community Node (`n8n-nodes-sharepoint` by arisechurch)

A community node exists that aims to simplify interactions with SharePoint using the Microsoft Graph API.

*   **Repository:** [https://github.com/arisechurch/n8n-nodes-sharepoint](https://github.com/arisechurch/n8n-nodes-sharepoint)
*   **Package Name:** `n8n-nodes-sharepoint` (Note: Use this exact name for installation, not `@arisechurch/...`)
*   **Installation:** Follow the standard n8n [community node installation guide](https://docs.n8n.io/integrations/community-nodes/installation/). Add `n8n-nodes-sharepoint` to your n8n configuration (e.g., via environment variable `NODE_FUNCTION_ALLOW_EXTERNAL=n8n-nodes-sharepoint` or in your `docker-compose.yml`) and restart n8n.

### Credentials (Community Node & HTTP Request)

Both the community node and direct HTTP requests using the Graph API typically require **Microsoft OAuth2 credentials** configured in n8n.

1.  **Register an Azure AD Application:** You need to register an application in your Azure Active Directory tenant that has the necessary Microsoft Graph API permissions for SharePoint (e.g., `Sites.Read.All`, `Files.ReadWrite.All`, depending on your needs).
2.  **Configure n8n Microsoft Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Microsoft (OAuth2 API)**.
    *   Follow the n8n documentation for [Microsoft credentials](https://docs.n8n.io/integrations/builtin/credentials/microsoft/). You will need the Application (client) ID, Directory (tenant) ID, and a Client Secret or Certificate from your Azure AD app registration.
    *   **Important for SharePoint:** The n8n credential setup specifically mentions needing your **SharePoint Subdomain**. Enter the subdomain part of your SharePoint URL (e.g., if your URL is `https://mycompany.sharepoint.com`, the subdomain is `mycompany`).
    *   Complete the OAuth2 connection flow.

### Operations & Usage (Community Node)

The `arisechurch/n8n-nodes-sharepoint` repository README provides limited information beyond installation. It states the node uses the Microsoft Graph API. Specific operations, parameters, and usage examples are not detailed in the README. You may need to install the node and explore its interface within n8n to understand its capabilities.

## Option 2: HTTP Request Node + Microsoft Graph API

This method offers full flexibility by allowing you to make any call supported by the Microsoft Graph API for SharePoint.

1.  **Set up Credentials:** Configure the **Microsoft (OAuth2 API)** credentials in n8n as described above.
2.  **Find SharePoint Site ID:** You often need the unique ID of the SharePoint site you want to interact with. You can get this using a Graph API call:
    *   **HTTP Request Node (Get Site ID):**
        *   Method: `GET`
        *   URL: `https://graph.microsoft.com/v1.0/sites/YOUR_TENANT.sharepoint.com:/sites/YOUR_SITE_NAME` (Replace placeholders)
        *   Authentication: `OAuth2`
        *   Credentials: Select your configured Microsoft credential.
    *   The response will contain the `id` of the site.
3.  **Find Drive ID (Document Library):** Similarly, find the ID of the specific document library (Drive) within the site:
    *   **HTTP Request Node (Get Drive ID):**
        *   Method: `GET`
        *   URL: `https://graph.microsoft.com/v1.0/sites/{{ $json.siteId }}/drives` (Use the site ID from the previous step)
        *   Authentication: `OAuth2`
        *   Credentials: Select your configured Microsoft credential.
    *   Find the desired library in the response and note its `id`.
4.  **Configure HTTP Request Node for Operations:**
    *   **URL:** Construct the URL using the Microsoft Graph API endpoint for the desired SharePoint action (e.g., listing files, uploading files, getting list items). Use the Site ID and Drive ID where required.
        *   Example (List items in root of a drive): `https://graph.microsoft.com/v1.0/sites/{{ $json.siteId }}/drives/{{ $json.driveId }}/root/children`
        *   Example (Upload file): `https://graph.microsoft.com/v1.0/sites/{{ $json.siteId }}/drives/{{ $json.driveId }}/root:/YOUR_FOLDER/{{ $json.fileName }}:/content` (Use PUT method)
    *   **Method:** Select the appropriate HTTP method (GET, POST, PUT, DELETE, PATCH) as per the Graph API documentation.
    *   **Authentication:** Select `OAuth2` and choose your Microsoft credential.
    *   **Body/Query Parameters:** Add necessary parameters or request body content as required by the specific Graph API endpoint.
    *   **Send Body/Query/Headers:** Configure as needed (e.g., for file uploads, you might need to send binary data and set `Content-Type` headers).

## Recommendation

*   Try the **community node** first, as it might simplify common operations if it's functional and covers your needs. Be prepared for limited documentation.
*   For full control, complex operations, or if the community node is insufficient, use the **HTTP Request node** with the **Microsoft Graph API**. This requires understanding the Graph API structure but offers complete flexibility.

## Resources

*   [n8n Community Node Installation Guide](https://docs.n8n.io/integrations/community-nodes/installation/)
*   [arisechurch/n8n-nodes-sharepoint Repository](https://github.com/arisechurch/n8n-nodes-sharepoint)
*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Microsoft Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)
*   [Microsoft Graph API Documentation](https://learn.microsoft.com/en-us/graph/api/overview)
*   [Microsoft Graph - Working with SharePoint sites](https://learn.microsoft.com/en-us/graph/api/resources/sharepoint)
*   [Microsoft Graph - Working with Files (Drives/DriveItems)](https://learn.microsoft.com/en-us/graph/api/resources/driveitem)

---

## 54. Contentful.md ---

# n8n Node: Contentful

The Contentful node provides an interface to interact with Contentful, a composable content platform used by many organizations to create, manage, and deliver digital content across various channels. This node allows users to automate tasks related to fetching content and structural information from their Contentful spaces within n8n workflows.

## Functionality

The node focuses on read operations against the Contentful Content Delivery API (CDA) or Content Preview API (CPA), allowing retrieval of various content elements:

*   **Asset Operations:** Assets represent media files (images, videos, documents) stored in Contentful.
    *   *Get:* Retrieves a single asset by its unique ID.
    *   *Get All:* Fetches a collection of assets, often with options for filtering (e.g., by MIME type) and pagination.
*   **Content Type Operations:** Content types define the structure (fields) of specific kinds of content entries (e.g., blog post, product page).
    *   *Get:* Retrieves the definition of a single content type by its ID.
*   **Entry Operations:** Entries are individual pieces of content based on a specific content type.
    *   *Get:* Retrieves a single content entry by its unique ID.
    *   *Get All:* Fetches a collection of entries, typically allowing filtering by content type, field values, and other parameters, along with pagination and ordering.
*   **Locale Operations:** Locales represent the different languages or regional variations supported in the Contentful space.
    *   *Get All:* Retrieves a list of all configured locales for the space.
*   **Space Operations:** A space is the top-level container for all content, assets, and settings in Contentful.
    *   *Get:* Retrieves general information about the Contentful space itself.

## Credentials

To interact with Contentful, the node requires credentials configured in n8n:

*   **Space ID:** The unique identifier for the Contentful space.
*   **Access Token:** An API key generated within Contentful (Settings > API keys). Typically, a Content Delivery API (CDA) key is used for fetching published content, while a Content Preview API (CPA) key can be used to fetch draft/unpublished content. The node likely allows specifying which API (Delivery or Preview) to use.
*   **(Optional) Environment:** If using Contentful environments, the specific environment ID (e.g., `master`) might be required.

## Use Cases

Common use cases include:

*   Fetching content entries to populate websites, mobile apps, or other digital experiences.
*   Retrieving assets (like image URLs) associated with content entries.
*   Syncing content from Contentful to other systems (e.g., search indexes, databases).
*   Generating reports based on content stored in Contentful.
*   Automating content validation or processing tasks.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.contentful/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.contentful/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/contentful/](https://docs.n8n.io/integrations/builtin/credentials/contentful/)*

---

## 55. Convertkit.md ---

# n8n Node: ConvertKit

ConvertKit is an email marketing platform designed for creators (bloggers, authors, course creators, etc.). The ConvertKit node in n8n allows users to automate interactions with their ConvertKit account, managing subscribers, tags, forms, sequences, and custom fields directly within workflows.

## Functionality

The node provides operations across several ConvertKit resources:

*   **Custom Field Operations:** Custom fields allow storing additional information about subscribers.
    *   *Create a field:* Adds a new custom field to the account.
    *   *Delete a field:* Removes an existing custom field.
    *   *Get all fields:* Retrieves a list of all custom fields defined in the account.
    *   *Update a field:* Modifies the properties (like the name) of an existing custom field.
*   **Form Operations:** Forms are used to capture new subscribers.
    *   *Add a subscriber:* Subscribes a new contact to a specific ConvertKit form.
    *   *Get all forms:* Retrieves a list of all forms created in the account.
    *   *List subscriptions to a form:* Fetches subscribers associated with a specific form, including their data.
*   **Sequence Operations:** Sequences are automated series of emails sent to subscribers.
    *   *Add a subscriber:* Subscribes a contact to a specific email sequence.
    *   *Get all sequences:* Retrieves a list of all email sequences in the account.
    *   *Get all subscriptions to a sequence:* Fetches subscribers currently in a specific sequence, including their data.
*   **Tag Operations:** Tags are used to segment subscribers.
    *   *Create a tag:* Adds a new tag to the account.
    *   *Get all tags:* Retrieves a list of all tags created in the account.
*   **Tag Subscriber Operations:** Manages the relationship between tags and subscribers.
    *   *Add a tag to a subscriber:* Applies an existing tag to a specific subscriber, identified by email or ID.
    *   *List subscriptions to a tag:* Fetches subscribers who have a specific tag applied, including their data.
    *   *Delete a tag from a subscriber:* Removes a specific tag from a subscriber.

## Credentials

Authentication requires two pieces of information from the ConvertKit account:

*   **API Key:** Found in the ConvertKit account settings (Account Settings > Advanced > API Key).
*   **API Secret:** Found in the ConvertKit account settings (Account Settings > Advanced > API Secret).

These are used to create a ConvertKit credential entry in n8n.

## Use Cases

Common use cases include:

*   Adding new subscribers to forms or sequences based on external triggers (e.g., purchases, website sign-ups).
*   Tagging subscribers based on their actions or data from other applications.
*   Syncing subscriber data between ConvertKit and other CRM or marketing tools.
*   Managing custom fields programmatically.
*   Retrieving lists of subscribers based on forms, sequences, or tags for reporting or further processing.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.convertkit/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.convertkit/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/convertkit/](https://docs.n8n.io/integrations/builtin/credentials/convertkit/)*

---

## 56. Copper.md ---

# n8n-nodes-base.copper

## Description

The Copper node allows interaction with the Copper CRM (formerly ProsperWorks). It supports operations on various CRM objects like Companies, Leads, Opportunities, People, Projects, Tasks, Users, and Customer Sources.

## Credentials

Requires Copper API credentials (API Key and User Email).

## Resources and Operations

*   **Company**: Create, Delete, Get, Get All, Update
*   **Customer Source**: Get All
*   **Lead**: Create, Delete, Get, Get All, Update
*   **Opportunity**: Create, Delete, Get, Get All, Update
*   **Person**: Create, Delete, Get, Get All, Update
*   **Project**: Create, Delete, Get, Get All, Update
*   **Task**: Create, Delete, Get, Get All, Update
*   **User**: Get All

## Parameters (Common)

*   **Authentication**: Select the Copper credential.
*   **Resource**: Select the Copper resource (Company, Lead, Person, etc.).
*   **Operation**: Select the operation for the chosen resource.

### Parameters (Vary by Resource/Operation)

*   **Company ID**: Required for company-specific operations.
*   **Lead ID**: Required for lead-specific operations.
*   **Opportunity ID**: Required for opportunity-specific operations.
*   **Person ID**: Required for person-specific operations.
*   **Project ID**: Required for project-specific operations.
*   **Task ID**: Required for task-specific operations.
*   **Name**: For creating/updating companies, leads, opportunities, people, projects, tasks.
*   **Assignee ID**: User ID to assign records to.
*   **Contact Type**: (e.g., "Current Client", "Potential Client").
*   **Details**: Description or notes fields.
*   **Email**: Email address for people or leads.
*   **Phone Numbers**: Array of phone numbers.
*   **Addresses**: Address details (street, city, state, postal code, country).
*   **Pipeline ID**: For opportunities.
*   **Pipeline Stage ID**: For opportunities.
*   **Value**: Monetary value for opportunities.
*   **Due Date**: For tasks.
*   **Filters/Query Parameters**: Options for `Get All` operations (e.g., sorting, filtering by name, email, status, tags, date ranges).
*   **Return All**: (Boolean) Option in `Get All` operations to handle pagination automatically.
*   **Limit**: (Number) Limit the number of results returned in `Get All` operations.
*   **Additional Fields**: Options to include specific fields in the response.

## JSON Structure Example (Conceptual - Create Lead)

```json
{
  "parameters": {
    "resource": "lead",
    "operation": "create",
    "name": "{{ $json.leadName }}",
    "additionalFields": {
        "assigneeId": 12345, // User ID of the assignee
        "companyName": "{{ $json.companyName }}",
        "customerSourceId": 9876, // ID of the customer source
        "details": "{{ $json.leadNotes }}",
        "email": {
            "email": "{{ $json.leadEmail }}",
            "category": "work"
        },
        "phoneNumbers": [
            {
                "number": "{{ $json.phoneNumber }}",
                "category": "work"
            }
        ],
        "status": "New",
        "title": "{{ $json.jobTitle }}",
        "tags": ["n8n-generated", "{{ $json.sourceTag }}"]
    }
  },
  "name": "Create Copper Lead",
  "type": "n8n-nodes-base.copper",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2100,
    1300
  ],
  "credentials": {
    "copperApi": {
      "id": "YOUR_COPPER_CREDENTIAL_ID",
      "name": "Copper Credential Name"
    }
  }
}
```

---

## 57. Customerio.md ---

# n8n Node: Customer.io

Customer.io is a marketing automation platform that helps businesses send targeted emails, push notifications, and SMS messages based on user behavior. The Customer.io node in n8n allows users to interact with the Customer.io API to manage customer data, track events, and interact with campaigns and segments.

## Functionality

The node provides operations across several key Customer.io resources:

*   **Customer Operations:** Manage individual customer profiles.
    *   *Create/Update a customer:* Adds a new customer or updates an existing one based on their ID. Allows setting various attributes.
    *   *Delete a customer:* Removes a customer profile from Customer.io.
*   **Event Operations:** Track actions performed by users.
    *   *Track a customer event:* Records an event associated with an identified customer (using their ID).
    *   *Track an anonymous event:* Records an event associated with an anonymous user (using an anonymous ID).
*   **Campaign Operations:** Interact with marketing campaigns.
    *   *Get:* Retrieves details about a specific campaign by its ID.
    *   *Get All:* Fetches a list of all campaigns in the account.
    *   *Get Metrics:* Retrieves performance metrics for a specific campaign.
*   **Segment Operations:** Manage customer segments.
    *   *Add Customer:* Adds a specific customer to a designated segment.
    *   *Remove Customer:* Removes a specific customer from a designated segment.

## Credentials

Authentication requires credentials obtained from your Customer.io account settings:

*   **Site ID:** Found under Account Settings > API Credentials.
*   **API Key:** An App API Key generated under Account Settings > API Credentials. Ensure the key has the necessary permissions for the desired operations.

These are used to create a Customer.io credential entry in n8n.

## Use Cases

Common use cases include:

*   Adding or updating customer profiles in Customer.io based on data from other systems (CRM, e-commerce platform).
*   Tracking key user actions (e.g., sign-ups, purchases, feature usage) as events in Customer.io.
*   Adding users to specific segments based on triggers or data changes.
*   Retrieving campaign information or metrics for reporting purposes.
*   Deleting customer profiles upon request or based on inactivity.

## Unsupported Operations

If a specific Customer.io API operation is not directly supported by the node, the documentation suggests using the generic **HTTP Request** node with the configured Customer.io credentials to make custom API calls.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.customerio/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.customerio/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/customerio/](https://docs.n8n.io/integrations/builtin/credentials/customerio/)*

---

## 58. Datadog.md ---

# Datadog Integration

While n8n does not offer a dedicated, operation-specific node for Datadog, it does provide official credential support for the service.

Datadog is a widely used monitoring and analytics platform. To interact with Datadog from within n8n, the recommended approach is to leverage the official Datadog credentials in conjunction with the generic HTTP Request node.

Integration steps typically involve:

1.  **Configuring Datadog Credentials:** Set up Datadog credentials within n8n using your Datadog API key and Application key. Refer to the n8n documentation on [Datadog credentials](https://docs.n8n.io/integrations/builtin/credentials/datadog/) (Note: This link might need verification as official credential docs weren't found in the initial search, but credential support was mentioned).
2.  **Using the HTTP Request Node:** Add an HTTP Request node to your workflow.
    *   Select the configured Datadog credentials for authentication.
    *   Specify the appropriate HTTP method (GET, POST, etc.) based on the desired Datadog API action.
    *   Enter the correct Datadog API endpoint URL.
    *   Provide any necessary request body or parameters according to the Datadog API documentation.

This method allows you to send metrics, events, logs, or query data from Datadog by making direct calls to its API.

Always consult the official [Datadog API documentation](https://docs.datadoghq.com/api/latest/) for the most up-to-date information on endpoints, request formats, and authentication requirements.

---

## 59. Deepl.md ---

# n8n Node: DeepL

DeepL is a popular machine translation service known for its high-quality translations. The DeepL node (`n8n-nodes-base.deepl`) in n8n allows users to integrate DeepL's translation capabilities directly into their workflows.

## Functionality

The primary operation supported by the DeepL node is:

*   **Language - Translate data:** Takes input text and translates it into a specified target language. It can often automatically detect the source language, or the source language can be specified.

## Parameters

Key parameters for the 'Translate data' operation typically include:

*   **Text:** The input text to be translated. This can be static text or dynamically mapped from previous nodes using expressions.
*   **Target Language:** The language to translate the text into (e.g., 'EN-US', 'DE', 'FR', 'ES').
*   **Source Language (Optional):** The language of the input text. If left unspecified, DeepL attempts automatic detection.
*   **Formality (Optional):** Allows specifying the desired level of formality for the translation (e.g., 'default', 'more', 'less'), depending on the target language.
*   **Split Sentences (Optional):** Controls how the input text is split into sentences before translation.
*   **Preserve Formatting (Optional):** Attempts to preserve formatting from the source text.
*   **Tag Handling (Optional):** Specifies how to handle certain tags (e.g., XML tags) within the text.

## Credentials

Authentication requires a DeepL API Key:

*   **API Key:** Obtainable from your DeepL account (either the Free or Pro plan). The type of key (Free vs. Pro) determines usage limits and features.

This key is used to create a DeepL credential entry in n8n.

## AI Tool Capability

This node can also be used as an AI tool within n8n, allowing AI agents to leverage its translation capabilities dynamically.

## Use Cases

*   Translating user input from forms or messages.
*   Localizing content for emails, websites, or documents.
*   Translating product descriptions or reviews.
*   Processing multilingual datasets.

## Unsupported Operations

For DeepL API features not directly exposed by the node (e.g., document translation, glossary management), the documentation suggests using the generic **HTTP Request** node with the configured DeepL credentials.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.deepl/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.deepl/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/deepl/](https://docs.n8n.io/integrations/builtin/credentials/deepl/)*

---

## 60. Discord.md ---

# n8n-nodes-base.discord

## Description

The Discord node allows interaction with the Discord chat platform. It supports operations related to Channels, Messages, and Members (Roles).

## Credentials

Requires Discord Bot Token credentials.

## Resources and Operations

*   **Channel**
    *   `Create`: Create a new channel in a guild (server).
    *   `Delete`: Delete a channel.
    *   `Get`: Retrieve information about a specific channel.
    *   `Get Many`: List channels in a guild.
    *   `Update`: Modify an existing channel.
*   **Message**
    *   `Delete`: Delete a message.
    *   `Get`: Retrieve a specific message.
    *   `Get Many`: Retrieve multiple messages from a channel.
    *   `React with Emoji`: Add an emoji reaction to a message.
    *   `Send`: Send a message to a channel (text, embeds, files).
    *   `Send and Wait for Response`: Send a message with interactive components (buttons, forms) and pause the workflow until a user responds or a timeout occurs.
*   **Member**
    *   `Get Many`: List members in a guild.
    *   `Role Add`: Add a role to a member.
    *   `Role Remove`: Remove a role from a member.

## Parameters (Common)

*   **Authentication**: Select the Discord credential.
*   **Resource**: Select the Discord resource (Channel, Message, Member).
*   **Operation**: Select the operation for the chosen resource.

### Parameters (Vary by Resource/Operation)

*   **Guild ID / Server ID**: The ID of the Discord server.
*   **Channel ID**: The ID of the target channel for message/channel operations.
*   **Message ID**: The ID of the target message for delete/get/react operations.
*   **User ID**: The ID of the target member for role operations.
*   **Role ID**: The ID of the role to add/remove.
*   **Name**: For creating/updating channels.
*   **Content**: The text content of the message to send.
*   **Embeds**: (JSON/Expression) Array of embed objects to include in the message. See [Discord Embed Structure](https://discord.com/developers/docs/resources/channel#embed-object).
*   **File Upload (Binary Property)**: Name of the binary property in n8n input data containing the file to upload.
*   **Emoji**: The emoji to use for reactions (can be standard unicode or custom emoji format `<:name:id>`).
*   **Filters/Query Parameters**: Options for `Get Many` operations (e.g., limit, before/after message ID).
*   **Wait Options (for Send and Wait)**:
    *   **Response Type**: `Approval`, `Free Text`, `Custom Form`.
    *   **Limit Wait Time**: (Boolean) Enable timeout.
    *   **Timeout Interval/Time**: Duration or specific time for timeout.
    *   **Customization**: Options for button labels, form titles, form fields (depending on Response Type).

## JSON Structure Example (Conceptual - Send Message with Embed)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "send",
    "channelId": "{{ $json.discordChannelId }}", // Target Channel ID
    "content": "New update posted!",
    "options": {
        "embeds": [
            {
                "title": "{{ $json.updateTitle }}",
                "description": "{{ $json.updateDetails }}",
                "color": 3447003, // Example color (blue)
                "fields": [
                    {
                        "name": "Status",
                        "value": "{{ $json.status }}",
                        "inline": true
                    },
                    {
                        "name": "Link",
                        "value": "[Click Here]({{ $json.updateLink }})",
                        "inline": true
                    }
                ],
                "timestamp": "{{ $now.toISO() }}"
            }
        ]
        // "fileUpload": "data" // Optional: if uploading a file from binary property 'data'
    }
  },
  "name": "Send Discord Update",
  "type": "n8n-nodes-base.discord",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2200,
    1400
  ],
  "credentials": {
    "discordApi": {
      "id": "YOUR_DISCORD_CREDENTIAL_ID",
      "name": "Discord Bot Credential"
    }
  }
}
```

---

## 61. Discourse.md ---

# n8n Node: Discourse

Discourse is a popular open-source platform for community discussion forums. The Discourse node (`n8n-nodes-base.discourse`) in n8n provides an interface to automate interactions with a Discourse instance.

## Functionality

The node supports a variety of operations across different Discourse resources:

*   **Category:**
    *   Create a new category.
    *   Retrieve a list of all categories.
    *   Update an existing category.
*   **Group:**
    *   Create a new group.
    *   Get details of a specific group.
    *   Retrieve a list of all groups.
    *   Update an existing group.
*   **Post:**
    *   Create a new post (topic or reply).
    *   Get details of a specific post.
    *   Retrieve a list of all posts (potentially with filtering).
    *   Update an existing post.
*   **User:**
    *   Create a new user.
    *   Get details of a specific user.
    *   Retrieve a list of all users.
*   **User Group:**
    *   Add a user to a group.
    *   Remove a user from a group.

## Parameters

Parameters depend heavily on the selected Resource (Category, Group, Post, User, User Group) and Operation. Common parameters include:

*   **Resource:** The type of Discourse object to interact with.
*   **Operation:** The specific action to perform (e.g., Create, Get All, Update).
*   **IDs:** Identifiers for specific categories, groups, posts, or users when getting or updating single items.
*   **Name/Title/Content:** Fields for creating or updating resources.
*   **Usernames/Group Names:** For managing users and group memberships.
*   **Filters/Options:** Additional parameters to refine Get All operations or specify details for creation/updates.

## Credentials

Authentication requires:

*   **API Key:** Generated within the Discourse admin interface for a specific user (often an admin user).
*   **API Username:** The username associated with the API Key.
*   **Base URL:** The URL of your Discourse instance (e.g., `https://meta.discourse.org`).

These details are used to create a Discourse credential entry in n8n.

## Use Cases

*   Automatically creating forum topics based on external events (e.g., new blog posts, support tickets).
*   Syncing user groups between Discourse and other systems.
*   Retrieving forum statistics or posts for reporting.
*   Moderation tasks like updating posts or managing users based on external triggers.
*   Creating users or adding them to groups as part of an onboarding process.

## Unsupported Operations

If a specific Discourse API endpoint or operation is not directly supported by the node, the documentation recommends using the generic **HTTP Request** node with the configured Discourse credentials.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.discourse/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.discourse/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/discourse/](https://docs.n8n.io/integrations/builtin/credentials/discourse/)*

---

## 62. Dropbox.md ---

# n8n-nodes-base.dropbox

## Description

The Dropbox node allows interaction with the Dropbox cloud storage service. It supports operations on files and folders, including creating, downloading, moving, copying, and searching.

## Credentials

Requires Dropbox credentials (OAuth2).

## Resources and Operations

*   **File**
    *   `Copy`: Copy a file to a different location.
    *   `Delete`: Delete a file.
    *   `Download`: Download a file (retrieves as binary data in n8n).
    *   `Move`: Move a file to a different location.
    *   `Upload`: Upload a file (binary data from n8n) to a folder.
*   **Folder**
    *   `Copy`: Copy a folder to a different location.
    *   `Create`: Create a new folder.
    *   `Delete`: Delete a folder (and its contents).
    *   `Return Contents`: List the files and folders within a specified folder.
    *   `Move`: Move a folder to a different location.
*   **Search**
    *   `Query`: Search for files and folders based on a query string.

## Parameters (Common)

*   **Authentication**: Select the Dropbox credential.
*   **Resource**: Select the resource type (File, Folder, Search).
*   **Operation**: Select the operation for the chosen resource.

### Parameters (Vary by Resource/Operation)

*   **Path**: The full path to the file or folder in Dropbox (e.g., `/Apps/n8n/report.pdf` or `/Shared/Images`). Paths are case-insensitive.
*   **From Path**: The source path for `Copy` or `Move` operations.
*   **To Path**: The destination path for `Copy` or `Move` operations.
*   **Binary Property**: Name of the binary property in n8n input data containing the file to upload (for `Upload` operation).
*   **Query**: The search string for the `Search` operation.
*   **Recursive**: (Boolean) Option for `Return Contents` or `Search` to search subfolders.
*   **Include Deleted**: (Boolean) Option for `Return Contents` or `Search` to include deleted items.
*   **Mode**: (For `Upload`) How to handle conflicts if a file with the same name exists (`add`, `overwrite`, `update`).
*   **Auto Rename**: (Boolean, for `Upload`, `Copy`, `Move`) If true, Dropbox will rename the file/folder if a conflict occurs.
*   **Allow Shared Folder**: (Boolean, for `Copy`, `Move`) Allow operations on shared folders.
*   **Allow Ownership Transfer**: (Boolean, for `Copy`, `Move`) Allow transferring ownership if moving between shared folders.
*   **Limit**: (Number) Limit the number of results for `Return Contents` or `Search`.

## JSON Structure Example (Conceptual - Upload File)

```json
{
  "parameters": {
    "resource": "file",
    "operation": "upload",
    "path": "/n8n_uploads/{{ $now.toFormat("yyyy-MM") }}/{{ $json.filename }}", // Destination path
    "binaryPropertyName": "data", // Assumes input item has binary data in property 'data'
    "options": {
        "mode": "add", // Default: add (renames if conflict), overwrite, update
        "autorename": true
    }
  },
  "name": "Upload to Dropbox",
  "type": "n8n-nodes-base.dropbox",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2300,
    1500
  ],
  "credentials": {
    "dropboxOAuth2Api": {
      "id": "YOUR_DROPBOX_CREDENTIAL_ID",
      "name": "Dropbox Credential Name"
    }
  }
}
```

---

## 63. EditImage.md ---

# n8n-nodes-base.editImage

## Description

The Edit Image node is a core n8n node used for manipulating image data provided as binary input. It leverages the GraphicsMagick library (which must be installed if not using Docker) to perform various image editing tasks.

## Credentials

This node does not require credentials.

## Dependencies

*   Requires `GraphicsMagick` to be installed in the n8n environment if not running via Docker.
*   Requires image data to be passed as a binary property from a preceding node (e.g., `Read Binary File`, `HTTP Request`).

## Operations

*   **Blur**: Apply a blur effect.
*   **Border**: Add a border around the image.
*   **Composite**: Overlay one image onto another using various operators.
*   **Create**: Create a new blank image with a specified background color.
*   **Crop**: Extract a rectangular region from the image.
*   **Draw**: Draw primitive shapes (Circle, Line, Rectangle) onto the image.
*   **Get Information**: Retrieve metadata about the image (format, dimensions, color space, etc.) as JSON.
*   **Multi Step**: Perform a sequence of other edit operations within a single node.
*   **Resize**: Change the dimensions of the image with various aspect ratio options.
*   **Rotate**: Rotate the image by a specified angle.
*   **Shear**: Skew the image along the X or Y axis.
*   **Text**: Add text overlay onto the image.
*   **Transparent**: Make a specific color transparent.

## Parameters (Common)

*   **Operation**: Select the editing operation to perform.
*   **Property Name**: The name of the binary property in the input item that contains the image data (default: `data`).

### Parameters (Vary by Operation)

*   **Blur**: `Blur` (strength), `Sigma`.
*   **Border**: `Border Width`, `Border Height`, `Border Color`.
*   **Composite**: `Composite Image Property` (binary property name of overlay image), `Operator` (e.g., Over, In, Add), `Position X`, `Position Y`.
*   **Create**: `Background Color`, `Image Width`, `Image Height`.
*   **Crop**: `Width`, `Height`, `Position X`, `Position Y`.
*   **Draw**: `Primitive` (Circle, Line, Rectangle), `Color`, `Start Position X/Y`, `End Position X/Y`, `Corner Radius`.
*   **Get Information**: No specific parameters other than `Property Name`.
*   **Multi Step**: `Operations` (a list defining multiple steps, each with its own operation and parameters).
*   **Resize**: `Width`, `Height`, `Option` (Ignore Aspect Ratio, Maximum Area, Minimum Area, Only if Larger, Only if Smaller, Percent).
*   **Rotate**: `Rotate` (degrees), `Background Color`.
*   **Shear**: `Degrees X`, `Degrees Y`.
*   **Text**: `Text`, `Font Size`, `Font Color`, `Position X`, `Position Y`, `Max Line Length`.
*   **Transparent**: `Color` (to make transparent).

### Node Options

*   **Output Property Name**: Name for the output binary property containing the modified image (default: `data`).
*   **Output Format**: Specify the output image format (e.g., PNG, JPEG, WEBP, GIF). If left blank, it tries to keep the original format.

## JSON Structure Example (Conceptual - Resize Image)

```json
{
  "parameters": {
    "operation": "resize",
    "propertyName": "data", // Input binary property name
    "width": 800,
    "height": 600,
    "options": {
        "option": "maximumArea", // Resize option
        "outputPropertyName": "resizedImage", // Output binary property name
        "outputFormat": "jpeg" // Output format
    }
  },
  "name": "Resize Image",
  "type": "n8n-nodes-base.editImage",
  "typeVersion": 1,
  "position": [
    2400,
    1600
  ]
}
```

---

## 64. Elasticsearch.md ---

# n8n Node: Elasticsearch

Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. The Elasticsearch node (`n8n-nodes-base.elasticsearch`) in n8n allows interaction with Elasticsearch clusters for managing documents and indices.

## Functionality

The node provides operations for two main resources: Documents and Indices.

*   **Document:**
    *   **Create:** Adds a new document to a specified index. Requires the index name and the document body.
    *   **Delete:** Removes a document from an index based on its ID.
    *   **Get:** Retrieves a specific document by its ID from an index.
    *   **Get All:** Searches for documents within an index based on a query (using Elasticsearch Query DSL). Supports pagination and sorting.
    *   **Update:** Modifies an existing document in an index based on its ID. Can perform partial updates or replace the entire document.
*   **Index:**
    *   **Create:** Creates a new index in the Elasticsearch cluster. Allows specifying mappings and settings.
    *   **Delete:** Removes an entire index.
    *   **Get:** Retrieves information about a specific index, including mappings and settings.
    *   **Get All:** Lists all indices in the cluster or retrieves information about multiple specified indices.

## Parameters

Common parameters include:

*   **Resource:** Document or Index.
*   **Operation:** The specific action (e.g., Create, Get All, Delete).
*   **Index Name:** The target index for the operation.
*   **Document ID:** The unique identifier for a document (used in Get, Delete, Update).
*   **Body/Query:** JSON object representing the document content (for Create/Update) or the search query (for Get All).
*   **Options:** Additional parameters specific to the operation, such as routing, refresh policy, pagination (`Size`, `From`), sorting, etc.

## Credentials

Authentication depends on the Elasticsearch setup:

*   **None:** For unsecured clusters.
*   **API Key:** Using an Elasticsearch API Key ID and Key value.
*   **Basic Auth:** Using a username and password.
*   **Cloud ID:** For Elastic Cloud deployments, using the Cloud ID and an API Key or Basic Auth.

Requires the **Base URL** of the Elasticsearch cluster (e.g., `http://localhost:9200`).

## AI Tool Capability

This node can be used as an AI tool within n8n's AI Agent, allowing the agent to dynamically interact with Elasticsearch (e.g., search for documents, create entries) based on conversational context or instructions.

## Use Cases

*   Indexing data from various sources into Elasticsearch.
*   Searching and retrieving data from Elasticsearch within a workflow.
*   Automating index management tasks (creation, deletion).
*   Updating documents based on external events.
*   Building search interfaces or data exploration tools.

## Unsupported Operations

For advanced Elasticsearch API features not directly exposed by the node (e.g., bulk operations, complex aggregations, cluster management APIs), the documentation recommends using the generic **HTTP Request** node with the configured Elasticsearch credentials.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.elasticsearch/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.elasticsearch/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/elasticsearch/](https://docs.n8n.io/integrations/builtin/credentials/elasticsearch/)*

---

## 65. EmailReadImap.md ---

# n8n-nodes-base.emailReadImap (Email Trigger IMAP)

## Description

The Email Trigger (IMAP) node is a **trigger node** used to start a workflow when a new email arrives in a specified mailbox on an IMAP server.

## Credentials

Requires IMAP credentials, which typically include:
*   Host (e.g., `imap.gmail.com`)
*   Port (e.g., 993)
*   User (email address)
*   Password (or App Password)
*   SSL/TLS settings

## Operations

*   **Receive an email**: This is the primary function; it listens for and fetches new emails based on the configuration.

## Parameters

*   **Credential to connect with**: Select the appropriate IMAP credential created in n8n.
*   **Mailbox Name**: The name of the mailbox (folder) to monitor (e.g., `INBOX`, `Sent`, `MyFolder`). Defaults to `INBOX`.
*   **Action**: Determines what happens to the email on the server after n8n fetches it.
    *   `None`: Leaves the email state unchanged (e.g., remains unread).
    *   `Mark as Read`: Marks the email as read on the server.
*   **Download Attachments**: (Boolean) If enabled, attachments are downloaded and included in the output as binary data. Disable if attachments aren't needed to improve performance.
*   **Format**: Specifies the format of the output data for the received email.
    *   `RAW`: Returns the full raw email data, with the body as a base64url encoded string in the `raw` field.
    *   `Resolved`: Returns processed email data, including parsed headers, text/HTML body, and attachments as binary data.
    *   `Simple`: Returns processed email data but may not include inline attachments correctly.

### Node Options

*   **Custom Email Rules**: Allows specifying IMAP search criteria to filter which emails trigger the workflow. Uses the [node-imap search criteria format](https://github.com/mscdex/node-imap#connection-instance-methods) (e.g., `["UNSEEN", ["FROM", "user@example.com"]]`).
*   **Force Reconnect Every Minutes**: (Number) Sets an interval in minutes after which the node forces a reconnection to the IMAP server.

## JSON Structure Example (Conceptual)

```json
{
  "parameters": {
    "mailbox": "INBOX",
    "action": "markAsRead",
    "downloadAttachments": true,
    "format": "resolved",
    "options": {
      "customEmailRules": [
        "UNSEEN", // Only trigger for unread emails
        ["SUBJECT", "Order Confirmation"]
      ],
      "forceReconnectEveryMinutes": 30
    }
  },
  "name": "Trigger on New Order Email",
  "type": "n8n-nodes-base.emailReadImap",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    450,
    300
  ],
  "webhookId": "auto-generated-webhook-id-for-trigger", // Trigger nodes have a webhookId
  "credentials": {
    "imap": {
      "id": "YOUR_IMAP_CREDENTIAL_ID",
      "name": "My Email IMAP Credential"
    }
  }
}
```

---

## 66. EmailSend.md ---

# n8n-nodes-base.emailSend (Send Email)

## Description

The Send Email node is a core n8n node used to send emails via an SMTP server. It supports sending plain text, HTML, or both, including attachments. It also features an operation to send an email and wait for a user response via interactive elements.

## Credentials

Requires SMTP credentials, which typically include:
*   Host (e.g., `smtp.gmail.com`)
*   Port (e.g., 465 or 587)
*   User (email address or username)
*   Password (or App Password)
*   SSL/TLS settings
*   Sender/From Email (often required by the provider)

## Operations

*   **Send**: Sends a standard email.
*   **Send and Wait for Response**: Sends an email containing interactive components (Approval buttons, Free Text input, or a Custom Form) and pauses the workflow until the recipient responds or a timeout occurs.

## Parameters (Common)

*   **Credential to connect with**: Select the appropriate SMTP credential created in n8n.
*   **Operation**: Choose `Send` or `Send and Wait for Response`.
*   **From Email**: The sender's email address (can include name: `"Sender Name" <sender@example.com>`).
*   **To Email**: The recipient's email address (can include name, comma-separate multiple addresses).
*   **Subject**: The subject line of the email.

### Parameters (Send Operation)

*   **Email Format**: `Text`, `HTML`, or `Both`.
*   **Text Body**: The plain text content (required if Format is Text or Both).
*   **HTML Body**: The HTML content (required if Format is HTML or Both).

### Parameters (Send and Wait for Response Operation)

*   **Response Type**: `Approval`, `Free Text`, `Custom Form`.
*   **Text Body**: The main text content of the email.
*   **(Varies by Response Type)**: Parameters to define buttons, form fields, labels, titles, etc. (See documentation details).

### Node Options (Common)

*   **Attachments**: Comma-separated list of binary property names containing file data to attach. Use `cid:binaryPropertyName` in HTML body to reference inline images.
*   **CC Email**: CC recipient addresses.
*   **BCC Email**: BCC recipient addresses.
*   **Reply To**: Email address for the Reply-To header.
*   **Ignore SSL Issues**: (Boolean) Whether to ignore SSL certificate validation errors.
*   **Append n8n Attribution**: (Boolean) Whether to add "Sent automatically with n8n" footer.

### Node Options (Send and Wait for Response)

*   **Limit Wait Time**: (Boolean) Enable timeout for waiting.
*   **Timeout Interval/Time**: Duration or specific time for timeout.
*   **(Varies by Response Type)**: Customization for button labels, styles, form titles, descriptions, etc.

## JSON Structure Example (Conceptual - Send HTML Email with Attachment)

```json
{
  "parameters": {
    "fromEmail": "\"Support Team\" <support@example.com>",
    "toEmail": "{{ $json.customerEmail }}",
    "subject": "Your Order {{ $json.orderId }} Confirmation",
    "emailFormat": "html",
    "html": "<h1>Order Confirmed</h1><p>Thanks for your order, {{ $json.customerName }}!</p><p>Details attached.</p>",
    "options": {
      "attachments": "invoicePdf", // Assumes binary property 'invoicePdf' exists
      "replyTo": "orders@example.com"
    }
  },
  "name": "Send Order Confirmation",
  "type": "n8n-nodes-base.emailSend",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2500,
    1700
  ],
  "credentials": {
    "smtp": {
      "id": "YOUR_SMTP_CREDENTIAL_ID",
      "name": "My SMTP Service"
    }
  }
}
```

---

## 67. ErrorTrigger.md ---

# n8n Node: Error Trigger

The Error Trigger node (`n8n-nodes-base.errorTrigger`) is a special trigger node used exclusively to start workflows designated as 'Error Workflows'. An Error Workflow is automatically executed when another workflow, configured to use it, fails during execution.

## Functionality

The primary purpose of the Error Trigger is to catch failures from other workflows and initiate a specific process to handle the error. This allows for centralized error logging, notification, or remediation actions.

*   **Trigger Condition:** Activates only when a linked workflow execution fails.
*   **Data Input:** Receives data about the failed execution, including details about the workflow, the specific error, and the execution context.

## Setting up an Error Workflow

1.  **Create the Error Workflow:** Start a new workflow with the Error Trigger node as the very first node.
2.  **Add Handling Logic:** Add subsequent nodes to process the error data (e.g., send a Slack/email notification, log the error to a database, attempt a specific recovery action).
3.  **Save the Error Workflow:** Give it a descriptive name (e.g., "Global Error Handler").
4.  **Link from Main Workflow:** In the settings of the workflow you want to monitor (**Options** > **Settings**), select the created Error Workflow from the **Error workflow** dropdown.

## Input Data Structure

The data received by the Error Trigger depends on where the error occurred in the main workflow:

*   **Error in a Regular Node (after Trigger):**
    ```json
    [
      {
        "execution": {
          "id": "<execution_id>", // ID of the failed execution
          "url": "<execution_url>", // URL to view the failed execution in n8n
          "retryOf": "<original_execution_id>", // Present if it was a retry
          "error": {
            "message": "<Error Message>", // The error message
            "stack": "<Stacktrace>" // The error stack trace
          },
          "lastNodeExecuted": "<Node Name>", // Name of the node that failed
          "mode": "<manual/webhook/trigger>" // Execution mode
        },
        "workflow": {
          "id": "<workflow_id>", // ID of the failed workflow
          "name": "<Workflow Name>" // Name of the failed workflow
        }
      }
    ]
    ```
*   **Error in the Trigger Node:** The structure is different, containing less execution data and more trigger-specific error details under a `trigger` key.

## Parameters

The Error Trigger node itself has no configurable parameters.

## Credentials

This node does not require credentials.

## Use Cases

*   Sending notifications (Slack, email, Discord) when a workflow fails.
*   Logging detailed error information to external systems (databases, monitoring tools).
*   Attempting automated recovery actions.
*   Creating tickets in issue tracking systems (Jira, Zendesk) upon failure.

*Reference: [https://docs.n8n.io/flow-logic/error-handling/](https://docs.n8n.io/flow-logic/error-handling/)*

---

## 68. EventbriteTrigger.md ---

# n8n-nodes-base.eventbriteTrigger

## Description

The Eventbrite Trigger node is a **trigger node** used to start a workflow when specific events occur in your Eventbrite account. Eventbrite is an online platform for event management and ticketing.

## Credentials

Requires Eventbrite OAuth2 credentials. You need to connect your Eventbrite account to n8n to authorize access.

## Operations / Events

This node listens for events pushed from Eventbrite via webhooks. Common events likely include (based on Eventbrite API, though not explicitly listed on the sparse n8n doc page):

*   `attendee.updated`
*   `attendee.checked_in`
*   `attendee.checked_out`
*   `event.created`
*   `event.published`
*   `event.updated`
*   `order.placed`
*   `order.refunded`
*   `order.updated`
*   `ticket_class.created`
*   `ticket_class.updated`

## Parameters

*   **Credentials**: Select the appropriate Eventbrite OAuth2 credential.
*   **Organization**: (Likely parameter) Select the Eventbrite organization to monitor.
*   **Events**: Select the specific Eventbrite event(s) that should trigger the workflow (e.g., `order.placed`, `event.published`).

## Output Data

The output data structure depends heavily on the specific event that triggered the workflow. It will typically contain details about the event, the associated object (order, attendee, event), and related information.

## JSON Structure Example (Conceptual - Trigger on New Order)

```json
{
  "parameters": {
    "events": [
      "order.placed" // Specific event to listen for
    ],
    "organizationId": "YOUR_ORGANIZATION_ID" // Likely needed, might be selected via UI
  },
  "name": "Eventbrite New Order Trigger",
  "type": "n8n-nodes-base.eventbriteTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    450,
    300
  ],
  "webhookId": "auto-generated-webhook-id-for-trigger", // Trigger nodes have a webhookId
  "credentials": {
    "eventbriteOAuth2Api": {
      "id": "YOUR_EVENTBRITE_CREDENTIAL_ID",
      "name": "My Eventbrite Account"
    }
  }
}
```

---

## 69. ExecuteCommand.md ---

# n8n-nodes-base.executeCommand

## Description

The Execute Command node allows running arbitrary shell commands on the machine where the n8n instance is hosted. 

**Important Security Note:** This node provides direct access to the host system's shell. Use it with extreme caution, especially in multi-user environments or when processing external data, as it can pose significant security risks if not properly managed. It is **not available on n8n Cloud** due to these security implications.

If running n8n via Docker, the command executes *inside* the n8n container, not on the Docker host machine itself.

## Credentials

This node does not require credentials.

## Parameters

*   **Execute Once**: (Boolean) 
    *   `true`: The command is executed only once, regardless of how many input items the node receives. The command runs using the data from the *first* input item.
    *   `false`: The command is executed once for *each* input item received by the node. You can use expressions in the `Command` parameter to reference data from the current item (e.g., `{{ $json.filename }}`).
*   **Command**: (String) The shell command to execute. 
    *   You can write multi-line commands.
    *   You can chain commands using `&&` on a single line.
    *   You can use n8n expressions `{{ }}` to insert data from input items into the command string (especially when `Execute Once` is false).

## Output Data

The node outputs items containing the results of the command execution:

*   `stdout`: (String) The standard output generated by the command.
*   `stderr`: (String) The standard error output generated by the command.
*   `exitCode`: (Number) The exit code returned by the command (0 typically indicates success).

## JSON Structure Example (Conceptual - List files in a directory from input)

```json
{
  "parameters": {
    "executeOnce": false, // Run for each input item
    "command": "ls -la {{ $json.directoryPath }}" // Use input data in command
  },
  "name": "List Directory Contents",
  "type": "n8n-nodes-base.executeCommand",
  "typeVersion": 1,
  "position": [
    2600,
    1800
  ]
}
```

---

## 70. ExecuteWorkflow.md ---

# n8n-nodes-base.executeWorkflow (Execute Sub-workflow)

## Description

The Execute Sub-workflow node (often referred to as Execute Workflow) allows a parent workflow to call and run another n8n workflow (the sub-workflow) as part of its execution. This enables modular workflow design, reusability, and separation of concerns.

Data is passed from the parent workflow to the sub-workflow via its trigger node (Execute Sub-workflow Trigger), and the results from the sub-workflow's final node are returned to the Execute Sub-workflow node in the parent.

## Credentials

This node does not require specific credentials itself, but the sub-workflow it calls might require credentials for its own nodes.

## Parameters

*   **Source**: Defines how to locate the sub-workflow to execute.
    *   `Database`: Load the sub-workflow from the n8n database.
        *   **From list**: Select the sub-workflow by name from a dropdown list of available workflows.
        *   **Workflow ID**: Specify the exact ID of the sub-workflow (found in the sub-workflow's URL).
    *   `Local File`: Load the sub-workflow from a JSON file stored locally on the n8n host machine.
        *   **Workflow Path**: The absolute path to the `.json` workflow file.
    *   `Parameter`: Load the sub-workflow definition directly from a JSON string provided as input.
        *   **Workflow JSON**: An expression or fixed string containing the complete JSON definition of the sub-workflow.
    *   `URL`: Load the sub-workflow definition from a URL that returns the workflow JSON.
        *   **Workflow URL**: The URL to fetch the workflow JSON from.
*   **Workflow Inputs**: (Appears when Source is `Database` + `From list` and the sub-workflow trigger defines inputs) Allows mapping data from the parent workflow to the specific input fields defined in the sub-workflow's trigger node.
    *   **Attempt to convert types**: (Boolean) If enabled, tries to convert the provided data types to match the types expected by the sub-workflow trigger.
*   **Mode**: Controls how the sub-workflow is executed relative to the input items received by this node.
    *   `Run once with all items`: The sub-workflow is executed a single time, receiving all input items from the parent node as a list.
    *   `Run once for each item`: The sub-workflow is executed separately for each input item received from the parent node.

### Node Options

*   **Wait for Sub-Workflow Completion**: (Boolean)
    *   `true` (Default): The parent workflow pauses and waits for the sub-workflow to finish executing before proceeding to the next node. The output of the sub-workflow becomes the input for the next node in the parent.
    *   `false`: The parent workflow triggers the sub-workflow but continues executing its next nodes immediately without waiting for the sub-workflow to complete. The Execute Sub-workflow node will output immediately (often with limited data, potentially just confirming the call was made).

## Sub-Workflow Setup

A sub-workflow must start with the **Execute Sub-workflow Trigger** node (also named "When Executed by Another Workflow"). This trigger node defines how the sub-workflow accepts input data (`Define using fields below`, `Define using JSON example`, `Accept all data`).

## JSON Structure Example (Conceptual - Calling by ID, waiting)

```json
{
  "parameters": {
    "source": "database",
    "workflowId": "SUB_WORKFLOW_ID_HERE", // ID of the sub-workflow
    "mode": "runOnceForEachItem", // Execute for each item
    "workflowInputs": {
      "values": {
        "string": [
          {
            "name": "customerId", // Input field defined in sub-workflow trigger
            "value": "={{ $json.id }}" // Map data from parent item
          }
        ],
        "number": [
          {
            "name": "orderValue", // Input field defined in sub-workflow trigger
            "value": "={{ $json.totalAmount }}" // Map data from parent item
          }
        ]
      },
      "options": {
        "attemptToConvertTypes": true
      }
    },
    "options": {
      "waitForCompletion": true // Wait for sub-workflow to finish
    }
  },
  "name": "Process Customer Order (Sub)",
  "type": "n8n-nodes-base.executeWorkflow",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2700,
    1900
  ]
}
```

---

## 71. ExecuteWorkflowTrigger.md ---

# n8n-nodes-base.executeWorkflowTrigger (Execute Sub-workflow Trigger)

## Description

The Execute Sub-workflow Trigger node (also displayed as "When Executed by Another Workflow") is a **trigger node** specifically designed to start a workflow (a "sub-workflow") when it is called by an `n8n-nodes-base.executeWorkflow` (Execute Sub-workflow) node or an AI Agent's `Call n8n Workflow Tool` from another workflow (the "parent workflow").

It acts as the entry point for the sub-workflow, receiving data passed from the parent workflow.

## Credentials

This node does not require credentials.

## Parameters

*   **Input data mode**: Determines how the trigger defines and validates the data it expects from the calling workflow.
    *   `Define using fields below`: Allows you to explicitly define each expected input field, including its name, data type (String, Number, Boolean, JSON, Date, Binary), and whether it's required. When the parent workflow uses the `Execute Sub-workflow` node and selects this sub-workflow from the database list, these defined fields will automatically appear for mapping.
    *   `Define using JSON example`: Allows you to provide a sample JSON object representing the expected input structure. n8n infers the field names and attempts to infer data types from this example.
    *   `Accept all data`: The trigger accepts any data passed by the calling workflow without any predefined structure or validation. The sub-workflow logic must handle potential variations or missing data.
*   **Inputs**: (Visible only when `Input data mode` is `Define using fields below`) A list where you define the expected input fields.
    *   **Name**: The name of the input field (e.g., `userId`, `productSku`).
    *   **Type**: The expected data type (String, Number, Boolean, JSON, Date, Binary).
    *   **Required**: (Boolean) Whether the calling workflow *must* provide this input.
*   **JSON Input**: (Visible only when `Input data mode` is `Define using JSON example`) A text area to paste the example JSON input.

## Output Data

The Execute Sub-workflow Trigger node outputs the data it receives from the calling `Execute Sub-workflow` node. This data then flows through the rest of the sub-workflow.

The data returned *from* the sub-workflow to the parent workflow comes from the *last* node executed within the sub-workflow.

## JSON Structure Example (Conceptual - Defining Fields)

```json
{
  "parameters": {
    "inputDataMode": "defineFields", // Mode set to define fields
    "inputs": {
      "string": [
        {
          "name": "userName",
          "required": true
        }
      ],
      "number": [
        {
          "name": "orderId",
          "required": true
        }
      ],
      "boolean": [
        {
          "name": "sendNotification"
        }
      ]
    }
  },
  "name": "Trigger for Order Processing Sub-Workflow",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    450,
    300
  ],
  "webhookId": "auto-generated-webhook-id-for-trigger" // Trigger nodes have a webhookId
}
```

---

## 72. FacebookGraphApi.md ---

# n8n Node: Facebook Graph API

The Facebook Graph API node (`n8n-nodes-base.facebookgraphapi`) provides a flexible interface to interact with Facebook's Graph API. This allows for automating various tasks related to Facebook Pages, user data, ads, and more, depending on the permissions granted to the connected Facebook App.

## Functionality

This node acts as a generic HTTP client specifically configured for the Facebook Graph API. It supports standard HTTP methods (GET, POST, DELETE) and handles authentication using Facebook credentials.

## Operations

The node primarily offers two sets of operations based on the target host URL:

*   **Default (`graph.facebook.com`):** Used for most Graph API interactions.
    *   **GET:** Retrieve data from the Graph API (e.g., fetch posts, user info, ad campaign details).
    *   **POST:** Create or update data via the Graph API (e.g., publish posts, create ad sets, update page settings).
    *   **DELETE:** Remove objects via the Graph API (e.g., delete posts, remove permissions).
*   **Video Uploads (`graph-video.facebook.com`):** Specifically for uploading videos.
    *   **GET:** Retrieve video upload status or details.
    *   **POST:** Initiate or continue a video upload session.
    *   **DELETE:** Cancel a video upload.

## Parameters

*   **Credentials:** Requires Facebook Graph API credentials (App ID, App Secret, Access Token).
*   **Host URL:** Select 'Default' for most operations or 'Video' for video uploads.
*   **HTTP Request Method:** Choose GET, POST, or DELETE.
*   **Graph API Version:** Specify the desired API version (e.g., `v19.0`).
*   **Node:** The specific Graph API object ID or path (e.g., `/<page-id>/feed`, `/<ad_account_id>/campaigns`, `me`).
*   **Edge (Optional):** The connection or collection related to the node (e.g., `posts`, `comments`, `insights`).
*   **Fields (Optional, for GET):** Comma-separated list of fields to retrieve for the specified node/edge.
*   **Parameters (Optional):** Add query string parameters as key-value pairs (e.g., `limit=10`, `since=yesterday`).
*   **Body Parameters (Optional, for POST/DELETE):** Add parameters to the request body as key-value pairs.
*   **JSON Parameters (Optional, for POST/DELETE):** Send a raw JSON body.
*   **Ignore SSL Issues:** Option to bypass SSL certificate validation.
*   **Send Binary File (Optional, for POST):** Upload a file.
    *   **Input Binary Field:** Name of the binary property in the input data containing the file.

## AI Tool Capability

This node can be used as an AI tool, allowing an AI agent to interact with the Facebook Graph API dynamically.

## Use Cases

*   Fetching posts, comments, or reactions from a Facebook Page.
*   Publishing posts, photos, or videos to a Facebook Page.
*   Managing Facebook Ad campaigns, ad sets, and ads (creating, updating, fetching performance).
*   Retrieving user profile information (with appropriate permissions).
*   Uploading videos.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.facebookgraphapi/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.facebookgraphapi/)*
*Credentials Reference: [https://docs.n8n.io/integrations/builtin/credentials/facebookgraphapi/](https://docs.n8n.io/integrations/builtin/credentials/facebookgraphapi/)*
*Facebook Graph API Documentation: [https://developers.facebook.com/docs/graph-api/](https://developers.facebook.com/docs/graph-api/)*

---

## 73. FacebookTrigger.md ---

# n8n-nodes-base.facebookTrigger

## Description

The Facebook Trigger node is a **trigger node** used to start a workflow based on real-time updates (via webhooks) from various Facebook Graph API objects. It allows workflows to react to events like new page posts, comments, user profile changes, Instagram mentions, etc.

## Credentials

Requires Facebook OAuth2 credentials. You need to:
1.  Create a Facebook App.
2.  Configure the necessary permissions (scopes) for the events you want to subscribe to.
3.  Add the `webhooks` product to your Facebook App.
4.  Configure the webhook subscription within the Facebook App settings, providing the webhook URL generated by the n8n Facebook Trigger node.
5.  Verify the webhook subscription using the Verify Token provided by the n8n node.

## Objects & Events (Fields)

The node allows subscribing to events related to different Facebook objects. You first select the object and then the specific fields (events) for that object.

*   **Object**: The type of Facebook entity to monitor.
    *   `Ad Account`: Ad-related changes.
    *   `Application`: App-related updates.
    *   `Certificate Transparency`: Security certificate updates for domains.
    *   `Group`: Activity within a Facebook Group.
    *   `Instagram`: Comments, @mentions, story expiry for connected Instagram Professional accounts.
    *   `Link`: Link preview updates.
    *   `Page`: Updates related to a Facebook Page (e.g., `feed`, `messages`, `ratings`, `comments`).
    *   `Permissions`: Changes in granted permissions.
    *   `User`: Updates to a user's profile (requires specific permissions).
    *   `WhatsApp Business Account`: Updates related to a WABA.
    *   `Workplace Security`: Events related to Workplace security.
*   **Field Names or IDs**: Specific events/data fields within the selected Object to subscribe to (e.g., for `Page` object, you might select `feed`, `messages`). The available fields depend on the chosen Object.

## Parameters

*   **Credentials**: Select the appropriate Facebook OAuth2 credential.
*   **Object**: Select the Facebook object type to monitor from the dropdown list.
*   **Field Names or IDs**: Select the specific event fields for the chosen object to subscribe to.

## Output Data

The output data structure varies significantly based on the Object and Field(s) that triggered the workflow. It generally follows the structure defined by Facebook's Webhooks API for the specific event.

## JSON Structure Example (Conceptual - Trigger on New Page Feed Post)

```json
{
  "parameters": {
    "object": "page", // Object type to monitor
    "fields": [
      "feed" // Specific field/event to subscribe to
    ]
  },
  "name": "Facebook New Page Post Trigger",
  "type": "n8n-nodes-base.facebookTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    450,
    300
  ],
  "webhookId": "auto-generated-webhook-id-for-trigger", // Trigger nodes have a webhookId
  "credentials": {
    "facebookOAuth2Api": {
      "id": "YOUR_FACEBOOK_CREDENTIAL_ID",
      "name": "My Facebook App Credential"
    }
  }
}
```

---

## 74. FileMaker.md ---

# n8n-nodes-base.fileMaker

## Description

The FileMaker node allows interaction with Claris FileMaker databases via the FileMaker Data API. It enables creating, reading, updating, deleting records, and executing scripts within a FileMaker solution.

## Credentials

Requires FileMaker credentials. This involves:
*   **Host**: The domain or IP address of the FileMaker Server (e.g., `fm.example.com`).
*   **Database**: The name of the FileMaker database file (without the `.fmp12` extension).
*   **Username**: A FileMaker account username with the necessary privileges (e.g., `fmrest` extended privilege for Data API access).
*   **Password**: The password for the FileMaker account.

Ensure the Data API is enabled on the FileMaker Server and the specified database.

## Operations

The node supports the following operations:

*   **Find Records**: Search for records in a specified layout based on query criteria.
*   **Get Records**: Retrieve all records from a specified layout (potentially with limits/offsets).
*   **Get Records by Id**: Retrieve a specific record by its internal FileMaker Record ID.
*   **Perform Script**: Execute a specified FileMaker script, optionally passing a parameter.
*   **Create Record**: Create a new record in a specified layout with provided field data.
*   **Edit Record**: Update an existing record (identified by Record ID) in a specified layout with new field data.
*   **Duplicate Record**: Create a duplicate of an existing record (identified by Record ID).
*   **Delete Record**: Delete an existing record (identified by Record ID).

## Common Parameters (Vary by Operation)

*   **Layout**: The name of the FileMaker layout to interact with. Operations are context-dependent on the layout specified.
*   **Record ID**: The internal ID of the record for operations like Get, Edit, Duplicate, Delete.
*   **Fields / Field Data**: Key-value pairs representing the FileMaker fields and their values for Create and Edit operations.
*   **Query**: (For Find Records) Criteria used to search for records. Often involves a JSON structure specifying field names, values, and operators.
*   **Limit / Offset / Sort**: (For Get/Find Records) Parameters to control pagination and ordering of results.
*   **Script Name**: (For Perform Script) The name of the FileMaker script to execute.
*   **Script Parameter**: (For Perform Script) An optional value to pass to the FileMaker script.

## Output Data

Output varies by operation:
*   **Get/Find**: Returns an array of objects, each representing a FileMaker record with its `fieldData` and `recordId`.
*   **Create**: Returns the `recordId` of the newly created record.
*   **Edit/Duplicate**: Often returns the `modId` (modification ID) or confirms success.
*   **Delete**: Confirms success, usually with no specific data returned.
*   **Perform Script**: May return a `scriptResult` if the FileMaker script uses the `Exit Script` step with a result.

## JSON Structure Example (Conceptual - Create Record)

```json
{
  "parameters": {
    "operation": "create",
    "layout": "Contacts", // Target layout name
    "fields": {
      "fieldData": {
        "FirstName": "={{ $json.firstName }}", // Map input data to FileMaker field
        "LastName": "={{ $json.lastName }}",
        "Email": "={{ $json.email }}"
      }
    }
  },
  "name": "Create FileMaker Contact",
  "type": "n8n-nodes-base.fileMaker",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2800,
    2000
  ],
  "credentials": {
    "fileMakerApi": {
      "id": "YOUR_FILEMAKER_CREDENTIAL_ID",
      "name": "My FileMaker Server"
    }
  }
}
```

---

## 75. Flow.md ---

# n8n-nodes-base.flow

## Description

The Flow node interacts with Flow (likely referring to Flow, the task and project management software by MetaLab). It allows automating tasks within Flow, such as creating, updating, and retrieving tasks.

## Credentials

Requires Flow credentials (likely an API Key or OAuth2). The documentation refers to a separate "Flow credentials" page for setup guidance, which should be consulted for specific authentication details.

## Operations

The node focuses on the `Task` resource and supports the following operations:

*   **Create**: Create a new task in Flow.
*   **Update**: Modify an existing task in Flow.
*   **Get**: Retrieve details of a specific task by its ID.
*   **Get All**: Retrieve a list of tasks, potentially with filters or pagination options (though not explicitly detailed in the summary).

## Common Parameters (Vary by Operation)

*   **Task ID**: (For Get, Update) The unique identifier of the Flow task.
*   **List ID / Project ID**: (Likely required for Create, Get All) The identifier for the list or project where the task resides or should be created.
*   **Task Name / Title**: (For Create, Update) The name or title of the task.
*   **Notes / Description**: (For Create, Update) Details or description for the task.
*   **Due Date**: (For Create, Update) The deadline for the task.
*   **Assignee**: (For Create, Update) The user assigned to the task.
*   **Status / Section**: (For Create, Update) The status or section the task belongs to.
*   **(Other task-specific fields)**: Depending on Flow's data model, other fields like priority, tags, etc., might be available.

## Output Data

*   **Get/Get All**: Returns an array of objects, each representing a Flow task with its details (ID, name, due date, assignee, etc.).
*   **Create**: Returns the details of the newly created Flow task, including its ID.
*   **Update**: Returns the details of the updated Flow task.

## JSON Structure Example (Conceptual - Create Task)

```json
{
  "parameters": {
    "resource": "task", // Resource type
    "operation": "create", // Operation
    "listId": "={{ $json.flowListId }}", // Target list ID from input
    "name": "={{ $json.taskTitle }}", // Task title from input
    "notes": "={{ $json.taskDescription }}", // Task description from input
    "dueDate": "={{ $json.deadline }}" // Task due date from input
    // Add other necessary fields based on Flow API
  },
  "name": "Create Flow Task",
  "type": "n8n-nodes-base.flow",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    2900,
    2100
  ],
  "credentials": {
    "flowApi": { // Credential type might vary (e.g., flowOAuth2Api)
      "id": "YOUR_FLOW_CREDENTIAL_ID",
      "name": "My Flow Account"
    }
  }
}
```

---

## 76. FormTrigger.md ---

# n8n-nodes-base.formTrigger (n8n Form Trigger)

## Description

The n8n Form Trigger node is a **trigger node** that starts a workflow when a user submits an HTML form generated and hosted by n8n itself. It allows creating simple web forms directly within n8n without external services. The submitted form data becomes the output of this trigger node.

This node works in conjunction with the `n8n-nodes-base.form` (n8n Form) node, which allows creating multi-page forms.

## Credentials

*   **None**: The form is publicly accessible via its generated URL.
*   **Basic Auth**: Protects the form with a simple username and password.

## Parameters

*   **Authentication**: Select `None` or `Basic Auth`. If `Basic Auth`, provide Username and Password credentials.
*   **Form Path**: (Optional) A custom path (slug) for the form URL (e.g., `my-survey`). If left blank, n8n generates a unique ID.
*   **Form Title**: The main title displayed on the form page (HTML `<title>` and `<h1>`).
*   **Form Description**: Text displayed below the title on the form page. Supports `\n` or `<br>` for line breaks.
*   **Form Elements**: Define the fields of the form.
    *   **Add Form Element**: Adds a new field.
    *   **Field Label**: The text label displayed above the input field.
    *   **Element Type**: The type of input field:
        *   `Custom HTML`: Insert arbitrary HTML content (links, images, text). Cannot include `<script>`, `<style>`, or `<input>`. Add an **Element Name** to include its content in the output.
        *   `Date`: A date picker.
        *   `Dropdown List`: A select dropdown. Use **Add Field Option** to define choices. Turn on **Multiple Choice** to allow selecting multiple options.
        *   `Email`: An email input field.
        *   `File`: A file upload field.
        *   `Hidden Field`: An input field not visible on the form. Can be pre-filled via **Field Value** or URL query parameters.
        *   `Number`: A number input field.
        *   `Password`: A password input field (masks input).
        *   `Text`: A single-line text input field.
        *   `Textarea`: A multi-line text input field.
    *   **Element Name**: The internal name for the field, used as the key in the output JSON (e.g., `customerEmail`, `feedbackText`). **Crucial for referencing the data later.**
    *   **Field Value**: (Optional) A default value for the field. For `Dropdown List`, this should match the `Value` of one of the options.
    *   **Required Field**: (Boolean) If enabled, the user must fill out this field to submit the form.
    *   **(Dropdown Specific)** **Options**: Define the choices for a dropdown list.
        *   **Name**: The text displayed to the user for the option.
        *   **Value**: The actual value submitted when this option is selected.
*   **Respond When**: Determines when the HTTP response is sent back to the user submitting the form.
    *   `Form Is Submitted`: Respond immediately after submission (default).
    *   `Workflow Finishes`: Wait for the entire workflow to complete before sending the response. Useful if the response depends on workflow results.

### Node Options (Additional)

*   **Append n8n Attribution**: (Boolean) Show/hide the "Form automated with n8n" footer.
*   **Form Response**: Configure the message or redirection after submission.
    *   **Respond With**: `Form Submitted Text` (show message) or `Redirect URL` (redirect user).
    *   **Message / Redirect URL**: The text message or the URL to redirect to.
*   **Ignore Bots**: (Boolean) Attempt to ignore requests from common bots/crawlers.
*   **Use Workflow Timezone**: (Boolean) Use the workflow's timezone for the `submittedAt` timestamp instead of UTC.

## Output Data

The node outputs an object containing the submitted form data. The keys of the object correspond to the **Element Name** defined for each form element. It also includes metadata like `submittedAt`.

```json
// Example Output
{
  "customerName": "Jane Doe",
  "customerEmail": "jane.doe@example.com",
  "feedbackType": "suggestion",
  "feedbackText": "It would be great to have feature X.",
  "submittedAt": "2025-05-04T01:14:00.000Z"
}
```

## JSON Structure Example (Conceptual)

```json
{
  "parameters": {
    "path": "customer-feedback",
    "formTitle": "Customer Feedback Form",
    "formDescription": "Please share your thoughts with us.",
    "formElements": {
      "values": [
        {
          "label": "Your Name",
          "elementType": "text",
          "name": "customerName",
          "required": true
        },
        {
          "label": "Your Email",
          "elementType": "email",
          "name": "customerEmail",
          "required": true
        },
        {
          "label": "Feedback Type",
          "elementType": "dropdown",
          "name": "feedbackType",
          "required": true,
          "options": {
            "options": [
              {
                "name": "Bug Report",
                "value": "bug"
              },
              {
                "name": "Feature Suggestion",
                "value": "suggestion"
              },
              {
                "name": "General Comment",
                "value": "comment"
              }
            ]
          }
        },
        {
          "label": "Your Feedback",
          "elementType": "textarea",
          "name": "feedbackText",
          "required": true
        }
      ]
    },
    "options": {
      "responseMode": "text",
      "responseText": "Thank you for your feedback!"
    }
  },
  "name": "Feedback Form Trigger",
  "type": "n8n-nodes-base.formTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    450,
    300
  ],
  "webhookId": "auto-generated-webhook-id-for-trigger" // Trigger nodes have a webhookId
}
```

---

## 77. Freshdesk.md ---

# n8n-nodes-base.freshdesk

## Description

The Freshdesk node interacts with the Freshdesk customer support platform API. It allows managing core resources like Contacts and Tickets within your Freshdesk instance.

## Credentials

Requires Freshdesk credentials:
*   **Domain**: Your Freshdesk domain (e.g., `yourcompany.freshdesk.com`).
*   **API Key**: Your Freshdesk API key, found in your profile settings within Freshdesk.

## Resources and Operations

The node is organized by resource type, with specific operations available for each:

*   **Contact**
    *   `Create`: Create a new contact.
    *   `Delete`: Delete an existing contact by ID.
    *   `Get`: Retrieve a specific contact by ID.
    *   `Get All`: Retrieve multiple contacts, often with options for filtering, pagination (limit/page), and sorting.
    *   `Update`: Modify an existing contact by ID.
*   **Ticket**
    *   `Create`: Create a new support ticket.
    *   `Delete`: Delete an existing ticket by ID.
    *   `Get`: Retrieve a specific ticket by ID.
    *   `Get All`: Retrieve multiple tickets, often with options for filtering (by status, requester, etc.), pagination, and sorting.
    *   `Update`: Modify an existing ticket by ID (e.g., change status, add notes, assign agent).

## Common Parameters (Vary by Resource & Operation)

*   **Contact ID / Ticket ID**: The unique identifier for the contact or ticket being retrieved, updated, or deleted.
*   **Name / Email / Phone**: (For Contact Create/Update) Fields for contact details.
*   **Subject / Description / Requester / Status / Priority**: (For Ticket Create/Update) Fields for ticket details.
*   **Filters**: (For Get All operations) Criteria to narrow down the list of contacts or tickets (e.g., filter tickets by `status:open`).
*   **Pagination (Limit / Page)**: (For Get All operations) Control how many results are returned per request.
*   **Additional Fields**: Allows setting standard or custom fields for contacts or tickets during Create/Update operations.

## Output Data

*   **Get/Get All**: Returns an array of objects, each representing a Freshdesk contact or ticket with its associated fields.
*   **Create**: Returns the details of the newly created contact or ticket, including its ID.
*   **Update**: Returns the details of the updated contact or ticket.
*   **Delete**: Usually returns a success confirmation, potentially with the ID of the deleted item.

## JSON Structure Example (Conceptual - Create Ticket)

```json
{
  "parameters": {
    "resource": "ticket",
    "operation": "create",
    "email": "={{ $json.customerEmail }}", // Requester's email from input
    "subject": "={{ $json.issueSubject }}", // Ticket subject from input
    "description": "={{ $json.issueDetails }}", // Ticket description from input
    "status": 2, // Status code (e.g., 2 for Open)
    "priority": 1, // Priority code (e.g., 1 for Low)
    "additionalFields": {
      "tags": [
        "n8n-created",
        "api"
      ]
      // Add other standard or custom fields here
    }
  },
  "name": "Create Freshdesk Ticket",
  "type": "n8n-nodes-base.freshdesk",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3000,
    2200
  ],
  "credentials": {
    "freshdeskApi": {
      "id": "YOUR_FRESHDESK_CREDENTIAL_ID",
      "name": "My Freshdesk Account"
    }
  }
}
```

---

## 78. Freshservice.md ---

# n8n-nodes-base.freshservice

## Description

The Freshservice node interacts with the Freshservice IT Service Management (ITSM) platform API. It provides extensive capabilities to manage various resources within Freshservice, including agents, assets, changes, tickets, requesters, and more.

## Credentials

Requires Freshservice credentials:
*   **Domain**: Your Freshservice domain (e.g., `yourcompany.freshservice.com`).
*   **API Key**: Your Freshservice API key, found in your profile settings within Freshservice.

## Resources and Operations

The node supports a wide array of resources and CRUD (Create, Retrieve, Update, Delete) operations, plus 'Get All' for listing multiple items:

*   **Agent**: Manage support agents.
*   **Agent Group**: Manage groups of agents.
*   **Agent Role**: Retrieve agent roles.
*   **Announcement**: Manage service announcements.
*   **Asset Type**: Manage types of assets (e.g., Laptop, Monitor).
*   **Change**: Manage change requests.
*   **Department**: Manage organizational departments.
*   **Location**: Manage physical locations.
*   **Problem**: Manage problem records (linked to incidents).
*   **Product**: Manage items in the product catalog.
*   **Release**: Manage release records.
*   **Requester**: Manage end-users/customers who submit requests.
*   **Requester Group**: Manage groups of requesters.
*   **Software**: Manage software assets.
*   **Ticket**: Manage service desk tickets (incidents, service requests).

Each resource typically supports `Create`, `Delete`, `Retrieve` (Get by ID), `Retrieve All` (Get All), and `Update` operations where applicable via the Freshservice API.

## Common Parameters (Vary Significantly by Resource & Operation)

*   **Resource**: The type of Freshservice entity to interact with (e.g., `ticket`, `agent`, `assetType`).
*   **Operation**: The action to perform on the resource (e.g., `create`, `get`, `getAll`, `update`, `delete`).
*   **ID Fields**: Specific identifiers like `Agent ID`, `Ticket ID`, `Department ID`, etc., required for Get, Update, Delete operations.
*   **Data Fields**: Various fields specific to the resource being created or updated (e.g., for Ticket Create: `email`, `subject`, `description`, `status`, `priority`, `requesterId`; for Agent Create: `email`, `firstName`, `lastName`, `workPhoneNumber`).
*   **Filters**: (For Get All operations) Criteria to filter the list of results (e.g., filter tickets by `status`, `priority`, `agentId`).
*   **Pagination (Limit / Page)**: (For Get All operations) Control the number of results per request and the page number.
*   **Additional Fields**: Allows setting standard or custom fields during Create/Update operations.

## Output Data

*   **Retrieve/Retrieve All**: Returns an array of objects, each representing a Freshservice resource with its details.
*   **Create**: Returns the details of the newly created resource, including its ID.
*   **Update**: Returns the details of the updated resource.
*   **Delete**: Usually returns a success confirmation, sometimes with the ID of the deleted item.

## JSON Structure Example (Conceptual - Create Ticket)

```json
{
  "parameters": {
    "resource": "ticket",
    "operation": "create",
    "email": "={{ $json.userEmail }}", // Requester's email
    "subject": "={{ $json.ticketSubject }}",
    "description": "={{ $json.ticketBody }}",
    "status": 2, // Status code (e.g., 2 for Open)
    "priority": 1, // Priority code (e.g., 1 for Low)
    "source": 2, // Source code (e.g., 2 for Portal)
    "additionalFields": {
      "tags": [
        "n8n-automation"
      ],
      "custom_fields": {
        "category": "Hardware Issue" // Example custom field
      }
    }
  },
  "name": "Create Freshservice Ticket",
  "type": "n8n-nodes-base.freshservice",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3100,
    2300
  ],
  "credentials": {
    "freshserviceApi": {
      "id": "YOUR_FRESHSERVICE_CREDENTIAL_ID",
      "name": "My Freshservice Instance"
    }
  }
}
```

---

## 79. Ftp.md ---

# n8n-nodes-base.ftp

## Description

The FTP node allows interaction with FTP (File Transfer Protocol) and SFTP (SSH File Transfer Protocol) servers. It enables operations like uploading, downloading, listing, deleting, and renaming files and directories on a remote server.

## Credentials

Requires FTP or SFTP credentials:
*   **FTP Credentials**:
    *   `Host`: The server address (e.g., `ftp.example.com`).
    *   `Port`: The server port (default: 21 for FTP, 22 for SFTP).
    *   `User`: The username for authentication.
    *   `Password`: The password for the user.
    *   `Secure`: (Boolean) Use FTPS (FTP over SSL/TLS).
    *   `Secure Options`: Additional TLS options (e.g., ignore certificate errors).
*   **SFTP Credentials**:
    *   `Host`: The server address.
    *   `Port`: The server port (default: 22).
    *   `User`: The username.
    *   `Authentication`: `Password` or `Private Key`.
    *   `Password / Private Key`: The corresponding credential.
    *   `Passphrase`: (Optional) Passphrase for the private key.

## Operations

*   **Delete**: Remove a file or folder from the server.
    *   `Path`: The path to the file or folder to delete.
    *   Options:
        *   `Folder`: (Boolean) Must be enabled to delete a folder.
        *   `Recursive`: (Boolean) If deleting a folder, delete its contents recursively.
*   **Download**: Download a file from the server.
    *   `Path`: The path to the file to download.
    *   `Put Output File in Field`: The name of the n8n binary property where the downloaded file content will be stored (e.g., `data`).
*   **List**: List the contents (files and directories) of a specified path.
    *   `Path`: The path to the directory to list.
    *   `Recursive`: (Boolean) List contents of subdirectories recursively.
*   **Rename**: Rename or move a file or folder on the server.
    *   `Old Path`: The current path of the file/folder.
    *   `New Path`: The desired new path for the file/folder.
    *   Options:
        *   `Create Directories`: (Boolean) Create parent directories for the `New Path` if they don't exist.
*   **Upload**: Upload a file to the server.
    *   `Path`: The destination path on the server, including the filename.
    *   `Binary File`: (Boolean) Toggle between uploading binary data or text content.
        *   If ON: `Input Binary Field`: The name of the n8n binary property containing the file data to upload (e.g., `data`).
        *   If OFF: `File Content`: The text content to write into the new file on the server.

## Output Data

*   **List**: Returns an array of objects, each describing a file or directory (name, path, type, size, modified date).
*   **Download**: Adds a binary property (specified by `Put Output File in Field`) to the item, containing the downloaded file.
*   **Delete/Rename/Upload**: Typically returns the input item, possibly with added confirmation details or modified properties, confirming the operation's success.

## JSON Structure Example (Conceptual - Upload Binary File)

```json
{
  "parameters": {
    "operation": "upload",
    "path": "={{ '/remote/path/uploads/' + $json.fileName }}", // Construct destination path
    "binaryData": true, // Indicate binary upload
    "binaryPropertyName": "data" // Specify input binary property name
  },
  "name": "Upload File via SFTP",
  "type": "n8n-nodes-base.ftp",
  "typeVersion": 1.1, // Or higher, check node info
  "position": [
    3200,
    2400
  ],
  "credentials": {
    "sftp": { // Credential type matches selection (sftp or ftp)
      "id": "YOUR_SFTP_CREDENTIAL_ID",
      "name": "My SFTP Server"
    }
  }
}
```

---

## 80. Getresponse.md ---

# n8n Node: GetResponse

The GetResponse node (`n8n-nodes-base.getresponse`) allows you to automate tasks within the GetResponse marketing platform and integrate it with other applications.

## Functionality

This node provides built-in support for managing contacts within GetResponse.

## Credentials

To use this node, you need to configure GetResponse credentials in n8n. Refer to the [GetResponse credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/getresponse/) for guidance on setting up authentication.

## Operations

The node supports the following operations related to contacts:

*   **Create a new contact:** Adds a new contact to your GetResponse list.
*   **Delete a contact:** Removes a specified contact.
*   **Get a contact:** Retrieves details for a single contact.
*   **Get all contacts:** Fetches a list of all contacts (potentially subject to pagination or API limits).
*   **Update contact properties:** Modifies the details or custom fields of an existing contact.

## Trigger Node

GetResponse also has a corresponding trigger node (`n8n-nodes-base.getresponsetrigger`) to start workflows based on events in GetResponse. See the [GetResponse Trigger documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.getresponsetrigger/) for details.

## Unsupported Operations

If you need to perform an operation not listed above (e.g., managing campaigns, newsletters, or other GetResponse features), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/). You can authenticate the HTTP Request node using your existing GetResponse credentials.

## Use Cases

*   Adding new leads from a web form or CRM to a GetResponse list.
*   Syncing contact updates between GetResponse and other systems.
*   Removing contacts based on criteria from other applications.
*   Fetching contact details for use in personalized messages or other workflow steps.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.getresponse/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.getresponse/)*

---

## 81. Ghost.md ---

# n8n Node: Ghost

The Ghost node (`n8n-nodes-base.ghost`) allows you to interact with the Ghost publishing platform's Admin and Content APIs.

## Functionality

This node enables automation of tasks related to managing content within a Ghost instance, such as creating, retrieving, updating, and deleting posts.

## Credentials

To use this node, you need to configure Ghost credentials in n8n, which typically involve your Ghost site URL and an Admin API Key or Content API Key depending on the operations you intend to perform. Refer to the [Ghost credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/ghost/) for setup details.

## Operations

The node supports operations via two different Ghost APIs:

### Admin API

Requires Admin API Key credentials. Allows modification of content.

*   **Post**
    *   Create a post
    *   Delete a post
    *   Get a post
    *   Get all posts
    *   Update a post

### Content API

Requires Content API Key credentials. Allows read-only access to content.

*   **Post**
    *   Get a post
    *   Get all posts

## AI Tool Capability

This node can be utilized within n8n's AI Agent features, allowing AI to potentially direct its operations or automatically set parameters based on context.

## Unsupported Operations

If you need to perform operations not directly supported by the node (e.g., managing members, tags, or site settings beyond posts), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/). You can authenticate the HTTP Request node using your existing Ghost credentials.

## Use Cases

*   Automatically publishing posts drafted in other applications (e.g., Google Docs, Notion).
*   Syncing posts between different Ghost instances or other CMS platforms.
*   Retrieving post content for analysis or repurposing.
*   Updating post statuses or metadata based on external triggers.
*   Deleting posts programmatically.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.ghost/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.ghost/)*

---

## 82. GitHub.md ---

# n8n-nodes-base.gitHub

## Description

The GitHub node interacts with the GitHub API, allowing automation of various tasks related to repositories, issues, files, releases, users, workflows, and more within GitHub.

## Credentials

Requires GitHub credentials (OAuth2 or Access Token):
*   **OAuth2**: Recommended. Requires creating a GitHub OAuth App and authorizing n8n.
*   **Access Token**: Uses a Personal Access Token (PAT) generated from GitHub developer settings with appropriate scopes (e.g., `repo`, `workflow`, `admin:org`).

## Resources and Operations

The node supports a wide range of resources and operations:

*   **File**: `Create`, `Delete`, `Edit`, `Get`, `List` (contents of a directory).
*   **Issue**: `Create`, `Create Comment`, `Edit`, `Get`, `Lock`.
*   **Organization**: `Get Repositories`.
*   **Release**: `Create`, `Delete`, `Get`, `Get Many`, `Update`.
*   **Repository**: `Get` (details), `Get Issues`, `Get License`, `Get Profile` (community profile), `Get Pull Requests`, `List Popular Paths`, `List Referrers`.
*   **Review**: (Likely Pull Request Reviews) `Create`, `Get`, `Get Many`, `Update`.
*   **User**: `Get Repositories`, `Invite` (to organization).
*   **Workflow**: `Disable`, `Dispatch` (trigger a workflow_dispatch event), `Enable`, `Get`, `Get Usage`, `List`.

## Common Parameters (Vary Significantly by Resource & Operation)

*   **Resource**: The GitHub entity type (e.g., `issue`, `repository`, `file`).
*   **Operation**: The action to perform (e.g., `create`, `get`, `list`).
*   **Repository Owner/Organization**: The username or organization name owning the repository.
*   **Repository Name**: The name of the repository.
*   **Issue Number / Release ID / File Path / Workflow ID**: Specific identifiers for the target resource.
*   **Data Fields**: Various fields depending on the operation (e.g., for Issue Create: `title`, `body`, `labels`, `assignees`; for File Create: `path`, `content`, `message`, `branch`).
*   **Filters/Options**: Parameters to filter lists (e.g., issue `state`, `labels`), specify branches, control pagination (`Limit`, `Return All`).
*   **Content**: (For File operations) File content, often Base64 encoded for binary files or plain text.
*   **Message**: (For File operations) The commit message.
*   **Branch/Ref**: The specific branch or reference (tag, commit SHA) to operate on.

## Output Data

Output varies greatly depending on the resource and operation. Generally follows the structure of the corresponding GitHub REST API response.
*   **Get/List/Get Many**: Returns an array of objects or a single object representing the requested GitHub resource(s).
*   **Create/Edit/Update**: Returns the details of the created or modified resource.
*   **Delete/Lock/Enable/Disable/Dispatch**: Often returns a success confirmation, sometimes with minimal data.

## JSON Structure Example (Conceptual - Create Issue)

```json
{
  "parameters": {
    "resource": "issue",
    "operation": "create",
    "repositoryOwner": "={{ $json.repoOwner }}",
    "repositoryName": "={{ $json.repoName }}",
    "title": "={{ $json.issueTitle }}",
    "additionalFields": {
      "body": "={{ $json.issueBody }}",
      "labels": [
        "bug",
        "n8n-automation"
      ]
    }
  },
  "name": "Create GitHub Issue",
  "type": "n8n-nodes-base.gitHub",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3300,
    2500
  ],
  "credentials": {
    "githubApi": { // Could be githubOAuth2Api depending on credential type
      "id": "YOUR_GITHUB_CREDENTIAL_ID",
      "name": "My GitHub Account"
    }
  }
}
```

---

## 83. GithubTrigger.md ---

# n8n-nodes-base.githubTrigger

## Description

The GitHub Trigger node starts a workflow when specific events occur in a designated GitHub repository. It utilizes GitHub Webhooks to receive real-time notifications.

## Credentials

Requires GitHub credentials (OAuth2 or Access Token) with permissions to manage webhooks on the target repository or organization (admin privileges usually required).
*   **OAuth2**: Recommended. Requires creating a GitHub OAuth App and authorizing n8n.
*   **Access Token**: Uses a Personal Access Token (PAT) generated from GitHub developer settings with appropriate scopes (e.g., `admin:repo_hook`, `repo`).

## Setup

When the workflow is activated, n8n automatically attempts to create a webhook in the specified GitHub repository pointing to the n8n webhook URL. When deactivated, it attempts to delete the webhook.

## Parameters

*   **Authentication**: `Access Token` or `OAuth2`.
*   **Repository Owner**: The username or organization name owning the repository (selected from list, entered by name, or extracted from URL).
*   **Repository Name**: The name of the target repository (selected from list, entered by name, or extracted from URL).
*   **Events**: A multi-select list of GitHub webhook events to trigger the workflow. Examples include:
    *   `*`: Wildcard for all events.
    *   `push`: Git push to a repository.
    *   `issues`: Activity related to issues (opened, edited, closed, etc.).
    *   `issue_comment`: Activity related to issue comments.
    *   `pull_request`: Activity related to pull requests (opened, closed, reopened, assigned, etc.).
    *   `release`: Activity related to releases (published, created, etc.).
    *   `create`: Repository, branch, or tag created.
    *   `delete`: Branch or tag deleted.
    *   `fork`: Repository forked.
    *   `workflow_dispatch`: Workflow manually triggered.
    *   *(Many others available, see GitHub webhook event documentation or node source code for a full list)*

## Output Data

The node outputs the data payload sent by the GitHub webhook for the triggered event. The structure depends entirely on the specific event type. Common fields include:
*   `headers`: Webhook request headers (e.g., `x-github-event`, `x-github-delivery`).
*   `body`: The main payload containing event details.
    *   `action`: The specific action that occurred (e.g., `opened`, `created`, `published`).
    *   `repository`: Details about the repository.
    *   `sender`: Details about the user who triggered the event.
    *   Event-specific objects (e.g., `issue`, `pull_request`, `release`, `comment`).

## JSON Structure Example (Conceptual - Trigger on Issue Opened)

```json
{
  "parameters": {
    "authentication": "oAuth2", // Or "accessToken"
    "owner": {
      "mode": "name",
      "value": "n8n-io" // Repository owner
    },
    "repository": {
      "mode": "name",
      "value": "n8n" // Repository name
    },
    "events": [
      "issues" // Trigger on any issue event
      // Add more events like "push", "pull_request" if needed
    ]
  },
  "name": "GitHub Issue Trigger",
  "type": "n8n-nodes-base.githubTrigger",
  "typeVersion": 1,
  "position": [
    3400,
    2600
  ],
  "credentials": {
    "githubOAuth2Api": { // Or githubApi for Access Token
      "id": "YOUR_GITHUB_CREDENTIAL_ID",
      "name": "My GitHub OAuth2"
    }
  },
  "webhookId": "GENERATED_WEBHOOK_ID_ON_ACTIVATION"
}
```

**Note**: The `webhookId` is typically managed internally by n8n upon workflow activation/deactivation.

---

## 84. Gitlab.md ---

# n8n-nodes-base.gitlab

## Description

The GitLab node allows interaction with the GitLab API for automating tasks related to GitLab projects, issues, repositories, files, releases, users, and more. It integrates GitLab functionalities into n8n workflows.

## Credentials

Requires GitLab credentials:
*   **Access Token**: A GitLab Personal Access Token, Project Access Token, or Group Access Token with the necessary API scope (e.g., `api`, `read_repository`, `write_repository`).
*   **Host**: (Optional for GitLab.com) The URL of your self-hosted GitLab instance (e.g., `https://gitlab.yourcompany.com`).

## Resources and Operations

The node supports various resources and operations:

*   **File**: `Create`, `Delete`, `Edit`, `Get`, `List` (repository files).
*   **Issue**: `Create a new issue`, `Create a new comment on an issue`, `Edit an issue`, `Get the data of a single issue`, `Lock an issue`.
*   **Release**: `Create a new release`, `Delete a new release`, `Get a new release`, `Get all releases`, `Update a new release`.
*   **Repository**: `Get the data of a single repository`, `Returns issues of a repository`.
*   **User**: `Returns the repositories of a user`.

## Common Parameters (Vary Significantly by Resource & Operation)

*   **Resource**: The GitLab entity type (e.g., `issue`, `repository`, `file`).
*   **Operation**: The action to perform (e.g., `create`, `get`, `list`, `edit`).
*   **Project ID or Path**: The numeric ID or the URL-encoded path (e.g., `group/project`) of the target project. Often required.
*   **Issue IID / Release Tag / File Path**: Specific identifiers for the target resource within a project.
*   **Branch**: The name of the branch to operate on (e.g., `main`, `develop`). Required for file operations.
*   **Data Fields**: Various fields depending on the operation (e.g., for Issue Create: `title`, `description`, `labels`, `assignee_ids`; for File Create: `file_path`, `content`, `commit_message`).
*   **Filters/Options**: Parameters to filter lists (e.g., issue `state`, `labels`), control pagination (`Limit`, `Return All`).
*   **Content**: (For File operations) File content.
*   **Commit Message**: (For File operations) The commit message.

## Output Data

Output varies based on the resource and operation, generally mirroring the structure of the corresponding GitLab REST API response.
*   **Get/List/Get All**: Returns an array of objects or a single object representing the requested GitLab resource(s).
*   **Create/Edit/Update**: Returns the details of the created or modified resource.
*   **Delete/Lock**: Often returns a success confirmation, sometimes with minimal data.

## JSON Structure Example (Conceptual - Create File)

```json
{
  "parameters": {
    "resource": "file",
    "operation": "create",
    "projectIdOrPath": "={{ $json.projectPath }}", // e.g., "mygroup/myproject"
    "branch": "main",
    "filePath": "={{ 'docs/' + $json.fileName + '.md' }}",
    "content": "={{ $json.fileContent }}",
    "commitMessage": "={{ 'docs: add ' + $json.fileName }}"
  },
  "name": "Create GitLab File",
  "type": "n8n-nodes-base.gitlab",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3500,
    2700
  ],
  "credentials": {
    "gitlabApi": {
      "id": "YOUR_GITLAB_CREDENTIAL_ID",
      "name": "My GitLab Token"
    }
  }
}
```

---

## 85. GoogleAds.md ---

# n8n-nodes-base.googleAds

## Description

The Google Ads node allows interaction with the Google Ads API to retrieve information about advertising campaigns. It can be used to integrate Google Ads data with other applications within n8n workflows.

## Credentials

Requires Google Ads credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the Google Ads API and authorizing n8n to access your Google Ads account.
*   **Customer ID**: Your Google Ads Customer ID (without hyphens).
*   **Developer Token**: Your Google Ads API Developer Token (requires application and approval from Google).
*   **Login Customer ID**: (Optional) If accessing accounts via a Manager Account (MCC), this is the MCC's Customer ID.

## Resources and Operations

The node currently supports the following resource and operations:

*   **Campaign**
    *   `Get all campaigns`: Retrieves a list of all campaigns accessible by the authenticated account.
    *   `Get a campaign`: Retrieves details for a specific campaign by its ID.

## Common Parameters

*   **Resource**: `Campaign`.
*   **Operation**: `Get All` or `Get`.
*   **Customer ID**: The specific Google Ads Customer ID to query (often required even if set in credentials, especially under an MCC).
*   **Campaign ID**: (For Get operation) The ID of the specific campaign to retrieve.
*   **Return All**: (For Get All operation) Whether to automatically handle pagination and return all results.
*   **Limit**: (For Get All operation) The maximum number of results to return per page if `Return All` is off.
*   **Filters/Options**: May allow filtering campaigns based on status, name, etc. (Specific filter options depend on the node's implementation and the Google Ads API version).

## Output Data

*   **Get All**: Returns an array of objects, each representing a Google Ads campaign with details like ID, name, status, budget, etc.
*   **Get**: Returns a single object representing the specified campaign.

## JSON Structure Example (Conceptual - Get All Campaigns)

```json
{
  "parameters": {
    "resource": "campaign",
    "operation": "getAll",
    "customerId": "={{ $json.adsCustomerId }}", // Customer ID without hyphens
    "returnAll": true
  },
  "name": "Get Google Ads Campaigns",
  "type": "n8n-nodes-base.googleAds",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3600,
    2800
  ],
  "credentials": {
    "googleAdsOAuth2Api": {
      "id": "YOUR_GOOGLE_ADS_CREDENTIAL_ID",
      "name": "My Google Ads Account"
    }
  }
}
```

**Note**: The documentation is brief. For more complex operations (creating/updating campaigns, ad groups, ads, keywords, reporting), the HTTP Request node must be used with the Google Ads API directly.

---

## 86. GoogleAnalytics.md ---

# n8n-nodes-base.googleAnalytics

## Description

The Google Analytics node interacts with the Google Analytics API (likely supporting both Universal Analytics via the Reporting API v4 and Google Analytics 4 via the Data API v1beta, although documentation is minimal). It allows retrieving reports and user activity data from Google Analytics properties.

## Credentials

Requires Google Analytics credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the appropriate Google Analytics API (Admin API, Reporting API v4, Data API) and authorizing n8n to access your Google Analytics data.

## Resources and Operations

The node supports the following resources and operations based on the documentation:

*   **Report**
    *   `Get`: Retrieves report data. This likely involves specifying metrics, dimensions, date ranges, and filters.
*   **User Activity**
    *   `Search`: Retrieves user activity data, potentially based on user IDs or other criteria.

**Note**: The specific parameters for these operations are not detailed in the main documentation page. They would depend heavily on which version of the Google Analytics API the node is using (UA Reporting API v4 or GA4 Data API).

## Common Parameters (Likely, based on GA APIs)

*   **Resource**: `Report` or `User Activity`.
*   **Operation**: `Get` or `Search`.
*   **Account/Property/View ID (UA) or Property ID (GA4)**: Identifiers for the specific Analytics entity to query.
*   **Date Ranges**: Start and end dates for the report data.
*   **Metrics**: The quantitative measurements (e.g., `ga:sessions`, `ga:pageviews` for UA; `sessions`, `screenPageViews` for GA4).
*   **Dimensions**: Attributes of the data (e.g., `ga:sourceMedium`, `ga:country` for UA; `sessionSourceMedium`, `country` for GA4).
*   **Filters**: Criteria to filter the data (e.g., filter by specific dimension values).
*   **Segments**: (UA) Subsets of sessions or users.
*   **User Identification**: (For User Activity Search) Criteria like `userId` or `clientId`.
*   **Pagination/Limit**: Parameters to control the amount of data returned.

## Output Data

*   **Report Get**: Returns report data, typically structured with rows containing dimension values and corresponding metric values.
*   **User Activity Search**: Returns data about user sessions and activities matching the search criteria.

## JSON Structure Example (Conceptual - Get GA4 Report)

```json
{
  "parameters": {
    "resource": "report",
    "operation": "get",
    "propertyId": "={{ $json.ga4PropertyId }}", // GA4 Property ID
    "dateRanges": {
      "values": [
        {
          "startDate": "={{ $now.minus({days: 7}).toFormat("yyyy-MM-dd") }}",
          "endDate": "={{ $now.minus({days: 1}).toFormat("yyyy-MM-dd") }}"
        }
      ]
    },
    "dimensions": {
      "values": [
        { "name": "sessionSourceMedium" },
        { "name": "country" }
      ]
    },
    "metrics": {
      "values": [
        { "name": "sessions" },
        { "name": "totalUsers" }
      ]
    }
    // Potentially add filters, orderBys etc. in additionalFields or specific parameters
  },
  "name": "Get GA4 Report",
  "type": "n8n-nodes-base.googleAnalytics",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3700,
    2900
  ],
  "credentials": {
    "googleAnalyticsOAuth2Api": {
      "id": "YOUR_GOOGLE_ANALYTICS_CREDENTIAL_ID",
      "name": "My Google Analytics"
    }
  }
}
```

**Note**: This JSON is highly conceptual as the exact parameters are not documented. It assumes GA4 Data API structure. Universal Analytics would use different metric/dimension names (e.g., `ga:sessions`).

---

## 87. GoogleBigQuery.md ---

# n8n-nodes-base.googleBigQuery

## Description

The Google BigQuery node allows interaction with Google Cloud's BigQuery data warehouse service. It enables executing SQL queries and inserting data into BigQuery tables directly from n8n workflows.

## Credentials

Requires Google BigQuery credentials:
*   **Service Account JSON**: The JSON key file for a Google Cloud Service Account that has the necessary BigQuery roles (e.g., `BigQuery Data Editor`, `BigQuery Job User`, `BigQuery User`).
*   **Project ID**: The Google Cloud Project ID where the BigQuery dataset resides.

## Operations

The node supports two main operations:

*   **Execute Query**: Runs a standard SQL query against BigQuery. Useful for retrieving data, performing calculations, or executing DDL/DML statements (though `INSERT` has a dedicated operation).
*   **Insert**: Inserts rows into a specified BigQuery table. This typically uses the BigQuery Streaming Insert API for efficient data ingestion.

## Parameters

*   **Operation**: `Execute Query` or `Insert`.

### For Execute Query:
*   **Query**: The SQL query to execute.
*   **Location**: (Optional) The geographic location of the dataset (e.g., `US`, `EU`). If not specified, BigQuery might infer it or use a default.
*   **Use Legacy SQL**: Whether to use BigQuery's legacy SQL dialect (defaults to false, standard SQL is recommended).
*   **Options**:
    *   **Dry Run**: If enabled, validates the query without executing it.
    *   **Use Query Cache**: Whether to use cached results for the query.

### For Insert:
*   **Dataset ID**: The ID of the BigQuery dataset containing the target table.
*   **Table ID**: The ID of the table to insert data into.
*   **Rows (JSON)**: A JSON array of objects, where each object represents a row to be inserted. The object keys must match the column names in the BigQuery table schema.
*   **Options**:
    *   **Ignore Unknown Values**: If true, fields in the input JSON that don't match table columns are ignored.
    *   **Skip Invalid Rows**: If true, rows that fail validation are skipped, allowing valid rows to be inserted.

## Output Data

*   **Execute Query**: Returns an array of objects, where each object represents a row returned by the query.
*   **Insert**: Typically returns a success confirmation, possibly with details about any rows that failed if `Skip Invalid Rows` was used.

## JSON Structure Example (Conceptual - Insert Rows)

```json
{
  "parameters": {
    "operation": "insert",
    "datasetId": "={{ $json.dataset }}", // e.g., "my_dataset"
    "tableId": "={{ $json.table }}", // e.g., "my_table"
    "rows": "={{ $json.dataToInsert }}", // Expects JSON array string: '[{"col1": "valA", "col2": 123}, {"col1": "valB", "col2": 456}]'
    "options": {
      "skipInvalidRows": true
    }
  },
  "name": "Insert into BigQuery",
  "type": "n8n-nodes-base.googleBigQuery",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3800,
    3000
  ],
  "credentials": {
    "googleBigQuery": {
      "id": "YOUR_BIGQUERY_CREDENTIAL_ID",
      "name": "My BigQuery Service Account"
    }
  }
}
```

---

## 88. Googlebooks.md ---

# n8n Node: Google Books

The Google Books node (`n8n-nodes-base.googlebooks`) allows you to interact with the Google Books API to manage bookshelves and retrieve volume information.

## Functionality

This node enables automation of tasks related to Google Books, such as managing personal bookshelves and searching for book information.

## Credentials

To use this node, you need to configure Google OAuth2 credentials in n8n. Refer to the [Google credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication (specifically OAuth2).

## Operations

The node supports the following operations categorized by resource:

*   **Bookshelf**
    *   Retrieve a specific bookshelf resource for the authenticated user (e.g., 'Favorites', 'Reading now').
    *   Get all public bookshelf resources for a specified user.
*   **Bookshelf Volume**
    *   Add a specific volume (book) to a bookshelf of the authenticated user.
    *   Clear all volumes from a bookshelf of the authenticated user.
    *   Get all volumes in a specific bookshelf for the authenticated user.
    *   Move a volume's position within a bookshelf of the authenticated user.
    *   Remove a volume from a bookshelf of the authenticated user.
*   **Volume**
    *   Get detailed information about a specific volume using its unique ID.
    *   Search for volumes based on a query string (e.g., title, author, ISBN).

## Unsupported Operations

If you need to perform operations not listed above, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Google Books API directly. You can authenticate the HTTP Request node using your existing Google OAuth2 credentials.

## Use Cases

*   Automatically adding books read (tracked elsewhere) to a 'Read' bookshelf.
*   Searching for book details based on ISBN scans or user input.
*   Retrieving lists of books from public bookshelves.
*   Managing personal reading lists within Google Books.

*Reference: [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebooks/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebooks/)*

---

## 89. GoogleCalendar.md ---

# n8n-nodes-base.googleCalendar

## Description

The Google Calendar node allows interaction with the Google Calendar API. It enables creating, retrieving, updating, deleting events, and checking calendar availability within n8n workflows.

## Credentials

Requires Google Calendar credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the Google Calendar API and authorizing n8n to access your Google Calendars.

## Resources and Operations

The node supports two main resources:

*   **Calendar**
    *   `Availability`: Checks if a specified time slot is free or busy across one or more calendars.
*   **Event**
    *   `Create`: Adds a new event to a specified calendar.
    *   `Delete`: Deletes an event by its ID.
    *   `Get`: Retrieves details of a specific event by its ID.
    *   `Get Many`: Retrieves a list of events from a calendar, with options for filtering by time range, search query, etc.
    *   `Update`: Modifies an existing event.

## Common Parameters

*   **Resource**: `Calendar` or `Event`.
*   **Operation**: `Availability`, `Create`, `Delete`, `Get`, `Get Many`, `Update`.
*   **Calendar ID**: The ID of the target calendar (e.g., `primary` for the main calendar, or a specific calendar email address/ID).

### For Event Operations (Create, Get, Get Many, Update, Delete):
*   **Event ID**: (Required for `Get`, `Update`, `Delete`) The unique ID of the event.
*   **Start Time / End Time / Date**: The start and end date/time for the event (required for `Create`, `Update`; used for filtering in `Get Many`). Can be specified as date-only or date-time.
*   **Timezone**: The timezone for interpreting start/end times (e.g., `America/New_York`).
*   **Summary**: The title or name of the event.
*   **Description**: The detailed description of the event.
*   **Location**: The location of the event.
*   **Attendees**: A list of email addresses for attendees.
*   **Send Updates**: (For `Create`, `Update`, `Delete`) Controls whether email notifications are sent to attendees (e.g., `all`, `none`, `externalOnly`).
*   **Recurrence**: Defines recurring event rules using RRULE, EXRULE, RDATE, EXDATE strings.
*   **Filters (for Get Many)**: `Time Min`, `Time Max`, `Query` (text search), `Event Statuses`, `Shared Extended Property`, `Private Extended Property`.
*   **Return All / Limit**: Controls pagination for `Get Many`.
*   **Update Mode (for Update)**: How to handle updates to recurring events (`allEventsInSeries`, `thisAndFutureEvents`, `onlyThisEvent`).
*   **Additional Fields**: Allows setting other event properties supported by the Google Calendar API (e.g., `colorId`, `reminders`, `conferenceData`).

### For Calendar Availability Operation:
*   **Time Min / Time Max**: The start and end time of the interval to check availability for.
*   **Timezone**: The timezone for interpreting the time interval.
*   **Items**: A list of items (calendar IDs) to check availability against.

## Output Data

*   **Event (Get, Create, Update)**: Returns a single Google Calendar event object.
*   **Event (Get Many)**: Returns an array of Google Calendar event objects matching the criteria.
*   **Event (Delete)**: Returns a success confirmation.
*   **Calendar (Availability)**: Returns information about busy time slots within the requested interval for the specified calendars.

## JSON Structure Example (Conceptual - Create Event)

```json
{
  "parameters": {
    "resource": "event",
    "operation": "create",
    "calendarId": "primary",
    "summary": "={{ $json.eventTitle }}",
    "startDateTime": "={{ $json.startTime }}", // ISO 8601 format, e.g., "2025-05-10T10:00:00-04:00"
    "endDateTime": "={{ $json.endTime }}",   // ISO 8601 format, e.g., "2025-05-10T11:00:00-04:00"
    "timeZone": "America/New_York",
    "sendUpdates": "all",
    "additionalFields": {
      "description": "={{ $json.eventDescription }}",
      "location": "={{ $json.eventLocation }}",
      "attendees": {
        "values": [
          { "email": "attendee1@example.com" },
          { "email": "attendee2@example.com" }
        ]
      }
    }
  },
  "name": "Create Google Calendar Event",
  "type": "n8n-nodes-base.googleCalendar",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    3900,
    3100
  ],
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "YOUR_GOOGLE_CALENDAR_CREDENTIAL_ID",
      "name": "My Google Calendar"
    }
  }
}
```

---

## 90. GoogleCalendarTrigger.md ---

# n8n-nodes-base.googleCalendarTrigger

## Description

The Google Calendar Trigger node starts a workflow when specific events occur in a designated Google Calendar. It monitors the calendar for changes like event creation, updates, cancellations, starts, or ends.

## Credentials

Requires Google Calendar credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the Google Calendar API and authorizing n8n to access your Google Calendars.

## Setup & Mechanism

This trigger likely uses Google Calendar's Push Notifications (webhooks) feature for real-time updates, although polling might be used as a fallback or alternative depending on the n8n version and configuration. When the workflow is activated, n8n registers a notification channel with Google Calendar pointing to the n8n webhook URL. When deactivated, it attempts to stop the channel.

## Parameters

*   **Calendar ID**: The ID of the calendar to monitor (e.g., `primary` for the main calendar, or a specific calendar email address/ID). Can usually be selected from a list.
*   **Events**: A multi-select list of event types to trigger the workflow. Options include:
    *   `Event Cancelled`
    *   `Event Created`
    *   `Event Ended`
    *   `Event Started`
    *   `Event Updated`
*   **Options**: (May include)
    *   **Include Event Data**: Whether to fetch and include the full event details in the trigger output.
    *   **Filters**: Potential options to filter events based on criteria like search terms (though less common for triggers).

## Output Data

The node outputs data related to the event that triggered the workflow. The exact structure depends on the event type and whether full event data is included.
*   Typically includes the `calendarId` and `eventId`.
*   If event data is included, it will contain the full Google Calendar event resource object (summary, start/end times, attendees, description, etc.).
*   May include metadata about the change (e.g., previous values for updates if supported).

## JSON Structure Example (Conceptual - Trigger on Event Created/Updated)

```json
{
  "parameters": {
    "calendarId": "primary",
    "events": [
      "eventCreated",
      "eventUpdated"
    ],
    "options": {
      "includeEventData": true // Option to fetch full event details
    }
  },
  "name": "Google Calendar Trigger",
  "type": "n8n-nodes-base.googleCalendarTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4000,
    3200
  ],
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "YOUR_GOOGLE_CALENDAR_CREDENTIAL_ID",
      "name": "My Google Calendar"
    }
  },
  "webhookId": "GENERATED_WEBHOOK_ID_ON_ACTIVATION" // Internal ID
}
```

---

## 91. GoogleChat.md ---

# n8n-nodes-base.googleChat

## Description

The Google Chat node allows interaction with the Google Chat API. It enables managing spaces, memberships, and messages (creating, getting, updating, deleting) within Google Chat directly from n8n workflows. It also supports sending messages that pause the workflow and wait for a user response via interactive cards.

## Credentials

Requires Google credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the Google Chat API and authorizing n8n to access your Google account and Chat spaces.

## Resources and Operations

The node supports three main resources:

*   **Member**
    *   `Get a membership`: Retrieves details about a specific membership in a space.
    *   `Get all memberships in a space`: Lists all members of a specified space.
*   **Message**
    *   `Create a message`: Sends a new message to a space. Supports simple text or complex Card V2 messages.
    *   `Delete a message`: Deletes a specific message.
    *   `Get a message`: Retrieves details of a specific message.
    *   `Send and Wait for Response`: Sends a message with interactive elements (buttons, forms) and pauses the workflow until a user interacts with it.
    *   `Update a message`: Updates an existing message (text or cards).
*   **Space**
    *   `Get a space`: Retrieves details about a specific space.
    *   `Get all spaces the caller is a member of`: Lists all spaces the authenticated user is part of.

## Common Parameters

*   **Resource**: `Member`, `Message`, or `Space`.
*   **Operation**: The specific action to perform (e.g., `create`, `get`, `getAll`, `delete`, `update`, `sendAndWait`).
*   **Space Name**: The identifier for the target space, usually in the format `spaces/SPACE_ID`.
*   **Membership Name**: (For Member Get) Identifier like `spaces/SPACE_ID/members/MEMBER_ID`.
*   **Message Name**: (For Message Get/Update/Delete) Identifier like `spaces/SPACE_ID/messages/MESSAGE_ID`.
*   **Text**: (For Message Create/Update) The simple text content of the message.
*   **Cards V2**: (For Message Create/Update) JSON defining the layout and content of a Google Chat Card V2 message. Use this for richer formatting and interactive elements.
*   **Thread Key**: (For Message Create) An identifier to group messages into a thread.
*   **Message Reply Option**: (For Message Create) Controls if the message starts a new thread or replies in an existing one.
*   **Update Mask**: (For Message Update) Specifies which fields of the message to update (e.g., `text`, `cardsV2`).

### For Send and Wait for Response Operation:
*   **Response Type**: `Approval`, `Free Text`, or `Custom Form`.
*   **Limit Wait Time**: Optional toggle to set a timeout for waiting.
    *   **Timeout After**: Duration (e.g., `5m`, `1h`) or specific date/time.
    *   **Timeout Response**: Action on timeout (`Continue`, `Error`).
*   **Approval UI / Free Text UI / Custom Form UI**: Specific fields to customize the interactive message and form presented to the user (button labels, form titles, form fields based on n8n Form node structure for Custom Form).

## Output Data

*   **Get/GetAll**: Returns objects representing the requested Space(s), Membership(s), or Message(s).
*   **Create/Update**: Returns the created or updated Message object.
*   **Delete**: Returns a success confirmation.
*   **Send and Wait for Response**: Returns the user's response data (e.g., approved/disapproved status, submitted form values).

## JSON Structure Example (Conceptual - Send Simple Message)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "create",
    "spaceName": "spaces/AAAAAAAAAAA", // Replace with actual Space ID
    "text": "={{ $json.messageText }}",
    "messageReplyOption": "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD" // Or START_NEW_THREAD
    // "threadKey": "optional-thread-id" // Optional
  },
  "name": "Send Google Chat Message",
  "type": "n8n-nodes-base.googleChat",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4100,
    3300
  ],
  "credentials": {
    "googleChatOAuth2Api": {
      "id": "YOUR_GOOGLE_CHAT_CREDENTIAL_ID",
      "name": "My Google Chat Account"
    }
  }
}
```

## JSON Structure Example (Conceptual - Send and Wait for Approval)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "sendAndWait",
    "spaceName": "spaces/BBBBBBBBBBB", // Replace with actual Space ID
    "text": "Please approve the request: {{ $json.requestDetails }}",
    "responseType": "approval",
    "limitWaitTimeUi": {
      "limitWaitTime": true,
      "timeoutAfter": "1h",
      "timeoutResponse": "error"
    },
    "approvalUi": {
      "showDisapproveButton": true,
      "approveButtonLabel": "Approve It!",
      "disapproveButtonLabel": "Reject"
    }
  },
  "name": "Request Approval via Chat",
  "type": "n8n-nodes-base.googleChat",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4200,
    3400
  ],
  "credentials": {
    "googleChatOAuth2Api": {
      "id": "YOUR_GOOGLE_CHAT_CREDENTIAL_ID",
      "name": "My Google Chat Account"
    }
  }
}
```

---

## 92. Googlecloudnaturallanguage.md ---

# n8n Node: Google Cloud Natural Language

The Google Cloud Natural Language node (`n8n-nodes-base.googlecloudnaturallanguage`) allows you to leverage Google Cloud's powerful natural language processing capabilities within your n8n workflows. You can use it to analyze text, understand sentiment, extract entities, and more, integrating these insights with other applications and services connected to n8n.

## Credentials

To use this node, you need to configure Google Cloud credentials in n8n. Refer to the official n8n documentation for guidance on setting up [Google Cloud credentials](https://docs.n8n.io/credentials/google/). This typically involves creating a service account in your Google Cloud project and providing the necessary key file or details to n8n.

## Operations

The node currently supports the following operations focused on document analysis:

*   **Document**
    *   **Analyze Sentiment:** Analyzes the input text to determine the overall emotional leaning (positive, negative, neutral) and its magnitude.

## Input Fields

Depending on the selected operation (e.g., Analyze Sentiment), you will typically need to provide:

*   **Text Content:** The text document or string you want to analyze.
*   **Type:** Specify whether the input is plain text or HTML.
*   **Language (Optional):** The language of the input text. If not specified, Google Cloud Natural Language attempts to auto-detect the language.
*   **Encoding Type (Optional):** The text encoding type (e.g., UTF8, UTF16, UTF32). Defaults to UTF8.

## Output

The output will vary based on the operation. For Analyze Sentiment, the output typically includes:

*   **Document Sentiment:**
    *   `score`: A value from -1.0 (negative) to 1.0 (positive) indicating the overall sentiment.
    *   `magnitude`: A non-negative value indicating the strength of the emotion, regardless of score.
*   **Language:** The detected language of the input text.
*   **Sentences:** An array containing sentiment analysis for each sentence in the document.

## Alternative Operations via HTTP Request

If the specific Google Cloud Natural Language API feature you need is not directly supported by a dedicated operation within this node, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

You can utilize your configured Google Cloud credentials within the HTTP Request node:

1.  Set **Authentication** to `Predefined Credential Type`.
2.  Select `Google Cloud Natural Language` as the **Credential Type**.
3.  Choose your configured credential from the list.

This allows you to make custom calls to any endpoint available in the [Google Cloud Natural Language API](https://cloud.google.com/natural-language/docs/reference/rest).

## Resources

*   [n8n Google Cloud Natural Language Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudnaturallanguage/)
*   [Google Cloud Natural Language API Documentation](https://cloud.google.com/natural-language/docs)
*   [n8n Google Credentials Documentation](https://docs.n8n.io/credentials/google/)

---

## 93. GoogleCloudStorage.md ---

# n8n-nodes-base.googleCloudStorage

## Description

The Google Cloud Storage node allows interaction with Google Cloud Storage (GCS), Google's object storage service. It enables managing buckets (creating, deleting, getting, listing, updating) and objects/files (uploading/creating, downloading/getting, deleting, listing, updating metadata) within GCS buckets directly from n8n workflows.

## Credentials

Requires Google Cloud Storage credentials:
*   **Service Account JSON**: The JSON key file for a Google Cloud Service Account that has the necessary GCS roles (e.g., `Storage Object Admin`, `Storage Admin` for bucket operations).
*   **Project ID**: The Google Cloud Project ID associated with the service account and GCS resources.

## Resources and Operations

The node supports two main resources:

*   **Bucket**
    *   `Create`: Creates a new GCS bucket.
    *   `Delete`: Deletes an empty GCS bucket.
    *   `Get`: Retrieves metadata for a specific bucket.
    *   `Get Many`: Lists buckets in the project.
    *   `Update`: Updates metadata for a bucket (e.g., labels, lifecycle rules - though specific update capabilities might vary).
*   **Object**
    *   `Create`: Uploads a file (binary data from n8n) to a bucket. Can also be used to copy objects within or between buckets if the API supports it directly, or via download/upload.
    *   `Delete`: Deletes an object from a bucket.
    *   `Get`: Downloads an object from a bucket, making its content available as binary data in the n8n workflow.
    *   `Get Many`: Lists objects within a bucket, potentially filtered by prefix.
    *   `Update`: Updates metadata for an object (e.g., content type, custom metadata).

## Common Parameters

*   **Resource**: `Bucket` or `Object`.
*   **Operation**: The specific action to perform (e.g., `create`, `get`, `getMany`, `delete`, `update`).
*   **Bucket Name**: The name of the target bucket.
*   **Object Name / Path**: The full path/name of the object within the bucket (e.g., `folder/subfolder/file.txt`).

### For Bucket Operations:
*   **Location**: (Create) The geographic location for the new bucket (e.g., `US-CENTRAL1`).
*   **Storage Class**: (Create) Default storage class for objects in the bucket (e.g., `STANDARD`, `NEARLINE`).
*   **Labels**: (Create, Update) Key-value pairs for labeling the bucket.
*   **Filters (Get Many)**: Options to filter the list of buckets (less common).
*   **Return All / Limit**: Controls pagination for `Get Many`.

### For Object Operations:
*   **Binary Property**: (Create) The name of the binary property in the incoming n8n item containing the file data to upload (default is often `data`).
*   **Destination**: (Get) Whether to save the downloaded file to disk (`File`) or output as binary data in the workflow (`Data`).
    *   **File Name**: (Get - File) The local path to save the downloaded file.
*   **Prefix**: (Get Many) Filters the object list to include only objects whose names start with this prefix (simulates folders).
*   **Delimiter**: (Get Many) Used with Prefix to list objects and common prefixes (subfolders) at a specific level.
*   **Metadata**: (Create, Update) Key-value pairs for custom object metadata.
*   **Content Type**: (Create, Update) The MIME type of the object.
*   **Return All / Limit**: Controls pagination for `Get Many`.

## Output Data

*   **Get/Get Many (Bucket/Object)**: Returns metadata object(s) for the requested bucket(s) or object(s).
*   **Get (Object)**: If `Destination` is `Data`, outputs an item with the file content in the specified binary property. If `File`, outputs metadata about the saved file.
*   **Create/Update (Bucket/Object)**: Returns metadata for the created or updated bucket/object.
*   **Delete (Bucket/Object)**: Returns a success confirmation.

## JSON Structure Example (Conceptual - Upload Object)

```json
{
  "parameters": {
    "resource": "object",
    "operation": "create",
    "bucketName": "={{ $json.bucket }}", // e.g., "my-n8n-uploads"
    "objectName": "={{ $json.destinationPath }}", // e.g., "processed_files/{{ $now.toFormat(\'yyyy-MM-dd\') }}/{{ $binary.data.fileName }}"
    "binaryPropertyName": "data", // Assuming input item has binary data in 'data' property
    "options": {
      "metadata": {
        "values": [
          { "key": "processed-by", "value": "n8n-workflow-xyz" },
          { "key": "source-id", "value": "={{ $json.sourceId }}" }
        ]
      },
      "contentType": "={{ $binary.data.mimeType }}" // Use MIME type from binary data if available
    }
  },
  "name": "Upload to GCS",
  "type": "n8n-nodes-base.googleCloudStorage",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4300,
    3500
  ],
  "credentials": {
    "googleCloudStorageApi": {
      "id": "YOUR_GCS_CREDENTIAL_ID",
      "name": "My GCS Service Account"
    }
  }
}
```

---

## 94. GoogleContacts.md ---

# n8n-nodes-base.googleContacts

## Description

The Google Contacts node allows interaction with the Google Contacts API (People API). It enables creating, retrieving, updating, and deleting contacts and contact groups within a user's Google Account directly from n8n workflows.

## Credentials

Requires Google Contacts credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **People API** and authorizing n8n to access and manage your Google Contacts.

## Resources and Operations

The node primarily focuses on the **Contact** resource (represented as 'Person' in the People API).

*   **Contact**
    *   `Create a contact`: Creates a new contact with specified details (name, email, phone, etc.).
    *   `Delete a contact`: Deletes a contact by their resource name.
    *   `Get a contact`: Retrieves details of a specific contact by their resource name.
    *   `Retrieve all contacts` (Get Many): Retrieves a list of contacts, with options for filtering and specifying which fields to return.
    *   `Update a contact`: Modifies an existing contact's details.

*(Note: Operations related to Contact Groups might exist in some versions or could be added; check the specific node version for details.)*

## Common Parameters

*   **Resource**: `Contact` (likely the only primary resource).
*   **Operation**: `Create`, `Delete`, `Get`, `Get Many`, `Update`.
*   **Contact Resource Name**: (Required for `Get`, `Update`, `Delete`) The unique identifier for the contact, typically in the format `people/PERSON_ID`.
*   **Update Mask / Fields to Set**: (Required for `Update`, often used in `Create`) Specifies which fields of the contact are being provided or modified. This is crucial for the People API (e.g., `names`, `emailAddresses`, `phoneNumbers`).
*   **Read Mask / Fields to Return**: (For `Get`, `Get Many`) Specifies which fields to include in the response, improving efficiency (e.g., `names,emailAddresses,phoneNumbers`).

### For Contact Create/Update:
*   **Additional Fields / Contact Data**: A structure to input various contact details:
    *   **Names**: Given name, family name, display name.
    *   **Email Addresses**: List of emails with types (home, work, other) and primary flag.
    *   **Phone Numbers**: List of phone numbers with types (mobile, home, work, etc.) and canonical form.
    *   **Addresses**: List of postal addresses with types and structured fields (street, city, region, postal code, country).
    *   **Organizations**: Company name, job title.
    *   **Birthdays**: Date of birth.
    *   **Notes**: Free text notes.
    *   **Photos**: Contact photo (uploading might be complex or require specific handling).
    *   **Group Memberships**: Adding the contact to specific contact groups.
    *   *(Other fields supported by People API)*

### For Contact Get Many:
*   **Return All / Limit**: Controls pagination.
*   **Sort Order**: How to sort the returned contacts (e.g., `LAST_MODIFIED_ASCENDING`, `FIRST_NAME_ASCENDING`).
*   **Sources**: Filter contacts from specific sources (e.g., `READ_SOURCE_TYPE_CONTACT`, `READ_SOURCE_TYPE_PROFILE`).
*   **Contact Group Resource Name**: Filter contacts belonging to a specific group.

## Output Data

*   **Get/Get Many**: Returns one or an array of Google People API Person objects containing the requested fields.
*   **Create/Update**: Returns the created or updated Person object.
*   **Delete**: Returns a success confirmation.

## JSON Structure Example (Conceptual - Create Contact)

```json
{
  "parameters": {
    "operation": "create",
    "updateMask": "names,emailAddresses,phoneNumbers", // Fields being provided
    "additionalFields": {
      "names": [
        {
          "givenName": "={{ $json.firstName }}",
          "familyName": "={{ $json.lastName }}"
        }
      ],
      "emailAddresses": [
        {
          "value": "={{ $json.email }}",
          "type": "work",
          "primary": true
        }
      ],
      "phoneNumbers": [
        {
          "value": "={{ $json.phone }}",
          "type": "mobile"
        }
      ]
    }
  },
  "name": "Create Google Contact",
  "type": "n8n-nodes-base.googleContacts",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4400,
    3600
  ],
  "credentials": {
    "googleContactsOAuth2Api": {
      "id": "YOUR_GOOGLE_CONTACTS_CREDENTIAL_ID",
      "name": "My Google Contacts"
    }
  }
}
```

---

## 95. GoogleDirectory.md ---

# n8n-nodes-base.googleDirectory

## Description

Official n8n documentation does not list a specific node named `n8n-nodes-base.googleDirectory`.

The functionality related to managing Google Workspace users, groups, and organizational units, which is typically handled by the Google Admin SDK's Directory API, appears to be covered by the **`n8n-nodes-base.googleWorkspaceAdmin`** node in n8n.

Please refer to the documentation for `n8n-nodes-base.googleWorkspaceAdmin` for managing Google Directory resources.

## JSON Structure Example

Not applicable, as this specific node type does not seem to exist. Refer to `n8n-nodes-base.googleWorkspaceAdmin`.

---

## 96. GoogleDocs.md ---

# n8n-nodes-base.googleDocs

## Description

The Google Docs node allows interaction with the Google Docs API. It enables creating new documents, retrieving the content of existing documents, and updating documents (primarily by appending text or performing batch updates) within n8n workflows.

## Credentials

Requires Google Docs credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Docs API** and authorizing n8n to access and manage your Google Docs.

## Resources and Operations

The node focuses on the **Document** resource.

*   **Document**
    *   `Create`: Creates a new, blank Google Doc or creates one from a template.
    *   `Get`: Retrieves the content and metadata of a specific Google Doc.
    *   `Update`: Appends text to a document or performs more complex modifications using the Google Docs API batchUpdate method (requires constructing JSON requests).

## Common Parameters

*   **Resource**: `Document`.
*   **Operation**: `Create`, `Get`, `Update`.
*   **Document ID**: (Required for `Get`, `Update`) The unique ID of the Google Doc (from its URL).

### For Document Create:
*   **Title**: The title for the new document.
*   **Folder ID**: (Optional) The ID of the Google Drive folder where the new document should be created.
*   **Template Document ID**: (Optional) If creating from a template, the ID of the template document.
    *   **Template Data (JSON)**: (Optional, if using template) A JSON object containing key-value pairs for replacing placeholders in the template (e.g., `{"name": "John Doe", "date": "2025-05-04"}`).

### For Document Get:
*   **Fields**: (Optional) Specifies which fields of the document resource to return (e.g., `documentId,title,body`).

### For Document Update:
*   **Update Type**: Determines the update method.
    *   `Append Text`: Simple mode to add text to the end of the document.
        *   **Text to Append**: The text content to add.
    *   `Batch Update`: Advanced mode using the Google Docs API `batchUpdate` method.
        *   **Requests (JSON)**: A JSON array defining the specific update requests (e.g., inserting text at a location, deleting text, formatting changes). This requires understanding the Google Docs API request structure.

## Output Data

*   **Get**: Returns a Google Docs API Document object, including its content (often in a structured format like `body.content`) and metadata.
*   **Create**: Returns the Document object for the newly created document.
*   **Update**: Returns the result of the batch update operation or a confirmation for append.

## JSON Structure Example (Conceptual - Create Document)

```json
{
  "parameters": {
    "operation": "create",
    "title": "={{ $json.docTitle }} - {{ $now.toISODate() }}",
    "options": {
      "folderId": "={{ $json.driveFolderId }}" // Optional folder ID
    }
  },
  "name": "Create Google Doc",
  "type": "n8n-nodes-base.googleDocs",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4500,
    3700
  ],
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YOUR_GOOGLE_DOCS_CREDENTIAL_ID",
      "name": "My Google Docs"
    }
  }
}
```

## JSON Structure Example (Conceptual - Append Text)

```json
{
  "parameters": {
    "operation": "update",
    "documentId": "={{ $json.documentId }}",
    "updateType": "appendText",
    "textToAppend": "\n\n## New Section - {{ $now.toISO() }}\n\nThis content was appended by the n8n workflow."
  },
  "name": "Append to Google Doc",
  "type": "n8n-nodes-base.googleDocs",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4600,
    3800
  ],
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YOUR_GOOGLE_DOCS_CREDENTIAL_ID",
      "name": "My Google Docs"
    }
  }
}
```

---

## 97. GoogleDrive.md ---

# n8n-nodes-base.googleDrive

## Description

The Google Drive node allows comprehensive interaction with the Google Drive API. It enables managing files, folders, and shared drives within a user's Google Drive or Google Workspace environment directly from n8n workflows. Operations include uploading, downloading, creating, deleting, moving, copying, sharing, searching, and updating files and folders.

## Credentials

Requires Google Drive credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Drive API** and authorizing n8n to access and manage the user's Google Drive files and folders.

## Resources and Operations

The node supports several resources:

*   **File**
    *   `Upload`: Uploads a file (binary data from n8n) to Google Drive.
    *   `Download`: Downloads a file from Google Drive.
    *   `Create from text`: Creates a new file with specified text content.
    *   `Copy`: Creates a copy of an existing file.
    *   `Delete`: Moves a file to the trash or permanently deletes it.
    *   `Move`: Moves a file between folders.
    *   `Share`: Manages permissions for a file (sharing with users, groups, domains, or anyone).
    *   `Update`: Updates file metadata (e.g., name, description) or content (for specific types).
*   **Folder**
    *   `Create`: Creates a new folder.
    *   `Delete`: Moves a folder to the trash or permanently deletes it.
    *   `Share`: Manages permissions for a folder.
*   **File/Folder** (Combined Resource for Search)
    *   `Search`: Finds files and folders based on various criteria (name, content, type, parent, etc.) using the Google Drive query language.
*   **Shared Drive** (Requires appropriate Workspace permissions)
    *   `Create`: Creates a new Shared Drive.
    *   `Delete`: Deletes a Shared Drive.
    *   `Get`: Retrieves metadata for a specific Shared Drive.
    *   `Get Many`: Lists Shared Drives the user has access to.
    *   `Update`: Updates metadata for a Shared Drive.

## Common Parameters

*   **Resource**: `File`, `Folder`, `File/Folder`, `Shared Drive`.
*   **Operation**: The specific action (e.g., `upload`, `download`, `search`, `create`, `share`).
*   **File ID / Folder ID / Shared Drive ID**: The unique identifier for the item being acted upon (required for most operations except `Create`, `Search`, `Get Many`).
*   **Name / Title**: Used for creating or renaming items.
*   **Parent Folder ID**: Specifies the destination folder for `Upload`, `Create Folder`, `Move`, `Copy`.
*   **Return All / Limit**: Controls pagination for `Search` and `Get Many` operations.

### For File Upload:
*   **Binary Property**: Name of the binary property in the input item containing the file data (default: `data`).
*   **File Name**: The name for the uploaded file.
*   **MIME Type**: (Optional) Specify the MIME type; often inferred.

### For File Download:
*   **Destination**: `Data` (output binary data in workflow) or `File` (save to local disk).
*   **File Name (Local)**: (If Destination is `File`) Path to save the downloaded file.

### For Search:
*   **Query**: Search string using Google Drive query language (e.g., `name contains 'report' and mimeType='application/pdf'`).
*   **Fields to Return**: Specify which metadata fields to include in the results.
*   **Spaces**: Search within `drive` (My Drive and Shared Drives) or `appDataFolder`.

### For Share:
*   **Role**: `reader`, `writer`, `commenter`, `owner`.
*   **Type**: `user`, `group`, `domain`, `anyone`.
*   **Email Address / Domain**: Identifier for the user, group, or domain to share with.

## Output Data

*   **Upload/Create/Copy/Update**: Returns metadata for the created/modified file or folder.
*   **Download (Data)**: Returns an item with the file content in the specified binary property.
*   **Download (File)**: Returns metadata about the saved local file.
*   **Search/Get Many**: Returns an array of file/folder/drive metadata objects.
*   **Delete/Share**: Returns a success confirmation or details about the permission change.

## JSON Structure Example (Conceptual - Upload File)

```json
{
  "parameters": {
    "resource": "file",
    "operation": "upload",
    "binaryPropertyName": "data",
    "options": {
      "name": "={{ $binary.data.fileName || \"uploaded_file.dat\" }}",
      "parent": "={{ $json.destinationFolderId }}" // Optional: ID of the parent folder
    }
  },
  "name": "Upload to Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4700,
    3900
  ],
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "YOUR_GOOGLE_DRIVE_CREDENTIAL_ID",
      "name": "My Google Drive"
    }
  }
}
```

## JSON Structure Example (Conceptual - Search Files)

```json
{
  "parameters": {
    "resource": "fileFolder", // Note: Resource name might vary slightly in older/newer versions
    "operation": "search",
    "query": "name contains \'{{ $json.searchTerm }}\' and modifiedTime > \'{{ $now.minus({days: 7}).toISO() }}\'",
    "returnAll": true,
    "options": {
      "fields": "files(id, name, mimeType, webViewLink)"
    }
  },
  "name": "Search Recent Drive Files",
  "type": "n8n-nodes-base.googleDrive",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4800,
    4000
  ],
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "YOUR_GOOGLE_DRIVE_CREDENTIAL_ID",
      "name": "My Google Drive"
    }
  }
}
```

---

## 98. GoogleDriveTrigger.md ---

# n8n-nodes-base.googleDriveTrigger

## Description

The Google Drive Trigger node starts a workflow when specific events occur in a connected Google Drive account. It monitors for changes like new files or folders being created or updated within a specified folder or the entire drive.

## Credentials

Requires Google Drive credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Drive API** and authorizing n8n to access and monitor the user's Google Drive files and folders.

## Events

The node typically triggers on events like:
*   **File Created**: When a new file appears in the monitored location.
*   **File Updated**: When an existing file's content or metadata is modified.
*   **Folder Created**: When a new folder appears.
*   *(Specific events might vary based on node version and configuration)*

## Common Parameters

*   **Events**: Select the type of event(s) to monitor (e.g., `File Created`, `File Updated`).
*   **Folder ID**: (Optional) The ID of the specific Google Drive folder to monitor. If left empty, it might monitor the root 'My Drive' or require further specification.
*   **Watch Subfolders**: (Boolean, often default true) Whether to monitor events within subfolders of the specified Folder ID.
*   **Include Shared Drives**: (Boolean) Whether to monitor events within Shared Drives the user has access to (requires appropriate permissions).
*   **Additional Options**:
    *   **Include File Content**: (Boolean, for File Created/Updated) Whether to download and include the file's content (as binary data) in the trigger output. Be cautious with large files.
    *   **Metadata Fields**: Specify which file/folder metadata fields to return in the output.

## Output Data

When triggered, the node outputs an item containing:
*   **Event Type**: The specific event that triggered the workflow (e.g., `file.created`).
*   **File/Folder Metadata**: An object containing details about the file or folder involved in the event (ID, name, MIME type, parent folders, modification time, owner, etc., depending on the requested fields).
*   **Binary Data**: If `Include File Content` is enabled, the file's content will be included in a binary property (commonly named `data`).

## Behavior Notes

*   **Polling**: This trigger typically works by periodically checking Google Drive for changes (polling). The frequency depends on the n8n instance configuration and workflow state.
*   **Manual Execution**: Running the workflow manually usually fetches the *most recent* event matching the criteria. If no matching event has occurred since the last check or within a certain timeframe, it might return nothing or an error.
*   **Activation**: Once activated, the workflow runs automatically whenever a new matching event is detected during polling.

## JSON Structure Example (Conceptual - Trigger on New File)

```json
{
  "parameters": {
    "events": [
      "fileCreated"
    ],
    "options": {
      "folderId": "={{ $json.watchFolderId }}", // ID of the folder to watch
      "watchSubfolders": true,
      "includeFileContent": false // Optionally set to true to get file content
    }
  },
  "name": "Google Drive Trigger",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    4900,
    4100
  ],
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "YOUR_GOOGLE_DRIVE_CREDENTIAL_ID",
      "name": "My Google Drive Trigger"
    }
  }
}
```

---

## 99. GoogleGmail.md ---

# n8n-nodes-base.googleGmail

## Description

The Gmail node allows interaction with the Gmail API to manage emails, drafts, labels, and threads within a user's Gmail account. It can be used to send emails, read emails, manage labels, organize threads, and create drafts.

## Credentials

Requires Google credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Gmail API** and authorizing n8n to access and manage the user's Gmail mailbox.

## Resources and Operations

The node supports several resources:

*   **Draft**
    *   `Create`: Creates a new email draft.
    *   `Delete`: Deletes an existing draft.
    *   `Get`: Retrieves a specific draft.
    *   `Get Many`: Lists drafts in the mailbox.
*   **Label**
    *   `Create`: Creates a new label.
    *   `Delete`: Deletes an existing label.
    *   `Get`: Retrieves a specific label.
    *   `Get Many`: Lists all labels.
*   **Message**
    *   `Send`: Sends an email immediately.
    *   `Get`: Retrieves a specific email message.
    *   `Get Many`: Lists messages matching criteria (e.g., query, labels).
    *   `Delete`: Moves a message to the trash.
    *   `Add Label`: Adds one or more labels to a message.
    *   `Remove Label`: Removes one or more labels from a message.
    *   `Mark as Read`: Marks a message as read.
    *   `Mark as Unread`: Marks a message as unread.
    *   `Reply`: Sends a reply to a specific message (creates a new message in the same thread).
*   **Thread**
    *   `Get`: Retrieves a specific thread (conversation).
    *   `Get Many`: Lists threads matching criteria.
    *   `Add Label`: Adds one or more labels to all messages in a thread.
    *   `Remove Label`: Removes one or more labels from all messages in a thread.
    *   `Trash`: Moves a thread (all its messages) to the trash.
    *   `Untrash`: Moves a thread out of the trash.
    *   `Delete`: Permanently deletes a thread (must be in trash first).
    *   `Reply`: Sends a reply within a specific thread (same as Message Reply).

## Common Parameters

*   **Resource**: `Draft`, `Label`, `Message`, `Thread`.
*   **Operation**: The specific action (e.g., `send`, `getMany`, `create`, `addLabel`).
*   **Message ID / Draft ID / Label ID / Thread ID**: The unique identifier for the item being acted upon.
*   **Return All / Limit**: Controls pagination for `Get Many` operations.

### For Message Send/Create Draft:
*   **To / CC / BCC**: Email addresses of recipients.
*   **Subject**: Email subject line.
*   **Body Type**: `Text` or `HTML`.
*   **Text / HTML**: The email body content.
*   **Attachments**: Specify binary property containing attachments (e.g., `data`).
*   **Options**:
    *   `From`: Specify sender address (if authorized).
    *   `Reply To`: Specify reply-to address.
    *   `Thread ID`: (For Send/Reply) Associate with an existing thread.

### For Message Get Many:
*   **Query**: Search string using Gmail search operators (e.g., `from:user@example.com is:unread`).
*   **Label IDs**: Filter messages by label(s).
*   **Include Spam/Trash**: (Boolean) Whether to include messages from Spam or Trash folders.
*   **Format**: `Full`, `Metadata`, `Minimal`, `Raw` (controls how much message detail is returned).

### For Label Operations:
*   **Label Name**: Name for creating or identifying labels.
*   **Label IDs**: List of label IDs to add or remove.

## Output Data

*   **Send/Create**: Returns metadata of the sent message or created draft.
*   **Get/Get Many**: Returns an array of message/draft/label/thread objects with requested details.
*   **Label/Modify Operations**: Returns success confirmation or details about the modified item.
*   **Delete/Trash**: Returns success confirmation.

## JSON Structure Example (Conceptual - Send Email)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "send",
    "to": "={{ $json.recipientEmail }}",
    "subject": "Workflow Update: {{ $json.status }}",
    "text": "Details:\n{{ $json.details }}",
    "options": {
      "attachments": "={{ $binary.report ? \"report\" : undefined }}" // Name of binary property with attachment
    }
  },
  "name": "Send Gmail Notification",
  "type": "n8n-nodes-base.googleGmail",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5000,
    4200
  ],
  "credentials": {
    "googleOAuth2Api": {
      "id": "YOUR_GMAIL_CREDENTIAL_ID",
      "name": "My Gmail Account"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get Unread Messages)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "getMany",
    "query": "is:unread",
    "limit": 10,
    "options": {
      "format": "metadata", // Get only headers and basic info
      "labelIds": [
        "INBOX"
      ]
    }
  },
  "name": "Get Unread Inbox Emails",
  "type": "n8n-nodes-base.googleGmail",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5100,
    4300
  ],
  "credentials": {
    "googleOAuth2Api": {
      "id": "YOUR_GMAIL_CREDENTIAL_ID",
      "name": "My Gmail Account"
    }
  }
}
```

---

## 100. GoogleSheets.md ---

# n8n-nodes-base.googleSheets

## Description

The Google Sheets node enables interaction with Google Sheets spreadsheets. It allows reading data from, writing data to, creating, deleting, and modifying sheets and entire spreadsheet documents within Google Drive.

## Credentials

Requires Google credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Sheets API** and **Google Drive API** (for document-level operations like create/delete) and authorizing n8n.

## Resources and Operations

The node organizes operations by resource:

*   **Document** (The Spreadsheet File)
    *   `Create`: Creates a new blank spreadsheet document.
    *   `Delete`: Deletes an existing spreadsheet document.
*   **Sheet Within Document** (A specific tab/sheet)
    *   `Append Row`: Adds one or more new rows after the last row containing data in a specified sheet.
    *   `Update Row`: Modifies the data within an existing row, identified by its row index or a lookup value.
    *   `Append or Update Row`: Combines Append and Update. If a row matching a lookup criterion exists, it updates it; otherwise, it appends a new row.
    *   `Get Row(s)`: Retrieves data from a specified range or the entire sheet.
    *   `Clear`: Removes all data from a specified range or the entire sheet, leaving formatting intact.
    *   `Create`: Adds a new sheet (tab) to an existing spreadsheet document.
    *   `Delete`: Removes a sheet (tab) from a spreadsheet document.
    *   `Delete Rows or Columns`: Deletes specified rows or columns within a sheet.

## Common Parameters

*   **Resource**: `Document` or `Sheet Within Document`.
*   **Operation**: The specific action (e.g., `create`, `appendRow`, `getRow`).
*   **Spreadsheet ID**: The unique ID of the Google Sheets document (found in the URL).
*   **Sheet Name**: The name of the target sheet (tab) within the spreadsheet.
*   **Range**: A1 notation specifying the cells to read from or write to (e.g., `A1`, `A:C`, `Sheet1!B2:D5`). Often optional, defaulting to the entire sheet or the first available row/column depending on the operation.
*   **Options** (Vary significantly by operation):
    *   `Value Input Mode`: `RAW` (input treated as literal strings) or `USER_ENTERED` (input interpreted as if typed by a user, allowing formulas, dates, etc.). Common for write operations.
    *   `Value Render Option`: How values should be formatted when read (e.g., `FORMATTED_VALUE`, `UNFORMATTED_VALUE`, `FORMULA`). Common for `Get Row(s)`.
    *   `Lookup Column`: The column to check for existing values in `Append or Update Row`.
    *   `Row Index / Column Index`: Specific row or column numbers for `Update Row`, `Delete Rows or Columns`.
    *   `Mode`: `Columns` or `Rows` (how data from n8n items maps to the sheet).
    *   `Include Header`: (Boolean) Whether the first row is a header row.

## Input Data

*   For `Append Row`, `Update Row`, `Append or Update Row`: Expects input items where JSON properties correspond to column headers or positions.
*   For `Create Document/Sheet`: May use input data for naming.

## Output Data

*   `Get Row(s)`: Returns an array of items, each representing a row, with properties named after the header row or column letters/indices.
*   `Append/Update/Create/Delete`: Typically returns information about the operation's success, the range affected, or metadata of the created/modified item.

## JSON Structure Example (Conceptual - Append Row)

```json
{
  "parameters": {
    "resource": "sheet", // May be "sheetWithinDocument" in newer versions
    "operation": "append", // May be "appendRow" in newer versions
    "spreadsheetId": "={{ $json.sheetId }}",
    "sheetName": "Leads",
    "options": {
      "valueInputMode": "USER_ENTERED",
      "values": {
        "Name": "={{ $json.name }}",
        "Email": "={{ $json.email }}",
        "Timestamp": "={{ $now.toISO() }}"
      }
    }
  },
  "name": "Append Lead to Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5200,
    4400
  ],
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
      "name": "My Google Sheets"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get Rows)

```json
{
  "parameters": {
    "resource": "sheet",
    "operation": "read", // May be "getRow" in newer versions
    "spreadsheetId": "={{ $json.sheetId }}",
    "sheetName": "Data",
    "range": "A1:D", // Read columns A to D from row 1 downwards
    "options": {
      "valueRenderOption": "FORMATTED_VALUE",
      "includeHeader": true
    }
  },
  "name": "Get Data from Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5300,
    4500
  ],
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
      "name": "My Google Sheets"
    }
  }
}
```

---

## 101. GoogleSheetsTrigger.md ---

# n8n-nodes-base.googleSheetsTrigger

## Description

The Google Sheets Trigger node starts a workflow when a row is added or updated in a specified Google Sheet. It monitors a sheet for changes and triggers the workflow with the data from the affected row.

## Credentials

Requires Google credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Sheets API** and authorizing n8n to read the specified spreadsheet.

## Events

The node can trigger on the following events:
*   **Row Added**: Triggers when one or more new rows are detected below the last row with data.
*   **Row Updated**: Triggers when data in one or more existing rows changes (requires specifying which columns to watch).
*   **Row Added or Updated**: Triggers on either of the above events.

## Common Parameters

*   **Spreadsheet ID**: The unique ID of the Google Sheets document to monitor.
*   **Sheet Name**: The name of the specific sheet (tab) within the spreadsheet to monitor.
*   **Events**: Select the type of event(s) to trigger on (`Row Added`, `Row Updated`, `Row Added or Updated`).
*   **Columns To Watch**: (Required for `Row Updated` and `Row Added or Updated`) A comma-separated list of column letters (e.g., `A,C,F`) or names (if `Include Header` is true) to monitor for changes. The trigger fires if any of the watched columns in a row are modified.
*   **Include Header**: (Boolean) Specifies if the first row of the sheet should be treated as a header row. If true, the output data will use header names as keys; otherwise, it uses column letters.
*   **Options**:
    *   `Polling Interval`: (Set globally or per workflow) How often n8n checks the sheet for changes.
    *   `Include Empty Rows/Columns`: (Boolean) Whether to include rows/columns that appear empty.

## Output Data

When triggered, the node outputs one or more items, each representing a row that was added or updated. The item's JSON data contains key-value pairs corresponding to the columns in the sheet:
*   If `Include Header` is true: Keys are the header names from the first row.
*   If `Include Header` is false: Keys are the column letters (A, B, C, ...).
*   The values are the cell contents from the triggered row.

## Behavior Notes

*   **Polling**: This trigger works by periodically checking the specified Google Sheet for changes based on the configured polling interval.
*   **State Management**: The node keeps track of the sheet's state (e.g., number of rows, last modified times of watched cells) between polls to detect changes.
*   **Manual Execution**: Running the workflow manually typically fetches the *most recent* row(s) that were added or updated since the last check (or based on initial state if run for the first time). It might return multiple rows if several were added/updated between polls.
*   **Activation**: Once activated, the workflow runs automatically whenever a new matching event (row added/updated) is detected during polling.

## JSON Structure Example (Conceptual - Trigger on New Row)

```json
{
  "parameters": {
    "spreadsheetId": "={{ $json.sheetId }}",
    "sheetName": "Incoming Leads",
    "events": [
      "rowAdded"
    ],
    "options": {
      "includeHeader": true
    }
  },
  "name": "Google Sheets Trigger",
  "type": "n8n-nodes-base.googleSheetsTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5400,
    4600
  ],
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
      "name": "My Google Sheets Trigger"
    }
  }
}
```

## JSON Structure Example (Conceptual - Trigger on Updated Row in Specific Columns)

```json
{
  "parameters": {
    "spreadsheetId": "={{ $json.sheetId }}",
    "sheetName": "Task Status",
    "events": [
      "rowUpdated"
    ],
    "columnsToWatch": "Status,Completion Date", // Watch columns named "Status" and "Completion Date"
    "options": {
      "includeHeader": true
    }
  },
  "name": "Google Sheets Update Trigger",
  "type": "n8n-nodes-base.googleSheetsTrigger",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5500,
    4700
  ],
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
      "name": "My Google Sheets Trigger"
    }
  }
}
```

---

## 102. Googleslides.md ---

# n8n Node: Google Slides

The Google Slides node (`n8n-nodes-base.googleslides`) allows you to automate tasks involving Google Slides presentations directly within your n8n workflows. You can create new presentations, retrieve information about existing ones, get specific pages or thumbnails, and even replace text within slides.

## Credentials

To use this node, you need to configure Google Cloud credentials in n8n that grant access to the Google Slides API. Refer to the official n8n documentation for guidance on setting up general [Google credentials](https://docs.n8n.io/credentials/google/). This typically involves enabling the Google Slides API in your Google Cloud project, creating appropriate credentials (like OAuth 2.0 Client ID or a service account), and providing these details to n8n.

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters such as the presentation ID, page details, or text replacements might be automatically populated or directed by the AI agent based on the workflow context. More details on this can be found in the n8n AI tool parameters documentation.

## Operations

The node supports the following operations, categorized by resource type:

*   **Page**
    *   **Get a page:** Retrieves details about a specific page (slide) within a presentation.
    *   **Get a thumbnail:** Generates and retrieves a thumbnail image for a specific page.
*   **Presentation**
    *   **Create a presentation:** Creates a new, blank Google Slides presentation.
    *   **Get a presentation:** Retrieves metadata and details about an existing presentation.
    *   **Get presentation slides:** Retrieves a list of all pages (slides) within a specified presentation.
    *   **Replace text in a presentation:** Finds and replaces text across one or more slides in a presentation.

## Input Fields

Common input fields depend on the selected operation and may include:

*   **Presentation ID:** The unique identifier of the Google Slides presentation (required for most operations except Create).
*   **Page ID:** The unique identifier of a specific page (slide) within the presentation (for Page operations).
*   **Title:** The title for a new presentation (for Create operation).
*   **Text to Find:** The text string to search for (for Replace Text operation).
*   **Replacement Text:** The text string to replace the found text with (for Replace Text operation).
*   **Thumbnail Properties (Optional):** Options to control the size and format of the generated thumbnail.
*   **Fields (Optional):** Specify which fields to return for Get operations.

## Output

The output varies based on the operation:

*   **Get/Create Presentation:** Returns details about the presentation (ID, title, etc.).
*   **Get Page/Slides:** Returns details about the requested page(s) (ID, layout, elements, etc.).
*   **Get Thumbnail:** Returns data related to the thumbnail, potentially including a URL or binary data depending on n8n's implementation.
*   **Replace Text:** May return information about the number of replacements made.

## Alternative Operations via HTTP Request

For Google Slides API features not directly available as node operations (e.g., creating complex slides, managing comments, updating layouts), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

Leverage your configured Google credentials within the HTTP Request node:

1.  Set **Authentication** to `Predefined Credential Type`.
2.  Select `Google Slides` (or your generic Google credential type) as the **Credential Type**.
3.  Choose your configured credential.

This enables custom calls to any endpoint in the [Google Slides API](https://developers.google.com/slides/api/reference/rest).

## Resources

*   [n8n Google Slides Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googleslides/)
*   [Google Slides API Documentation](https://developers.google.com/slides/api)
*   [n8n Google Credentials Documentation](https://docs.n8n.io/credentials/google/)

---

## 103. GoogleTasks.md ---

# n8n-nodes-base.googleTasks

## Description

The Google Tasks node allows interaction with the Google Tasks API. It enables creating, retrieving, updating, and deleting tasks and task lists within a user's Google account.

## Credentials

Requires Google credentials (OAuth2):
*   **OAuth2**: Requires setting up OAuth 2.0 credentials within the Google Cloud Console for the **Google Tasks API** and authorizing n8n.

## Resources and Operations

The node primarily focuses on the **Task** resource:

*   **Task**
    *   `Add` (or `Create`): Adds a new task to a specified task list.
    *   `Delete`: Deletes a specific task.
    *   `Get`: Retrieves details of a specific task.
    *   `Get All`: Retrieves all tasks from a specified task list, with options for filtering (e.g., by completion status, due date).
    *   `Update`: Modifies an existing task (e.g., title, notes, due date, status).

*   **Task List** (Operations might be available in some versions or require HTTP Request node)
    *   `Get All`: Retrieve all task lists.
    *   `Create`: Create a new task list.
    *   `Delete`: Delete a task list.
    *   `Update`: Update a task list's title.

## Common Parameters

*   **Resource**: `Task` (or potentially `TaskList`).
*   **Operation**: The action to perform (e.g., `add`, `getAll`, `update`).
*   **Task List ID**: The identifier for the task list to operate on. Often selectable from a dropdown or specified via an expression. The default list is usually available.
*   **Task ID**: The unique identifier for a specific task (required for `Get`, `Update`, `Delete`).

### For Task Add/Update:
*   **Title**: The name or description of the task.
*   **Notes**: Additional details about the task.
*   **Due Date**: The date the task is due (ISO 8601 format, e.g., `YYYY-MM-DDTHH:mm:ss.sssZ` or just `YYYY-MM-DD`).
*   **Status**: `needsAction` or `completed`.
*   **Parent Task ID**: ID of the parent task if creating a subtask.
*   **Previous Task ID**: ID of the task after which the new/updated task should be positioned.

### For Task Get All:
*   **Completed Max / Min**: Filter tasks based on completion date.
*   **Due Max / Min**: Filter tasks based on due date.
*   **Updated Min**: Filter tasks based on last update time.
*   **Show Completed / Hidden**: (Boolean) Control visibility of completed or hidden tasks.
*   **Return All / Limit**: Control pagination.

## Output Data

*   `Get`/`Get All`: Returns an array of task objects containing details like `id`, `title`, `notes`, `status`, `due`, `completed`, `updated`, etc.
*   `Add`/`Update`: Returns the created or updated task object.
*   `Delete`: Returns a success confirmation.

## JSON Structure Example (Conceptual - Add Task)

```json
{
  "parameters": {
    "resource": "task",
    "operation": "add",
    "taskListId": "@default", // Or specific Task List ID
    "title": "={{ $json.taskTitle }}",
    "options": {
      "notes": "={{ $json.taskDetails }}",
      "due": "={{ $json.dueDate }}" // Expects ISO 8601 format
    }
  },
  "name": "Add Google Task",
  "type": "n8n-nodes-base.googleTasks",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5600,
    4800
  ],
  "credentials": {
    "googleTasksOAuth2Api": {
      "id": "YOUR_GOOGLE_TASKS_CREDENTIAL_ID",
      "name": "My Google Tasks"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get Incomplete Tasks)

```json
{
  "parameters": {
    "resource": "task",
    "operation": "getAll",
    "taskListId": "@default",
    "options": {
      "showCompleted": false,
      "returnAll": true
    }
  },
  "name": "Get Incomplete Tasks",
  "type": "n8n-nodes-base.googleTasks",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5700,
    4900
  ],
  "credentials": {
    "googleTasksOAuth2Api": {
      "id": "YOUR_GOOGLE_TASKS_CREDENTIAL_ID",
      "name": "My Google Tasks"
    }
  }
}
```

---

## 104. Googletranslate.md ---

# n8n Node: Google Translate

The Google Translate node (`n8n-nodes-base.googletranslate`) enables you to integrate Google's machine translation capabilities into your n8n workflows. It allows you to automatically translate text between thousands of language pairs, making it useful for multilingual communication, content localization, and data processing tasks.

## Credentials

To use this node, you need to configure Google Cloud credentials in n8n, specifically for the Google Cloud Translation API. Refer to the official n8n documentation for guidance on setting up [Google Translate credentials](https://docs.n8n.io/credentials/google/google-translate/). This typically involves enabling the Cloud Translation API in your Google Cloud project, creating appropriate credentials (like an API key or service account), and providing these details to n8n.

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters like the text to translate or the target language might be automatically populated or directed by the AI agent based on the workflow's context. More details on this can be found in the n8n AI tool parameters documentation.

## Operations

The node provides the following core operation:

*   **Language**
    *   **Translate data:** Translates the input text from a source language to a target language.

## Input Fields

For the `Translate data` operation, you typically need to provide:

*   **Text:** The text string or an array of strings you want to translate.
*   **Target Language:** The language code (e.g., `en` for English, `es` for Spanish, `fr` for French) into which the text should be translated.
*   **Source Language (Optional):** The language code of the input text. If omitted, Google Translate will attempt to automatically detect the source language.
*   **Format (Optional):** Specify if the input text is `Plain Text` or `HTML`. Translating HTML can help preserve formatting.
*   **Model (Optional):** Allows specifying a custom translation model if you have one configured in Google Cloud.

## Output

The output for the `Translate data` operation typically includes:

*   **translatedText:** The translated text in the target language.
*   **detectedSourceLanguage (Optional):** The language code of the source language detected by Google Translate, if the source language was not specified in the input.

## Alternative Operations via HTTP Request

If you need to access Google Cloud Translation API features not directly exposed by this node (e.g., batch translation, glossary usage), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

You can leverage your configured Google Translate credentials within the HTTP Request node:

1.  Set **Authentication** to `Predefined Credential Type`.
2.  Select `Google Translate` as the **Credential Type**.
3.  Choose your configured credential.

This allows you to make custom calls to the [Google Cloud Translation API endpoints](https://cloud.google.com/translate/docs/reference/rest).

## Resources

*   [n8n Google Translate Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googletranslate/)
*   [Google Cloud Translation API Documentation](https://cloud.google.com/translate/docs)
*   [n8n Google Credentials Documentation](https://docs.n8n.io/credentials/google/)

---

## 105. Googlevertexai_chatmodel.md ---

# n8n Node: Google Vertex Chat Model

**Node:** `n8n-nodes-langchain.lmchatgooglevertex`

**Type:** Sub-node (typically used within LangChain or AI Agent cluster nodes)

The Google Vertex Chat Model node allows you to leverage Google Cloud's advanced Vertex AI chat models (like Gemini) within conversational AI agents and LangChain setups in n8n.

## Credentials

To use this node, you need to configure Google Cloud credentials in n8n that grant access to the Vertex AI API. Refer to the official n8n documentation for guidance on setting up general [Google credentials](https://docs.n8n.io/credentials/google/). This involves enabling the Vertex AI API in your Google Cloud project, creating appropriate credentials (like OAuth 2.0 Client ID or a service account), and providing these details to n8n.

## Usage within AI Agents / LangChain

This node is designed as a sub-node, meaning it's typically used inside a larger structure like the [AI Agent node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/) or other LangChain-related nodes. It provides the language model component for these agents.

**Parameter Resolution:** Be aware that sub-nodes handle expressions differently than standard nodes. When processing multiple items, expressions in sub-nodes typically resolve only to the *first* input item, not iterating through each one.

## Node Parameters

*   **Credentials:** Select your pre-configured Google Cloud credential.
*   **Project ID:** Choose the Google Cloud Project ID associated with your Vertex AI setup. n8n attempts to load these dynamically, but you can also enter the ID manually.
*   **Model Name:** Select the specific Vertex AI chat model you want to use (e.g., `gemini-1.5-flash-001`, `gemini-1.5-pro-001`, `gemini-1.0-pro-002`, `chat-bison@002`). Refer to the official [Google Vertex AI Models documentation](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models) for a list of available models and their capabilities.

## Node Options

These parameters control the behavior of the model's response generation:

*   **Maximum Number of Tokens (`maxTokens`):** Sets the maximum number of tokens (roughly words or parts of words) the model can generate in its response. This limits the length of the completion.
*   **Sampling Temperature (`temperature`):** Controls the randomness of the output. A higher value (e.g., 0.8) makes the output more random and creative, while a lower value (e.g., 0.2) makes it more focused and deterministic. Defaults typically range around 0.7.
*   **Top K (`topK`):** Limits the selection pool for the next token to the K most likely tokens. A lower K makes the output more predictable.
*   **Top P (`topP`):** Selects the next token from a cumulative probability distribution. Tokens are chosen from the most probable ones whose cumulative probability exceeds P. A lower P value ignores less probable options, leading to more focused output.
*   **Safety Settings:** Allows configuration of content safety filters provided by Google's Gemini models. You can adjust thresholds for categories like Harassment, Hate Speech, Sexually Explicit, and Dangerous Content. Refer to [Gemini API safety settings](https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/configure-safety-attributes) for details.

## Output

When used within an agent or chain, this node provides the chat model's response (completion) based on the input prompt and conversation history managed by the parent node.

## Alternative Operations via HTTP Request

For accessing Vertex AI features not covered by this specific chat model node (e.g., batch predictions, custom model management, embeddings if not using the dedicated embeddings node), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Google Cloud credentials.

## Resources

*   [n8n Google Vertex Chat Model Node Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglevertex/)
*   [n8n Advanced AI Documentation](https://docs.n8n.io/advanced-ai/)
*   [Google Vertex AI Documentation](https://cloud.google.com/vertex-ai/docs)
*   [LangChain Google Vertex AI Documentation](https://python.langchain.com/v0.2/docs/integrations/chat/google_vertex_ai_palm/)
*   [n8n Google Credentials Documentation](https://docs.n8n.io/credentials/google/)

---

## 106. Gotify.md ---

# n8n-nodes-base.gotify

## Description

The Gotify node allows sending push notifications through a self-hosted Gotify server. It primarily focuses on creating (pushing) messages.

## Credentials

Requires Gotify credentials:
*   **Gotify API**: Needs the Base URL of your Gotify server (e.g., `https://gotify.example.com`) and an Application Token generated within Gotify for authentication.

## Resources and Operations

The node primarily operates on the **Message** resource:

*   **Message**
    *   `Create`: Pushes a new notification message to the Gotify server.
    *   `Delete`: Deletes messages from the server (requires message IDs).
    *   `Get All`: Retrieves messages stored on the server.

## Common Parameters (for Create Operation)

*   **Resource**: `Message`.
*   **Operation**: `Create`.
*   **Title**: The title of the push notification.
*   **Message**: The main body/content of the notification.
*   **Priority**: (Optional) An integer indicating the notification priority (defaults usually to 0 or normal priority). Higher numbers mean higher priority.
*   **Extras**: (Optional) Additional key-value pairs for client-specific features or data. Common extras include:
    *   `client::notification::click`: URL to open when the notification is clicked.
    *   `text::markdown`: Set to `true` if the message content is Markdown formatted.

## Input Data

*   The `Create` operation takes data for `Title`, `Message`, `Priority`, and `Extras` from the input item.

## Output Data

*   `Create`: Returns the details of the message that was successfully pushed, including its `id`, `appid`, `message`, `title`, `priority`, `date`, etc.
*   `Get All`: Returns an array of message objects.
*   `Delete`: Returns a success confirmation.

## JSON Structure Example (Conceptual - Send Notification)

```json
{
  "parameters": {
    "resource": "message",
    "operation": "create",
    "title": "Workflow Alert: {{ $json.status }}",
    "message": "Task '{{ $json.taskName }}' completed successfully.",
    "options": {
      "priority": 5, // Example priority
      "extras": {
        "client::notification::click": {
          "url": "={{ $json.detailsUrl }}"
        },
        "text::markdown": true // Indicate message is markdown
      }
    }
  },
  "name": "Send Gotify Notification",
  "type": "n8n-nodes-base.gotify",
  "typeVersion": 1, // Or higher, check node info
  "position": [
    5800,
    5000
  ],
  "credentials": {
    "gotifyApi": {
      "id": "YOUR_GOTIFY_CREDENTIAL_ID",
      "name": "My Gotify Server"
    }
  }
}
```

---

## 107. Grafana.md ---

# n8n Node: Grafana

The Grafana node (`n8n-nodes-base.grafana`) allows you to interact with your Grafana instance directly from n8n workflows. It enables automation for managing dashboards, teams, users, and team memberships within Grafana.

## Credentials

To use this node, you need to configure Grafana credentials in n8n. This typically involves creating an API Key or a Service Account Token within your Grafana instance that has the necessary permissions for the operations you intend to perform. Refer to the official n8n documentation for detailed guidance on setting up [Grafana credentials](https://docs.n8n.io/integrations/builtin/credentials/grafana/).

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters such as dashboard IDs, user details, or team names might be automatically populated or directed by the AI agent based on the workflow context. More details on this can be found in the n8n AI tool parameters documentation.

## Operations

The node supports a wide range of operations for managing Grafana resources:

*   **Dashboard**
    *   **Create a dashboard:** Creates a new dashboard based on a provided JSON model.
    *   **Delete a dashboard:** Deletes a dashboard using its UID.
    *   **Get a dashboard:** Retrieves the JSON model of a dashboard by its UID.
    *   **Get all dashboards:** Retrieves a list of all dashboards accessible to the authenticated user/token.
    *   **Update a dashboard:** Updates an existing dashboard using a provided JSON model.
*   **Team**
    *   **Create a team:** Creates a new team.
    *   **Delete a team:** Deletes a team by its ID.
    *   **Get a team:** Retrieves details of a specific team by its ID.
    *   **Retrieve all teams:** Gets a list of all teams.
    *   **Update a team:** Updates the name or email of an existing team.
*   **Team Member**
    *   **Add a member to a team:** Adds a user to a specific team.
    *   **Retrieve all team members:** Gets a list of members for a specific team.
    *   **Remove a member from a team:** Removes a user from a specific team.
*   **User**
    *   **Delete a user from the current organization:** Deletes a user by their ID.
    *   **Retrieve all users in the current organization:** Gets a list of all users.
    *   **Update a user in the current organization:** Updates details (like email, name, login) for a specific user.

## Input Fields

Common input fields vary depending on the selected resource and operation:

*   **Dashboard UID/ID:** Required for Get, Delete, Update Dashboard operations.
*   **Dashboard JSON Model:** Required for Create, Update Dashboard operations.
*   **Team ID:** Required for Get, Delete, Update Team and Team Member operations.
*   **User ID:** Required for Add/Remove Team Member, Delete/Update User operations.
*   **Name, Email, Login:** Used for creating or updating Teams and Users.
*   **Filters/Query Parameters:** May be available for list operations (Get All Dashboards, Retrieve All Teams/Users/Members).

## Output

The output depends on the operation performed. Get operations return the requested object(s) (dashboard JSON, team details, user list, etc.). Create/Update operations typically return the details of the created/updated object. Delete operations often return a success message.

## Alternative Operations via HTTP Request

If you need to interact with Grafana API endpoints not directly supported by this node (e.g., managing annotations, data sources, alert rules), you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

Leverage your configured Grafana credentials within the HTTP Request node:

1.  Set **Authentication** to `Predefined Credential Type`.
2.  Select `Grafana` as the **Credential Type**.
3.  Choose your configured credential.

This allows you to make custom calls to any endpoint in the [Grafana HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/).

## Resources

*   [n8n Grafana Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.grafana/)
*   [n8n Grafana Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/grafana/)
*   [Grafana HTTP API Documentation](https://grafana.com/docs/grafana/latest/developers/http_api/)

---

## 108. Graphql.md ---

# n8n Node: GraphQL

The GraphQL node (`n8n-nodes-base.graphql`) provides a dedicated interface for sending queries and mutations to any GraphQL API endpoint directly from your n8n workflows.

[GraphQL](https://graphql.org/) is a query language for APIs and a runtime for fulfilling those queries with your existing data. This node simplifies interacting with GraphQL APIs compared to using the standard HTTP Request node for the same purpose.

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters like the endpoint URL, query, or authentication details might be automatically populated or directed by the AI agent based on the workflow context. More details on this can be found in the n8n AI tool parameters documentation.

## Node Parameters

*   **Authentication:**
    *   Select the authentication method required by the GraphQL API.
    *   Options typically include: None, Basic Auth, Header Auth, OAuth2, etc.
    *   If an authentication method other than `None` is selected, a **Credential for** field appears, allowing you to select or create the necessary credentials (e.g., API Key in header, username/password for Basic Auth).
*   **HTTP Request Method:**
    *   Choose the underlying HTTP method for sending the GraphQL request.
    *   **GET:** Sends the query as part of the URL (less common for mutations or complex queries).
    *   **POST:** Sends the query in the request body. This is the standard method for most GraphQL interactions.
        *   If POST is selected, you must also choose the **Request Format**:
            *   **GraphQL (Raw):** Sends the query directly as raw text in the body (content-type `application/graphql`).
            *   **JSON:** Sends the query within a JSON structure, typically `{"query": "...", "variables": {...}}` (content-type `application/json`).
*   **Endpoint:**
    *   Enter the full URL of the GraphQL API endpoint.
*   **Ignore SSL Issues:**
    *   Toggle this on to bypass SSL certificate validation errors. Use with caution, primarily for testing or internal networks with self-signed certificates.
*   **Query:**
    *   Enter the GraphQL query or mutation you want to execute. You can use n8n expressions here to dynamically insert values into your query or variables (if using JSON format).
*   **Response Format:**
    *   Choose how you want the API response data to be formatted in the node's output.
    *   **JSON:** The response body is parsed as JSON (standard for GraphQL).
    *   **String:** The response body is treated as a raw string. If selected, you must provide a **Response Data Property Name** where the string output will be stored.
*   **Headers:**
    *   Add any custom HTTP headers required by the API (beyond authentication headers handled by credentials). Enter as Name/Value pairs.

## Output

The node outputs the response received from the GraphQL API. If **Response Format** is set to JSON, the output will typically be a JSON object under the `data` or `errors` key, matching the structure defined by the GraphQL schema and your query.

## Resources

*   [n8n GraphQL Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql/)
*   [Introduction to GraphQL](https://graphql.org/learn/)

---

## 109. Harvest.md ---

# n8n-nodes-base.harvest

## Description

The Harvest node interacts with the Harvest API for time tracking, invoicing, expense tracking, and project management. It allows managing clients, contacts, projects, tasks, time entries, expenses, invoices, estimates, and users.

## Credentials

Requires Harvest API credentials:
*   **Harvest API**: Needs your Harvest Account ID and a Personal Access Token generated from your Harvest account settings (Developer Tools section).

## Resources and Operations

The node supports a wide range of resources and operations:

*   **Client**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Company**: `Get` (Retrieves company details for the authenticated user)
*   **Contact**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Estimate**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Expense**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Invoice**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Project**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Task**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Time Entries**: `Create (Duration)`, `Create (Start/End Time)`, `Delete`, `Delete External Reference`, `Get`, `Get All`, `Restart`, `Stop`, `Update`
*   **User**: `Create`, `Delete`, `Get`, `Get All`, `Get Authenticated User`, `Update`

## Common Parameters

Parameters vary significantly based on the selected Resource and Operation.

*   **Resource**: The type of Harvest object (e.g., `client`, `project`, `timeEntries`).
*   **Operation**: The action to perform (e.g., `create`, `getAll`, `update`).
*   **IDs**: Various identifiers like `Client ID`, `Project ID`, `Task ID`, `User ID`, `Time Entry ID`, `Invoice ID`, etc., are required for specific operations (`Get`, `Update`, `Delete`).
*   **Filters**: Used in `Get All` operations to narrow down results (e.g., `Is Active`, `Client ID`, `Updated Since`, `From Date`, `To Date`).
*   **Fields for Create/Update**: Specific fields relevant to the resource being created or updated (e.g., `Name`, `Address`, `Notes`, `Hours`, `Spent Date`, `Amount`, `Billable`, `Task ID`, `Project ID`).
*   **Return All / Limit**: Control pagination for `Get All` operations.

## Input Data

*   Create/Update operations typically map fields from the incoming n8n item to the corresponding Harvest fields.
*   IDs for Get/Update/Delete operations are often taken from incoming items or specified directly.

## Output Data

*   `Get`/`Get All`: Returns an array of objects representing the requested Harvest resources (clients, projects, time entries, etc.).
*   `Create`/`Update`: Returns the object representing the newly created or updated Harvest resource.
*   `Delete`: Returns a success confirmation.
*   `Start`/`Stop`/`Restart` (Time Entry): Returns the updated time entry object.

## JSON Structure Example (Conceptual - Create Time Entry - Duration)

```json
{
  "parameters": {
    "resource": "timeEntries",
    "operation": "createDuration",
    "projectId": "={{ $json.projectId }}",
    "taskId": "={{ $json.taskId }}",
    "spentDate": "={{ $now.toFormat('yyyy-MM-dd') }}",
    "hours": "={{ $json.durationHours }}",
    "options": {
      "notes": "={{ $json.entryNotes }}"
    }
  },
  "name": "Log Harvest Time (Duration)",
  "type": "n8n-nodes-base.harvest",
  "typeVersion": 1, // Check actual version
  "position": [
    5900,
    5100
  ],
  "credentials": {
    "harvestApi": {
      "id": "YOUR_HARVEST_CREDENTIAL_ID",
      "name": "My Harvest Account"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get All Active Projects)

```json
{
  "parameters": {
    "resource": "project",
    "operation": "getAll",
    "filters": {
      "isActive": true
    },
    "options": {
      "returnAll": true
    }
  },
  "name": "Get Active Harvest Projects",
  "type": "n8n-nodes-base.harvest",
  "typeVersion": 1, // Check actual version
  "position": [
    6000,
    5200
  ],
  "credentials": {
    "harvestApi": {
      "id": "YOUR_HARVEST_CREDENTIAL_ID",
      "name": "My Harvest Account"
    }
  }
}
```

---

## 110. HelpScout.md ---

# n8n-nodes-base.helpScout

## Description

The Help Scout node facilitates interaction with the Help Scout API, enabling automation of customer service tasks. It allows managing conversations, customers, mailboxes, and threads within Help Scout.

## Credentials

Requires Help Scout credentials:
*   **Help Scout API**: Typically uses OAuth2 for authentication, requiring authorization through Help Scout. An API Key option might also be available depending on the node version and Help Scout API version.

## Resources and Operations

The node supports several resources:

*   **Conversation**
    *   `Create`: Creates a new conversation in a specified mailbox.
    *   `Delete`: Deletes a specific conversation.
    *   `Get`: Retrieves details of a single conversation.
    *   `Get All`: Retrieves multiple conversations, often with filtering options (e.g., by mailbox, status, tag, assigned user).
*   **Customer**
    *   `Create`: Creates a new customer profile.
    *   `Get`: Retrieves details of a specific customer.
    *   `Get All`: Retrieves multiple customers, often with filtering options.
    *   `Get Customer Property Definitions`: Retrieves the custom fields defined for customers.
    *   `Update`: Updates an existing customer's details.
*   **Mailbox**
    *   `Get`: Retrieves details of a specific mailbox.
    *   `Get All`: Retrieves all mailboxes accessible by the authenticated user.
*   **Thread** (Often related to conversations)
    *   `Create Chat Thread`: Creates a new chat thread within a conversation.
    *   `Get All Chat Threads`: Retrieves chat threads for a conversation.

## Common Parameters

Parameters depend heavily on the Resource and Operation.

*   **Resource**: `conversation`, `customer`, `mailbox`, `thread`.
*   **Operation**: The action like `create`, `get`, `getAll`, `update`, `delete`.
*   **IDs**: `Conversation ID`, `Customer ID`, `Mailbox ID` are needed for specific operations.
*   **Mailbox ID**: Often required when creating or listing conversations.
*   **Customer Details (Create/Update)**: Fields like `First Name`, `Last Name`, `Email`, `Phone`, `Organization`, custom properties.
*   **Conversation Details (Create)**: `Subject`, `Mailbox ID`, `Customer Email`/`ID`, `Type` (email, phone, chat), `Status` (active, pending, closed), `Assign To User ID`, `Tags`, `Threads` (including initial message body).
*   **Filters (Get All)**: Parameters like `Mailbox`, `Status`, `Tag`, `Query` (search term), `Sort Field`, `Sort Order`.
*   **Return All / Limit**: Control pagination.

## Input Data

*   Data for creating/updating resources is mapped from input items.
*   IDs for specific operations are often derived from previous nodes or specified directly.

## Output Data

*   `Get`/`Get All`: Returns an array of objects representing the requested Help Scout resources (conversations, customers, etc.).
*   `Create`/`Update`: Returns the object representing the created or updated resource.
*   `Delete`: Returns a success confirmation.

## JSON Structure Example (Conceptual - Create Conversation)

```json
{
  "parameters": {
    "resource": "conversation",
    "operation": "create",
    "mailboxId": "={{ $json.mailboxId }}", // Required Mailbox ID
    "subject": "={{ $json.subject }}",
    "customer": {
      "email": "={{ $json.customerEmail }}"
    },
    "type": "email",
    "status": "active",
    "threads": [
      {
        "type": "customer", // Initial message from customer
        "customer": {
          "email": "={{ $json.customerEmail }}"
        },
        "text": "={{ $json.initialMessageBody }}"
      }
    ],
    "options": {
      "tags": [
        "new-request",
        "urgent"
      ]
    }
  },
  "name": "Create Help Scout Ticket",
  "type": "n8n-nodes-base.helpScout",
  "typeVersion": 1, // Check actual version
  "position": [
    6100,
    5300
  ],
  "credentials": {
    "helpScoutApi": {
      "id": "YOUR_HELPSCOUT_CREDENTIAL_ID",
      "name": "My Help Scout Account"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get All Active Conversations in Mailbox)

```json
{
  "parameters": {
    "resource": "conversation",
    "operation": "getAll",
    "filters": {
      "mailbox": "={{ $json.targetMailboxId }}",
      "status": "active"
    },
    "options": {
      "returnAll": true
    }
  },
  "name": "Get Active Conversations",
  "type": "n8n-nodes-base.helpScout",
  "typeVersion": 1, // Check actual version
  "position": [
    6200,
    5400
  ],
  "credentials": {
    "helpScoutApi": {
      "id": "YOUR_HELPSCOUT_CREDENTIAL_ID",
      "name": "My Help Scout Account"
    }
  }
}
```

---

## 111. Heroku.md ---

# Heroku Integration

Based on the latest research, n8n does not offer an official built-in integration node for interacting with the Heroku platform's API.

The available documentation and resources primarily focus on deploying and hosting n8n instances *on* Heroku, rather than providing a node to manage Heroku applications, dynos, or other resources from within an n8n workflow.

Users seeking to automate Heroku tasks via n8n would likely need to:

1.  **Use the HTTP Request Node:** Interact directly with the [Heroku Platform API](https://devcenter.heroku.com/articles/platform-api-reference). This requires setting up authentication (usually an API key passed as a Bearer token in the Authorization header) and constructing requests according to the Heroku API documentation.
2.  **Explore Community Solutions:** Check the n8n community forums or GitHub for any user-created nodes or workflows designed for Heroku integration, although none were prominently found during the initial research.

For deploying n8n itself on Heroku, refer to n8n's hosting documentation or community guides specifically addressing that topic.

---

## 112. Homeassistant.md ---

# n8n Node: Home Assistant

The Home Assistant node (`n8n-nodes-base.homeassistant`) allows you to interact with your Home Assistant instance directly from n8n workflows. This enables automation of smart home devices and services managed by Home Assistant.

## Credentials

To use this node, you need to configure Home Assistant credentials in n8n. This typically involves generating a Long-Lived Access Token within your Home Assistant instance (Profile > Security > Create Token) and providing this token along with your Home Assistant instance URL to n8n. Refer to the official n8n documentation for detailed guidance on setting up [Home Assistant credentials](https://docs.n8n.io/integrations/builtin/credentials/home-assistant/).

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters such as entity IDs, service names, or state values might be automatically populated or directed by the AI agent based on the workflow context. More details on this can be found in the n8n AI tool parameters documentation.

## Operations

The node supports a variety of operations for interacting with Home Assistant:

*   **Camera Proxy**
    *   **Get the camera screenshot:** Retrieves a still image from a specified camera entity.
*   **Config**
    *   **Get the configuration:** Fetches the current Home Assistant configuration details.
    *   **Check the configuration:** Validates the Home Assistant configuration.
*   **Event**
    *   **Create an event:** Fires a custom event on the Home Assistant event bus.
    *   **Get all events:** Retrieves a list of available event types.
*   **Log**
    *   **Get a log for a specific entity:** Retrieves logbook entries related to a specific entity ID.
    *   **Get all logs:** Retrieves all logbook entries (potentially filtered by time).
*   **Service**
    *   **Call a service within a specific domain:** Executes a service call (e.g., `light.turn_on`, `switch.toggle`, `notify.send_message`). Requires specifying the Domain, Service, and optionally Entity IDs and Service Data (payload).
    *   **Get all services:** Retrieves a list of all available services and their domains.
*   **State**
    *   **Create a new record, or update the current one if it already exists (upsert):** Sets or updates the state of a specific entity ID.
    *   **Get a state for a specific entity:** Retrieves the current state and attributes of a specific entity ID.
    *   **Get all states:** Retrieves the current state and attributes of all entities.
*   **Template**
    *   **Create a template:** Renders a Home Assistant template string.

## Input Fields

Common input fields vary depending on the selected resource and operation:

*   **Entity ID:** The unique identifier for a Home Assistant entity (e.g., `light.living_room`, `sensor.temperature`, `camera.front_door`). Required for many state, log, and service operations.
*   **Domain:** The category of the service (e.g., `light`, `switch`, `notify`). Required for calling services.
*   **Service:** The specific action to perform within a domain (e.g., `turn_on`, `toggle`, `send_message`). Required for calling services.
*   **Service Data:** A JSON object containing parameters for the service call (e.g., `{"brightness": 255, "rgb_color": [255, 0, 0]}`).
*   **Event Type:** The name of the custom event to fire.
*   **Event Data:** A JSON object containing data to pass with the custom event.
*   **Template:** The Home Assistant template string to render.

## Output

The output depends on the operation performed. Get operations return the requested data (configuration, states, logs, events, services). Service calls might return the new state of affected entities or a success confirmation. Template rendering returns the rendered output.

## Resources

*   [n8n Home Assistant Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.homeassistant/)
*   [n8n Home Assistant Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/home-assistant/)
*   [Home Assistant Developer Documentation (Services, States, Events)](https://developers.home-assistant.io/docs/api/rest/)
*   [Home Assistant Templating Documentation](https://www.home-assistant.io/docs/configuration/templating/)

---

## 113. HttpRequest.md ---

# n8n-nodes-base.httpRequest

## Description

The HTTP Request node is a fundamental and highly versatile node in n8n. It allows workflows to interact with virtually any web service or API that follows REST principles by sending HTTP requests (GET, POST, PUT, PATCH, DELETE, etc.) and processing the responses. It can handle various authentication methods, request bodies, headers, query parameters, and response formats.

## Credentials

The node supports various authentication methods:

*   **None**: No authentication.
*   **Predefined Credential Type**: Uses existing credentials configured in n8n for supported services (e.g., using Airtable credentials to make a custom Airtable API call).
*   **Generic Credential Types**:
    *   `Basic Auth`: Uses Username and Password.
    *   `Header Auth`: Sends credentials via custom HTTP headers (e.g., API Key, Bearer Token).
    *   `OAuth1 API`: Handles OAuth1 authentication flow.
    *   `OAuth2 API`: Handles OAuth2 authentication flow (Authorization Code, Client Credentials, etc.).
    *   `Digest Auth`: Uses Digest access authentication.
    *   `Custom Auth`: For non-standard authentication methods (less common).
    *   `Query Auth`: Sends credentials as query parameters.

## Parameters

*   **Method**: The HTTP method to use (e.g., `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, `OPTIONS`).
*   **URL**: The target endpoint URL for the API request. Can use expressions.
*   **Authentication**: Select the authentication method (None, Predefined, Generic type).
*   **Send Query Parameters**: (Toggle) If enabled, allows specifying query parameters.
    *   **Specify Query Parameters**: `Using Fields Below` (Name/Value pairs) or `Using JSON`.
*   **Send Headers**: (Toggle) If enabled, allows specifying custom HTTP headers.
    *   **Specify Headers**: `Using Fields Below` (Name/Value pairs) or `Using JSON`.
*   **Send Body**: (Toggle) If enabled (usually for POST, PUT, PATCH), allows specifying the request body.
    *   **Body Content Type**: `Form URLencoded`, `Form-Data`, `JSON`, `n8n Binary File`, `Raw`.
    *   **Specify Body**: Depends on Content Type; can be `Using Fields Below`, `Using JSON`, `Using Single Field`, `Input Data Field Name` (for binary), or raw text input.
*   **Options** (Additional settings):
    *   **Array Format in Query Parameters**: How arrays are formatted (`No Brackets`, `Brackets Only`, `Brackets with Indices`).
    *   **Batching**: Configure `Items per Batch` and `Batch Interval` (ms) for handling large inputs.
    *   **Ignore SSL Issues**: (Boolean) Bypass SSL certificate validation (use with caution).
    *   **Lowercase Headers**: (Boolean) Convert response header names to lowercase.
    *   **Redirects**: Configure `Follow Redirects` (Boolean) and `Max Redirects`.
    *   **Response**: Configure response handling:
        *   `Include Response Headers and Status`: (Boolean) Include metadata alongside the body.
        *   `Never Error`: (Boolean) Treat non-2xx responses as success.
        *   `Response Format`: `Autodetect`, `File`, `JSON`, `Text`. Specify output field for `File` and `Text`.
    *   **Pagination**: Configure automatic pagination if the API supports it (requires specific response structure).
    *   **Proxy**: Specify a proxy URL.
    *   **Timeout**: Set request timeout in milliseconds.

## Input Data

*   The node typically uses data from incoming items to construct the URL, query parameters, headers, and body using n8n expressions (e.g., `={{ $json.userId }}`).
*   For binary uploads (`Form-Data` or `n8n Binary File` body type), it expects the binary data to be present in a specific field of the input item.

## Output Data

*   By default, outputs the response body (auto-detected or specified format like JSON, Text).
*   If `Include Response Headers and Status` is enabled, outputs an object containing `body`, `headers`, and `statusCode`.
*   If `Response Format` is `File` or `Text`, the output is placed in the specified field name.
*   If binary data is received (e.g., downloading a file), it will be included in the output item under the `binary` property.

## JSON Structure Example (Conceptual - GET Request)

```json
{
  "parameters": {
    "method": "GET",
    "url": "https://api.example.com/users/={{ $json.userId }}",
    "sendQueryParameters": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "includeDetails",
          "value": "true"
        }
      ]
    },
    "options": {
      "response": {
        "responseFormat": "json"
      }
    }
  },
  "name": "Get User Details",
  "type": "n8n-nodes-base.httpRequest",
  "typeVersion": 4.1, // Example version, check node info
  "position": [
    6300,
    5500
  ],
  "credentials": { // Optional, depending on authentication
    "httpHeaderAuth": {
      "id": "YOUR_HEADER_AUTH_ID",
      "name": "My API Key Auth"
    }
  }
}
```

## JSON Structure Example (Conceptual - POST Request with JSON Body)

```json
{
  "parameters": {
    "method": "POST",
    "url": "https://api.example.com/orders",
    "sendHeaders": true,
    "headerParameters": {
      "parameters": [
        {
          "name": "X-Request-ID",
          "value": "={{ $runIndex }}"
        }
      ]
    },
    "sendBody": true,
    "contentType": "json",
    "specifyBody": "json",
    "jsonBody": "={{ JSON.stringify({ orderId: $json.orderId, items: $json.items }) }}", // Send JSON body
    "options": {}
  },
  "name": "Create Order",
  "type": "n8n-nodes-base.httpRequest",
  "typeVersion": 4.1, // Example version, check node info
  "position": [
    6400,
    5600
  ],
  "credentials": {
    "oAuth2Api": {
      "id": "YOUR_OAUTH2_CREDENTIAL_ID",
      "name": "My Service OAuth2"
    }
  }
}
```

---

## 114. Hubspot.md ---

# n8n-nodes-base.hubspot

## Description

The HubSpot node provides comprehensive integration with the HubSpot CRM, Marketing, Sales, and Service Hubs. It allows automating various tasks by interacting with HubSpot objects like Contacts, Companies, Deals, Tickets, Engagements, Forms, and Contact Lists directly within n8n workflows.

## Credentials

Requires HubSpot credentials:
*   **HubSpot OAuth2 API**: Uses OAuth2 for authentication, requiring authorization through your HubSpot account.
*   **HubSpot Private App Token API**: Uses a Private App token generated within your HubSpot account's settings (Integrations > Private Apps).

## AI Tool Capability

This node can be utilized as a tool within an AI Agent, allowing the agent to interact with HubSpot data and perform actions based on conversational context or instructions.

## Resources and Operations

The node supports a wide array of resources and operations:

*   **Contact**
    *   `Create/Update`: Creates a new contact or updates an existing one based on email or other unique identifiers.
    *   `Delete`: Deletes a specific contact by ID.
    *   `Get`: Retrieves a contact by ID.
    *   `Get All`: Retrieves multiple contacts, with options for filtering and sorting.
    *   `Get Recently Created/Updated`: Retrieves contacts based on recent creation or modification time.
    *   `Search`: Searches for contacts based on specified criteria.
*   **Contact List**
    *   `Add Contact to List`: Adds a contact (by ID or email) to a specific static list (by ID).
    *   `Remove Contact from List`: Removes a contact from a specific static list.
*   **Company**
    *   `Create`: Creates a new company.
    *   `Delete`: Deletes a company by ID.
    *   `Get`: Retrieves a company by ID.
    *   `Get All`: Retrieves multiple companies.
    *   `Get Recently Created/Modified`: Retrieves recently created or modified companies.
    *   `Search by Domain`: Searches for companies based on their website domain.
    *   `Update`: Updates an existing company by ID.
*   **Deal**
    *   `Create`: Creates a new deal.
    *   `Delete`: Deletes a deal by ID.
    *   `Get`: Retrieves a deal by ID.
    *   `Get All`: Retrieves multiple deals.
    *   `Get Recently Created/Modified`: Retrieves recently created or modified deals.
    *   `Search`: Searches for deals based on criteria.
    *   `Update`: Updates an existing deal by ID.
*   **Engagement** (Notes, Calls, Emails, Meetings, Tasks)
    *   `Create`: Creates a new engagement (e.g., log a call, create a note).
    *   `Delete`: Deletes an engagement by ID.
    *   `Get`: Retrieves an engagement by ID.
    *   `Get All`: Retrieves multiple engagements, often associated with contacts, companies, or deals.
*   **Form**
    *   `Get All Fields`: Retrieves the fields defined for a specific HubSpot form.
    *   `Submit Data`: Submits data to a HubSpot form, simulating a form submission.
*   **Ticket**
    *   `Create`: Creates a new support ticket.
    *   `Delete`: Deletes a ticket by ID.
    *   `Get`: Retrieves a ticket by ID.
    *   `Get All`: Retrieves multiple tickets.
    *   `Update`: Updates an existing ticket by ID.

## Common Parameters

Parameters vary significantly based on the selected Resource and Operation.

*   **Resource**: The HubSpot object type (e.g., `contact`, `deal`).
*   **Operation**: The action to perform (e.g., `createUpdate`, `getAll`, `search`).
*   **IDs**: `Contact ID`, `Company ID`, `Deal ID`, `Ticket ID`, `List ID`, `Form ID`, `Engagement ID` are required for specific operations (`Get`, `Update`, `Delete`, `Add/Remove Contact`).
*   **Properties**: Used extensively in `Create`, `Update`, `Get`, `Get All`, `Search`. Allows specifying which HubSpot properties to set or retrieve. Can be defined using `Add Property` (Name/Value pairs) or `JSON Parameters`.
    *   *Example (Contact Create/Update)*: `Email`, `First Name`, `Last Name`, `Phone`, `Company`, custom properties.
    *   *Example (Deal Create/Update)*: `Deal Name`, `Amount`, `Pipeline`, `Deal Stage`, `Close Date`.
*   **Filters/Search Criteria**: Used in `Get All`, `Search`, `Get Recently...` operations. Allows filtering by property values, date ranges, etc. Defined via `Filters` or `Search` parameters.
*   **Associations**: Used in `Create`/`Update` operations to link the created/updated record to other HubSpot objects (e.g., associate a contact with a company or deal). Specified via the `Associations` parameter.
*   **Return All / Limit**: Control pagination for `Get All` operations.
*   **Additional Fields**: Options to specify which properties to return, resolve IDs to names, etc.

## Input Data

*   Property values for `Create`/`Update` are typically mapped from incoming n8n items using expressions (e.g., `={{ $json.customerEmail }}`).
*   IDs for specific operations (`Get`, `Update`, `Delete`) are often dynamic, taken from previous nodes.
*   Search criteria and filters can also be dynamic.

## Output Data

*   `Get`/`Search`/`Get All`: Returns an array of objects representing the requested HubSpot records, including their properties.
*   `Create`/`Update`: Returns the object representing the newly created or updated HubSpot record.
*   `Delete`: Returns a success confirmation.
*   `Add/Remove Contact`: Returns a success confirmation.
*   `Submit Form`: Returns a success confirmation, sometimes with redirect information.

## JSON Structure Example (Conceptual - Create/Update Contact)

```json
{
  "parameters": {
    "resource": "contact",
    "operation": "createUpdate",
    "email": "={{ $json.email }}", // Key for matching/creating
    "propertiesUi": {
      "values": [
        {
          "property": "firstname",
          "value": "={{ $json.firstName }}"
        },
        {
          "property": "lastname",
          "value": "={{ $json.lastName }}"
        },
        {
          "property": "phone",
          "value": "={{ $json.phone }}"
        },
        {
          "property": "company",
          "value": "={{ $json.companyName }}"
        }
      ]
    },
    "options": {}
  },
  "name": "Create/Update HubSpot Contact",
  "type": "n8n-nodes-base.hubspot",
  "typeVersion": 4, // Example version, check node info
  "position": [
    6500,
    5700
  ],
  "credentials": {
    "hubspotApi": {
      "id": "YOUR_HUBSPOT_CREDENTIAL_ID",
      "name": "My HubSpot Account"
    }
  }
}
```

## JSON Structure Example (Conceptual - Search Deals)

```json
{
  "parameters": {
    "resource": "deal",
    "operation": "search",
    "search": {
      "filterGroups": [
        {
          "filters": [
            {
              "propertyName": "dealstage",
              "operator": "EQ", // Equal
              "value": "appointmentscheduled"
            },
            {
              "propertyName": "amount",
              "operator": "GTE", // Greater than or equal
              "value": "={{ $json.minAmount }}"
            }
          ]
        }
      ],
      "sorts": [
        {
          "propertyName": "createdate",
          "direction": "DESCENDING"
        }
      ]
    },
    "limit": 100,
    "options": {
      "properties": [
        "dealname",
        "amount",
        "dealstage",
        "hubspot_owner_id"
      ]
    }
  },
  "name": "Search High Value Deals",
  "type": "n8n-nodes-base.hubspot",
  "typeVersion": 4, // Example version, check node info
  "position": [
    6600,
    5800
  ],
  "credentials": {
    "hubspotApi": {
      "id": "YOUR_HUBSPOT_CREDENTIAL_ID",
      "name": "My HubSpot Account"
    }
  }
}
```

---

## 115. HumanticAi.md ---

# n8n-nodes-base.humanticAi

## Description

The Humantic AI node integrates with Humantic AI, a service providing personality insights for sales professionals based on publicly available data (like LinkedIn profiles or email addresses). This node allows enriching contact or lead data with personality analysis, communication style recommendations, and other insights provided by Humantic AI.

## Credentials

Requires Humantic AI credentials:
*   **Humantic AI API**: Needs an API Key obtained from your Humantic AI account.

## Resources and Operations

The primary resource managed by this node is the **Profile**.

*   **Profile**
    *   `Create`: Creates or enriches a profile in Humantic AI based on provided inputs (like email or LinkedIn URL). This typically triggers the analysis process.
    *   `Retrieve`: Retrieves an existing profile analysis from Humantic AI using an identifier (like email, LinkedIn URL, or a Humantic AI profile ID).
    *   `Update`: Updates information associated with a profile in Humantic AI (less common, usually enrichment is done via Create/Retrieve).

## Common Parameters

*   **Resource**: `profile`
*   **Operation**: `create`, `retrieve`, `update`
*   **Identifier Type**: Specifies the type of input identifier used (e.g., `Email`, `LinkedIn URL`, `Profile ID`).
*   **Identifier**: The actual value corresponding to the Identifier Type (e.g., `john.doe@example.com`, `https://linkedin.com/in/johndoe`, `humantic_profile_123`). This is often dynamic using expressions like `={{ $json.email }}`.
*   **Additional Fields (Create/Update)**: May allow providing additional context like `First Name`, `Last Name`, `Company Name` to improve analysis accuracy.
*   **Options**: Potential options might include forcing re-analysis, specifying desired insight types, etc. (Refer to specific node version and Humantic AI API docs).

## Input Data

*   The node expects an identifier (email, LinkedIn URL) for the person whose profile needs analysis or retrieval. This identifier is usually passed from previous nodes in the workflow.
*   Additional context fields might be mapped from input data.

## Output Data

*   The node outputs the enriched profile data retrieved from Humantic AI. This typically includes:
    *   Personality traits (e.g., DISC profile, Big Five traits).
    *   Communication style recommendations (e.g., how to approach, what to avoid).
    *   Potential motivations or priorities.
    *   Confidence scores for the analysis.
    *   The original input data might also be passed through.

## JSON Structure Example (Conceptual - Retrieve/Enrich Profile by Email)

```json
{
  "parameters": {
    "resource": "profile",
    "operation": "retrieve", // Or 'create' if enrichment is desired and profile might not exist
    "identifierType": "email",
    "identifier": "={{ $json.contactEmail }}", // Input email from previous node
    "options": {}
  },
  "name": "Get Humantic AI Insights",
  "type": "n8n-nodes-base.humanticAi",
  "typeVersion": 1, // Check actual version
  "position": [
    6700,
    5900
  ],
  "credentials": {
    "humanticAiApi": {
      "id": "YOUR_HUMANTIC_AI_CREDENTIAL_ID",
      "name": "My Humantic AI Key"
    }
  }
}
```

---

## 116. Instagram.md ---

# Instagram Integration

While n8n doesn't have a single, dedicated node covering all Instagram functionalities, official integration exists, primarily through Facebook's Graph API nodes.

Instagram integration within n8n typically involves:

1.  **Facebook Trigger Node:** This node can be configured to listen for Instagram events, such as new comments or mentions, if you have an Instagram Business account linked to a Facebook Page. Refer to the [Facebook Trigger documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.facebooktrigger/) for setup details, including the WhatsApp/Instagram specific sections.
2.  **Facebook Graph API Node:** For actions like posting content (images, videos, stories - capabilities depend on the API version and account type) or retrieving profile information, the generic [Facebook Graph API node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.facebook/) is used. This requires:
    *   Setting up Facebook credentials in n8n.
    *   Understanding the specific Instagram Graph API endpoints needed for your task.
    *   Configuring the Facebook Graph API node with the correct API version, endpoint path, HTTP method, and parameters.
3.  **Community Nodes:** Check the n8n community for user-created nodes that might offer simplified interfaces for specific Instagram actions, although official support relies on the Facebook nodes.
4.  **HTTP Request Node:** As a fallback, the generic HTTP Request node can be used to call the Instagram Graph API directly, managing authentication and request formatting manually.

Key considerations:
*   Most integrations require an Instagram Business or Creator account linked to a Facebook Page.
*   API capabilities and permissions can change; always refer to the official [Meta for Developers documentation](https://developers.facebook.com/docs/instagram-api/) for the latest details on the Instagram Graph API.

---

## 117. Integration_googleforms_webhook.md ---

# n8n Integration: Google Forms (via Webhook)

**Note:** There is no dedicated built-in n8n node for directly interacting with Google Forms (e.g., creating forms, fetching responses via node parameters). Integration is typically achieved by triggering an n8n workflow when a new form submission occurs.

The standard and recommended method involves using a Google Apps Script within your Google Form to send submission data to an n8n **Webhook node**.

## Integration Steps

1.  **Create an n8n Workflow with a Webhook Node:**
    *   Add a [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/) to your n8n workflow.
    *   The Webhook node automatically generates unique Test and Production URLs. Copy the **Test URL** for initial setup and testing. You will use the Production URL once you activate the workflow.
    *   Execute the workflow once (or click "Listen for Test Event") so the webhook is active and waiting for data.

2.  **Open Google Form Script Editor:**
    *   Open the Google Form you want to integrate.
    *   Click the three vertical dots (More options) in the top-right corner.
    *   Select "Script editor".

3.  **Add Google Apps Script:**
    *   Replace any existing code in the editor with a script similar to the following. **Remember to replace `'YOUR_N8N_WEBHOOK_URL'` with the actual Test URL copied from your n8n Webhook node.**

    ```javascript
    function onFormSubmit(e) {
      // Get the form response object
      var formResponse = e.response;
      var itemResponses = formResponse.getItemResponses();
      
      // Prepare the data payload to send to n8n
      var payload = {};
      payload['submittedAt'] = formResponse.getTimestamp().toISOString();
      payload['responderEmail'] = formResponse.getRespondentEmail(); // Only works if collecting emails
      
      var items = {};
      for (var i = 0; i < itemResponses.length; i++) {
        var itemResponse = itemResponses[i];
        var question = itemResponse.getItem().getTitle();
        var answer = itemResponse.getResponse();
        // Handle cases where the answer might be an array (e.g., checkboxes)
        if (Array.isArray(answer)) {
          items[question] = answer.join(', '); 
        } else {
          items[question] = answer;
        }
      }
      payload['responses'] = items;

      // Define options for the HTTP request
      var options = {
        'method' : 'post',
        'contentType': 'application/json',
        // Convert the JavaScript object to a JSON string.
        'payload' : JSON.stringify(payload)
      };

      // Send the data to the n8n webhook
      try {
        UrlFetchApp.fetch('YOUR_N8N_WEBHOOK_URL', options);
      } catch (error) {
        Logger.log('Error sending data to n8n: ' + error);
      }
    }
    ```

4.  **Set Up Script Trigger:**
    *   In the Script editor, click the clock icon on the left sidebar (Triggers).
    *   Click the "+ Add Trigger" button.
    *   Configure the trigger settings:
        *   Choose which function to run: `onFormSubmit`
        *   Choose which deployment should run: `Head`
        *   Select event source: `From form`
        *   Select event type: `On form submit`
    *   Click "Save".
    *   You will likely need to authorize the script to access your form data and external services. Review the permissions and allow them if you trust the script.

5.  **Test the Integration:**
    *   Submit a test response to your Google Form.
    *   Check your n8n workflow. The Webhook node should show the received data from the form submission.

6.  **Activate Workflow:**
    *   Once testing is successful, replace the Test URL in your Google Apps Script with the **Production URL** from the n8n Webhook node.
    *   Save the script.
    *   Activate your n8n workflow.

## Received Data Structure

The n8n Webhook node will typically receive a JSON object in the `body` containing the data structured by the Apps Script (e.g., `submittedAt`, `responderEmail`, and a `responses` object mapping question titles to answers).

## Resources

*   [n8n Webhook Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
*   [Google Apps Script Documentation](https://developers.google.com/apps-script)
*   [Google Apps Script `onFormSubmit` Event Object](https://developers.google.com/apps-script/guides/triggers/events#form-submit)
*   [Google Apps Script `UrlFetchApp`](https://developers.google.com/apps-script/reference/url-fetch/url-fetch-app)

---

## 118. Integration_googlekeep_status.md ---

# n8n Integration: Google Keep

**Status:** As of the time of writing, there is **no official built-in n8n node** for direct integration with Google Keep.

## Community Efforts & Alternatives

*   **Community Node (Incomplete):** A GitHub repository ([AndriiChuzhynov/n8n-google-keep](https://github.com/AndriiChuzhynov/n8n-google-keep)) exists, seemingly intended as a starting point for a community node. However, it appears to be based on the standard n8n node starter template and does not contain a fully developed, published, or documented node for Google Keep. Its status suggests it might be incomplete or abandoned.
*   **Workarounds:** Integrating with Google Keep often requires indirect methods or workarounds, as Google Keep does not have a public, well-documented API suitable for direct integration like other Google services (Docs, Sheets, Drive, etc.). Some potential approaches discussed in the community or demonstrated in templates include:
    *   **Google Drive Export/Import:** Periodically exporting Google Keep notes (often manually or via Google Takeout) to Google Drive and then processing them using the n8n [Google Drive node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/) or related tools (like Google Docs/Sheets nodes if notes are converted).
    *   **Third-Party Services/APIs:** Utilizing unofficial libraries or APIs for Google Keep if available, though these are often unstable, unsupported, and may violate Google's terms of service. This approach is generally not recommended due to reliability and security concerns.
    *   **Browser Automation (Advanced):** Using community browser automation nodes (like the `n8n-nodes-browser` documented previously) or external scripts (e.g., Puppeteer, Selenium) to interact with the Google Keep web interface. This is complex, brittle (prone to breaking with UI changes), and may also face challenges with authentication.

## Recommendation

Due to the lack of an official API and a maintained n8n node, direct, real-time automation involving creating, reading, or modifying specific Google Keep notes within n8n is currently challenging and often unreliable.

Consider alternative note-taking or task management services that have robust APIs and official n8n integrations (e.g., Notion, Evernote, Todoist, Google Tasks, ClickUp, etc.) if seamless workflow automation is a primary requirement.

If Google Keep is essential, the most feasible (though limited) n8n integration involves processing exported data via Google Drive.

## Resources

*   [n8n Community Discussion on Google Keep Node](https://community.n8n.io/t/new-node-google-keep/26472)
*   [Example Workflow: Import Keep notes via Drive/OpenAI](https://n8n.io/workflows/3517-import-google-keep-notes-to-google-sheets-using-openai-and-google-drive/)
*   [Incomplete Community Node Starter](https://github.com/AndriiChuzhynov/n8n-google-keep)

---

## 119. Integration_grav_status.md ---

# n8n Integration: Grav CMS

**Status:** As of the time of writing, there is **no official built-in n8n node** or known, maintained community node for direct integration with the [Grav CMS](https://getgrav.org/).

## Integration Alternatives

Integrating Grav CMS with n8n typically requires using generic tools or exploring Grav's own plugin ecosystem:

1.  **Grav API / Webhooks:** If Grav or one of its plugins exposes a REST API or allows triggering webhooks on certain events (e.g., form submission, page creation), you can use n8n's [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) or [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/) to interact with it.
2.  **File System Access:** Since Grav is a flat-file CMS, if your n8n instance has access to the same file system where Grav is hosted (e.g., both running on the same server or using shared volumes), you could potentially use n8n's file system nodes ([Read/Write Binary File](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readbinaryfile/), [Local File Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger/)) to read or modify Grav's content files (Markdown). This approach is complex and requires careful handling.
3.  **Custom Grav Plugin:** Develop a custom Grav plugin that pushes data to an n8n webhook upon specific events within Grav.

## Recommendation

For most integrations, leveraging Grav's potential API capabilities or using webhooks (if supported by Grav plugins like the Form plugin) with n8n's HTTP Request or Webhook nodes is the most common approach. Direct file manipulation should be considered carefully due to potential complexity and risks.

Check the Grav plugin repository and documentation for plugins that might facilitate API access or webhook functionality.

## Resources

*   [Grav CMS Documentation](https://learn.getgrav.org/)
*   [n8n HTTP Request Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Webhook Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)

---

## 120. Integration_greenhouse_status.md ---

# n8n Integration: Greenhouse

**Status:** As of the time of writing, there is **no official built-in n8n node** for direct integration with the Greenhouse Applicant Tracking System (ATS).

## Integration Alternatives

Integrating Greenhouse with n8n requires using the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to interact with the [Greenhouse Harvest API](https://developers.greenhouse.io/harvest.html).

**Steps for Integration:**

1.  **Generate Greenhouse API Key:**
    *   Log in to your Greenhouse account with developer permissions.
    *   Navigate to Configure > Dev Center > API Credential Management.
    *   Create a new API key. Ensure you select the **Harvest** API type.
    *   Grant the necessary permissions to the key based on the actions you want to perform via n8n (e.g., read candidates, create jobs, etc.).
    *   Securely copy the generated API key.

2.  **Configure n8n HTTP Request Node:**
    *   Add an HTTP Request node to your n8n workflow.
    *   **Authentication:** Choose `Header Auth`.
    *   **Credentials:** Create new Header Auth credentials.
        *   **Name:** `Authorization`
        *   **Value:** `Basic ` followed by the Base64 encoded version of your Greenhouse API key (note: the key itself, followed by a colon, should be Base64 encoded, e.g., `YOUR_API_KEY:`).
    *   **Method:** Select the appropriate HTTP method (GET, POST, PUT, PATCH, DELETE) based on the Greenhouse API endpoint you are calling.
    *   **URL:** Enter the specific Greenhouse Harvest API endpoint URL (e.g., `https://harvest.greenhouse.io/v1/candidates`, `https://harvest.greenhouse.io/v1/jobs`, etc.).
    *   **Body (for POST/PUT/PATCH):** If sending data, configure the request body (usually JSON) according to the Greenhouse API documentation for the specific endpoint.
    *   **Options (Query Parameters):** Add any necessary query parameters (e.g., for filtering or pagination) as required by the API endpoint.

## Common Use Cases

*   Fetching new candidate applications.
*   Retrieving job postings.
*   Updating candidate stages.
*   Adding notes or attachments to candidate profiles.

## Resources

*   [Greenhouse Harvest API Documentation](https://developers.greenhouse.io/harvest.html)
*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Header Auth Credentials](https://docs.n8n.io/credentials/header-auth/)
*   [n8n Community Discussion on Greenhouse](https://community.n8n.io/search?q=greenhouse)

---

## 121. Integration_linktree_status.md ---

# n8n Integration: Linktree

**Status:** No dedicated n8n node available (Official or Community).

## Overview

As of the last check, there is no official built-in n8n node nor a widely recognized community node specifically for interacting with Linktree.

## Integration Alternatives

Integration with Linktree within n8n workflows currently relies on using the generic **HTTP Request node** to interact with Linktree's underlying API, if accessible.

### Using the HTTP Request Node

1.  **API Availability & Documentation:**
    *   Linktree does not appear to have publicly available, officially documented REST APIs for general use in the same way many other services do. Searches reveal unofficial documentation (e.g., via Postman collections like [this one](http://documenter.getpostman.com/view/14039622/Tzsik4P8)) and a [developer interest page](https://linktr.ee/marketplace/developer) mentioning private/public APIs, but comprehensive public documentation seems lacking.
    *   You would need to investigate Linktree's API endpoints and authentication methods, potentially through browser developer tools while using the Linktree web interface, unofficial documentation, or by contacting Linktree directly.

2.  **Authentication:**
    *   The authentication method for Linktree's API is unclear from public sources. It might involve API keys, session cookies, OAuth, or other methods. You would need to determine this before configuring the HTTP Request node.
    *   Depending on the method, you might configure authentication within the HTTP Request node (e.g., Header Auth for API keys, OAuth2 credentials if applicable) or handle it manually (e.g., logging in via HTTP requests to get a session cookie).

3.  **Making Requests:**
    *   Identify the correct **URL** for the API endpoint corresponding to the action you want to perform (e.g., fetching links, updating profile).
    *   Set the appropriate **HTTP Method** (GET, POST, PUT, DELETE, etc.).
    *   Configure **Headers** (e.g., `Content-Type: application/json`, `Authorization` if needed).
    *   Provide data in the **Body** (for POST/PUT requests) or **Query Parameters** as required by the specific endpoint.

**Disclaimer:** Relying on undocumented or unofficial APIs is inherently risky. Endpoints, authentication methods, and data structures can change without notice, breaking your workflows. This approach lacks official support from both n8n and Linktree.

## Use Cases (Hypothetical via HTTP Request)

*   Fetching current links from a Linktree profile.
*   Adding or updating links (if API endpoints exist and are accessible).
*   Retrieving profile information.

## Recommendation

Due to the lack of official API documentation and dedicated n8n nodes, integrating directly with Linktree is challenging and potentially unreliable. Consider alternative approaches if possible, or proceed with the HTTP Request node method with caution, understanding the risks involved.

## Resources

*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [Unofficial Linktree API Postman Documentation (Use with caution)](http://documenter.getpostman.com/view/14039622/Tzsik4P8)
*   [Linktree Developer Interest Page](https://linktr.ee/marketplace/developer)

---

## 122. Integration_mailparser_status.md ---

# n8n Integration: Email Parsing (Mailparser)

**Status:** No dedicated n8n node available (Official or Community).

## Overview

While there isn't a specific built-in n8n node named "Mailparser" or a widely adopted community node for the service mailparser.io, n8n provides robust capabilities for fetching and parsing email content within workflows using a combination of core nodes.

## Integration Alternatives & Workarounds

There are two primary methods to achieve email parsing in n8n:

1.  **Using Core n8n Nodes (Recommended Native Approach):**
    *   **Fetch Email:** Use the [Email Trigger (IMAP) node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.emailimap/) (`n8n-nodes-base.emailimap`) or the [Microsoft Outlook node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftoutlook/) / [Gmail node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlemail/) to retrieve emails based on specific criteria (sender, subject, folder, etc.).
    *   **Parse Content:** Once the email is fetched (often including HTML and plain text versions of the body, subject, sender, etc.), use subsequent nodes to extract the required information:
        *   **Set Node:** Use built-in methods like `.split()`, `.match()`, or regular expressions within expressions to extract data from the email body (text or HTML).
        *   **Code Node:** Write custom JavaScript or Python code for more complex parsing logic, including using libraries for HTML parsing (like Cheerio, which might need to be enabled or handled carefully depending on the n8n environment) or advanced text manipulation.
        *   **HTML Node:** If dealing with HTML emails, the [HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/) can extract data using CSS selectors.
        *   **AI / LLM Nodes:** For unstructured data, leverage nodes like the [AI Agent](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/) or specific LLM nodes (OpenAI, Anthropic, etc.) with appropriate prompting to extract structured information from the email body.

2.  **Using External Parsing Services (via HTTP Request Node):**
    *   Services like [mailparser.io](https://mailparser.io/) or [Parseur](https://parseur.com/) specialize in email parsing.
    *   **Forward Email:** Configure your email server or use rules to automatically forward relevant emails to the unique email address provided by the parsing service.
    *   **Configure Parser:** Set up parsing rules within the external service to extract the desired data fields.
    *   **Trigger n8n:** Use the service's webhook feature to send the parsed data to an n8n [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/).
    *   Alternatively, use the n8n [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to periodically poll the parsing service's API (if available) for new results.

## Recommendation

For most common parsing tasks, using n8n's core nodes (IMAP/Email Trigger + Set/Code/HTML/AI) is often sufficient and keeps the entire process within n8n. For very complex or high-volume parsing needs where pre-built rules are beneficial, integrating with a dedicated external service via webhooks might be more efficient.

## Resources

*   [n8n Email Trigger (IMAP) Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.emailimap/)
*   [n8n Set Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)
*   [n8n Code Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)
*   [n8n HTML Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)
*   [n8n Webhook Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Workflow Template: Parse Email Body Message](https://n8n.io/workflows/1453-parse-email-body-message/)

---

## 123. Integration_makecom_status.md ---

# n8n Integration: Make.com

**Status:** No dedicated n8n node available (Official or Community).

## Overview

Make.com (formerly Integromat) is a visual workflow automation platform similar to n8n. While n8n does not have a dedicated built-in node to directly interact with Make.com scenarios or management APIs, integration is possible by leveraging Make.com's own API capabilities and n8n's generic connectivity nodes.

## Integration Alternatives

There are two primary ways to integrate n8n workflows with Make.com scenarios:

1.  **Triggering a Make.com Scenario from n8n (using HTTP Request Node):**
    *   **Make.com Setup:** In your Make.com scenario, use the "Webhook" module as the trigger. This provides a unique URL.
    *   **n8n Setup:** Use the n8n [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).
        *   **URL:** Paste the unique webhook URL obtained from the Make.com scenario trigger.
        *   **Method:** Typically `POST` (check Make.com webhook module settings).
        *   **Body Content Type:** Usually `JSON`.
        *   **Body:** Construct the JSON payload containing the data you want to send from n8n to the Make.com scenario. Use n8n expressions to include dynamic data.
        *   **Authentication:** Usually `None`, as Make.com webhooks often rely on the unique URL for security. However, Make.com might offer options for basic auth or custom headers; configure accordingly if used.
    *   **Use Case:** Start a Make.com scenario based on an event or data processed in an n8n workflow.

2.  **Triggering an n8n Workflow from Make.com (using Webhook Node):**
    *   **n8n Setup:** Use the n8n [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/) as the trigger in your n8n workflow. Copy the generated Test/Production URL.
    *   **Make.com Setup:** In your Make.com scenario, use the "HTTP" module with the "Make a request" action.
        *   **URL:** Paste the n8n Webhook URL.
        *   **Method:** Typically `POST`.
        *   **Body type:** Usually `Raw`.
        *   **Content type:** `JSON (application/json)`.
        *   **Request content:** Construct the JSON payload containing the data you want to send from Make.com to n8n. Use Make.com variables.
    *   **Use Case:** Start an n8n workflow based on an event or data processed in a Make.com scenario.

3.  **Interacting with Make.com Management API (using HTTP Request Node):**
    *   Make.com provides a [REST API](https://developers.make.com/api-documentation) for managing scenarios, users, connections, etc. (requires appropriate plan/permissions).
    *   **n8n Setup:** Use the n8n [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).
        *   **Authentication:** `Header Auth`. Create credentials where the **Name** is `Authorization` and the **Value** is `Token YOUR_MAKE_API_TOKEN` (replace `YOUR_MAKE_API_TOKEN` with your actual Make.com API token).
        *   **URL:** Use the appropriate endpoint from the [Make.com API Reference](https://developers.make.com/api-documentation/api-reference).
        *   **Method:** GET, POST, PUT, DELETE as required by the API endpoint.
        *   **Body/Query Parameters:** Configure as needed based on the API documentation.
    *   **Use Case:** Programmatically start/stop scenarios, retrieve execution logs, manage connections, etc., from within an n8n workflow.

## Recommendation

Use the HTTP Request node in n8n to call Make.com webhooks or the Make.com API, or use the Webhook node in n8n to receive data from Make.com's HTTP module. Carefully consult the Make.com documentation for webhook setup and API usage.

## Resources

*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Webhook Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
*   [Make.com API Documentation](https://developers.make.com/api-documentation)
*   [Make.com Webhooks Module](https://www.make.com/en/help/app/webhook)
*   [Make.com HTTP Module](https://www.make.com/en/help/app/http)

---

## 124. Integration_marketo_status.md ---

# n8n Integration: Marketo (Adobe Marketo Engage)

**Status:** No dedicated n8n node available (Official or Community).

## Overview

Adobe Marketo Engage is a comprehensive marketing automation platform. Currently, n8n does not have a dedicated built-in node or a widely adopted community node specifically for Marketo.

However, Marketo provides a robust [REST API](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/rest-api) that allows for extensive interaction with its features. You can integrate n8n with Marketo by using n8n's versatile **HTTP Request node** to communicate with the Marketo API.

## Integration via HTTP Request Node

To interact with the Marketo REST API from n8n, you will primarily use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

### Authentication

Marketo's REST API uses **OAuth 2.0** for authentication. This typically involves:

1.  **Creating an API-Only User and Role in Marketo:** Set up a dedicated user with appropriate API permissions.
2.  **Creating a Custom Service in Marketo:** Define a service in Marketo Admin > LaunchPoint to obtain a **Client ID** and **Client Secret**.
3.  **Obtaining an Access Token:** Before making API calls, you need to request an access token from Marketo's identity endpoint (`/identity/oauth/token`) using your Client ID, Client Secret, and instance identity URL.

**Handling OAuth 2.0 in n8n:**

*   **Credential Type:** You can use the generic `OAuth2 API` credential type in n8n. Configure it with Marketo's specific authorization URL, access token URL, Client ID, Client Secret, and scope.
*   **Manual Token Handling:** Alternatively, you can build a preliminary step in your workflow using an HTTP Request node to fetch the access token from the `/identity/oauth/token` endpoint. Store this token (e.g., using a Set node or static workflow data, being mindful of expiry) and then use it in subsequent HTTP Request nodes by setting the `Authorization` header to `Bearer YOUR_ACCESS_TOKEN`.

Refer to the official Marketo documentation for detailed steps on [REST API Authentication](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/authentication).

### Making API Calls

Once authentication is handled:

1.  **Configure HTTP Request Node:**
    *   **URL:** Construct the URL based on your Marketo instance's REST API endpoint (e.g., `https://YOUR_INSTANCE.mktorest.com/rest/v1/...`) and the specific resource you want to access (e.g., `/leads.json`, `/campaigns/{id}/schedule.json`). Refer to the [Marketo Endpoint Reference](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/endpoint-reference).
    *   **Method:** Select the appropriate HTTP method (GET, POST, PUT, DELETE) as specified in the Marketo API documentation for the desired operation.
    *   **Authentication:** If using OAuth2 API credentials, select them. If handling tokens manually, select `Header Auth` and configure the `Authorization` header as `Bearer {{ $yourAccessToken }}`.
    *   **Body/Query Parameters:** Add necessary parameters in the Body (for POST/PUT) or Query Parameters (for GET/DELETE) section, according to the API endpoint requirements. Use n8n expressions to include dynamic data.
    *   **Send Body/Query:** Ensure the correct options are selected for sending parameters.

## Use Cases

*   Create or update leads in Marketo based on form submissions or CRM updates.
*   Add leads to Marketo campaigns or static lists.
*   Retrieve lead activity or campaign results.
*   Trigger Marketo campaigns remotely.
*   Synchronize data between Marketo and other systems.

## Recommendation

Use the HTTP Request node combined with appropriate authentication handling (OAuth2 API credentials or manual token fetching) to interact with the Marketo REST API. Thoroughly consult the [Marketo Developer Documentation](https://developer.adobe.com/marketo-apis/) for specific endpoint details, required parameters, and authentication procedures.

## Resources

*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n OAuth2 API Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/oauth2/)
*   [Adobe Marketo Engage REST API Documentation](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/rest-api)
*   [Marketo REST API Authentication](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/authentication)
*   [Marketo REST API Endpoint Reference](https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/rest/endpoint-reference)

---

## 125. Integration_metarouter_status.md ---

# n8n Integration: MetaRouter

**Status:** No dedicated n8n node available (Official or Community).

## Overview

MetaRouter is a customer data infrastructure platform that allows companies to collect, process, and route customer data from various sources to different destinations while maintaining data privacy and control.

Currently, n8n does not have a dedicated built-in node or a known, maintained community node specifically for MetaRouter.

However, MetaRouter provides an [HTTP Tracking API](https://docs.metarouter.io/docs/http-api) that allows you to send event data to your MetaRouter instance. You can leverage n8n's **HTTP Request node** to integrate with this API.

## Integration via HTTP Request Node

To send data to MetaRouter from n8n, you will use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

### API Endpoint

The primary endpoint for sending events is typically hosted on your MetaRouter instance. The path usually follows the pattern `/v1/event_type`, where `event_type` corresponds to the Analytics.js API call type (e.g., `track`, `identify`, `page`, `group`, `alias`).

*   **Example URL:** `https://your-metarouter-instance.com/v1/track`

Consult your MetaRouter instance configuration or documentation for the exact base URL.

### Authentication

The MetaRouter HTTP Tracking API often uses **Basic Authentication**. You will need your **Write Key** from the MetaRouter source configuration.

1.  **Create n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Select **Basic Auth**.
    *   **User:** Enter your MetaRouter **Write Key**.
    *   **Password:** Leave this field **empty** (as per standard Basic Auth format where the key is the username and the password part is unused but required by the protocol).
    *   Save the credential (e.g., named "MetaRouter Basic Auth").

### Sending Events (e.g., Track Event)

1.  **Configure HTTP Request Node:**
    *   **URL:** Enter the appropriate endpoint URL for your MetaRouter instance (e.g., `https://your-metarouter-instance.com/v1/track`).
    *   **Method:** `POST`.
    *   **Authentication:** Select `Basic Auth` and choose the credential you created.
    *   **Body Content Type:** `JSON`.
    *   **Body:** Construct the JSON payload according to the MetaRouter HTTP API specification for the event type. Use n8n expressions to include dynamic data.
        *   **Example Track Event Body:**
            ```json
            {
              "userId": "{{ $json.userId }}",
              "event": "{{ $json.eventName }}",
              "properties": {
                "plan": "{{ $json.planName }}",
                "accountType": "{{ $json.accountType }}"
              },
              "context": {
                "ip": "{{ $json.ipAddress }}",
                "userAgent": "{{ $json.userAgent }}"
              }
            }
            ```
    *   **Options > Batching:** If sending many events, consider configuring batching within the HTTP Request node or looping appropriately in your workflow, respecting any API rate limits.

## Use Cases

*   Send user interaction events (e.g., button clicks, form submissions tracked by n8n) to MetaRouter.
*   Identify users in MetaRouter when they sign up or log in via a process managed by n8n.
*   Send server-side events (e.g., subscription updates, payment confirmations) processed by n8n to MetaRouter.

## Recommendation

Use the HTTP Request node with Basic Authentication (using your MetaRouter Write Key as the username) to send data to the MetaRouter HTTP Tracking API. Carefully follow the payload structure defined in the [MetaRouter HTTP API Documentation](https://docs.metarouter.io/docs/http-api).

## Resources

*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [n8n Basic Auth Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/basic-auth/)
*   [MetaRouter HTTP Tracking API Documentation](https://docs.metarouter.io/docs/http-api)
*   [MetaRouter General Ingest API Info](https://docs.metarouter.io/reference/ingest-api-general-info)

---

## 126. Integration_microsoftforms_status.md ---

# n8n Integration: Microsoft Forms

**Status:** No dedicated n8n node available. Integration via Power Automate + n8n Webhook is recommended.

## Overview

Microsoft Forms is a tool for creating surveys, quizzes, and polls. While n8n does not have a dedicated built-in node to directly interact with Microsoft Forms (like creating forms or fetching responses via node parameters), you can easily trigger n8n workflows based on new form submissions using Microsoft Power Automate (formerly Microsoft Flow) and n8n's Webhook node.

## Recommended Integration: Power Automate + n8n Webhook

This is the most common and straightforward method:

1.  **Create your Microsoft Form:** Design your form in Microsoft Forms as usual.

2.  **Set up n8n Workflow with Webhook Trigger:**
    *   Start a new n8n workflow.
    *   Add a [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/) as the trigger.
    *   Set **Authentication** to `None` (Power Automate will call this URL directly).
    *   Set **HTTP Method** to `POST`.
    *   Copy the **Test URL** provided by the Webhook node. You will use this temporarily in Power Automate to help structure the data.
    *   Click **Listen for test event**.

3.  **Create a Power Automate Flow:**
    *   Go to [Microsoft Power Automate](https://make.powerautomate.com/).
    *   Create a new **Automated cloud flow**.
    *   Give your flow a name (e.g., "Send Form Response to n8n").
    *   Search for the trigger **"When a new response is submitted"** (Microsoft Forms) and select it.
    *   Sign in if prompted and select your specific Form from the **Form Id** dropdown.
    *   Add a new step: Search for and select **"Get response details"** (Microsoft Forms).
        *   **Form Id:** Select the same form as in the trigger.
        *   **Response Id:** Select **"Response Id"** from the dynamic content of the trigger step ("When a new response is submitted").
    *   Add another new step: Search for and select **"HTTP"** (the built-in HTTP action).
        *   **Method:** `POST`.
        *   **URI:** Paste the **Test URL** you copied from the n8n Webhook node.
        *   **Headers:** `Content-Type` = `application/json`.
        *   **Body:** Construct a JSON object containing the data you want to send to n8n. Use dynamic content from the "Get response details" step to include the actual form answers. Example:
            ```json
            {
              "formId": "@{triggerOutputs()?['body/resourceData/formId']}",
              "responseId": "@{outputs('Get_response_details')?['body/responder']}", // Or use specific ID if available
              "submissionTime": "@{outputs('Get_response_details')?['body/submitDate']}",
              "responderEmail": "@{outputs('Get_response_details')?['body/responder']}", // If collecting email
              "question1_answer": "@{outputs('Get_response_details')?['body/rYOUR_QUESTION_1_ID']}",
              "question2_answer": "@{outputs('Get_response_details')?['body/rYOUR_QUESTION_2_ID']}"
              // Add other questions using their specific IDs from Forms
            }
            ```
            *(Note: You might need to find the specific question IDs, often visible when selecting dynamic content in Power Automate)*
    *   Save the Power Automate flow.

4.  **Test the Integration:**
    *   Ensure your n8n Webhook node is still "Listening for test event".
    *   Submit a test response to your Microsoft Form.
    *   Power Automate should trigger, run the steps, and send the data to the n8n Webhook Test URL.
    *   n8n should show the received data structure.

5.  **Finalize n8n Webhook:**
    *   Once the test data is received correctly in n8n, stop listening for test events.
    *   Copy the **Production URL** from the n8n Webhook node.
    *   Go back to your Power Automate flow, edit the HTTP action, and replace the Test URL in the **URI** field with the n8n **Production URL**.
    *   Save the Power Automate flow again.
    *   Activate your n8n workflow.

Now, every new Microsoft Form submission will trigger the Power Automate flow, which will send the response details to your active n8n workflow via the Webhook node.

## Alternative (Advanced): Microsoft Graph API

While possible, using the Microsoft Graph API via the n8n HTTP Request node to fetch form responses is generally more complex than the Power Automate method for simple triggering. It would require setting up Azure AD app registration, handling authentication (OAuth2), and making specific API calls to list forms and retrieve responses. This approach might be considered for more advanced scenarios, like programmatically managing forms or responses beyond just triggering on submission.

## Resources

*   [n8n Webhook Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
*   [Microsoft Power Automate Documentation](https://learn.microsoft.com/en-us/power-automate/)
*   [Create an automated workflow for Microsoft Forms (Microsoft Support)](https://support.microsoft.com/en-us/office/create-an-automated-workflow-for-microsoft-forms-dee28c00-503a-48b3-89df-91a5084e6e43)
*   [Microsoft Forms Connector Reference (Power Automate)](https://learn.microsoft.com/en-us/connectors/microsoftforms/)
*   [HTTP Action Reference (Power Automate)](https://learn.microsoft.com/en-us/power-automate/desktop-flows/actions-reference/http)

---

## 127. Integration_miro_status.md ---

# n8n Integration: Miro

**Status:** No dedicated n8n node available. Integration via HTTP Request node + Miro API is required.
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/miro/](https://docs.n8n.io/integrations/builtin/credentials/miro/)

## Overview

Miro is an online collaborative whiteboard platform. While n8n does not have a dedicated built-in node for Miro operations, it provides official credential support (OAuth2) specifically designed for use with the **HTTP Request node**. This allows you to interact with the comprehensive [Miro REST API](https://developers.miro.com/reference/api-reference) to automate actions related to boards, items, users, etc.

## Credentials

This integration uses **Miro OAuth2 API** credentials.

1.  **Create a Miro App:**
    *   Log in to your Miro account.
    *   Go to your Profile settings > **Your apps**.
    *   Click **Create new app**.
    *   Fill in the required details (App name, etc.).
    *   Under **Permissions**, select the necessary scopes for the API calls you intend to make (e.g., `boards:read`, `boards:write`).
    *   Under **App Credentials**, you will find your **Client ID** and **Client Secret**.
    *   For the **Redirect URI for OAuth2.0**, you will need the OAuth Callback URL from n8n. Go to n8n > Credentials > Add Credential > Miro > OAuth2. Copy the URL provided there and paste it into the Miro app settings.
2.  **Configure n8n Miro Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Miro (OAuth2 API)**.
    *   Enter the **Client ID** and **Client Secret** obtained from your Miro app settings.
    *   Click **Connect my account** (or follow the manual process if self-hosting) to authorize n8n to access your Miro account using the specified permissions.

## Using the HTTP Request Node

Once the Miro credentials are set up, you can use the HTTP Request node to make calls to the Miro API.

1.  **Add HTTP Request Node:** Add the node to your workflow.
2.  **Authentication:** Select `OAuth2`.
3.  **Credential:** Choose your configured **Miro (OAuth2 API)** credential from the dropdown.
4.  **Method:** Select the appropriate HTTP method (GET, POST, PATCH, DELETE, etc.) based on the Miro API endpoint you are calling.
5.  **URL:** Enter the full URL for the Miro API endpoint. Refer to the [Miro API Reference](https://developers.miro.com/reference/api-reference).
    *   Example (Get board details): `https://api.miro.com/v2/boards/YOUR_BOARD_ID`
    *   Example (Create sticky note): `https://api.miro.com/v2/boards/YOUR_BOARD_ID/sticky_notes` (Use POST method)
6.  **Send Body/Query/Headers:**
    *   For `POST` or `PATCH` requests, set **Body Content Type** to `JSON` and provide the required data in the **Body** field according to the API documentation.
    *   Add any necessary headers (e.g., `Accept: application/json`) in the **Headers** section if required by the API, although often handled by the OAuth2 credential.
7.  **Execute:** Run the node to perform the API call.

## Example Operation: Get Board Details

*   **Node:** HTTP Request
*   **Authentication:** OAuth2
*   **Credential:** Your Miro Credential
*   **Method:** GET
*   **URL:** `https://api.miro.com/v2/boards/{{ $json.boardId }}` (Assuming `boardId` is passed from a previous node or set manually)

## Resources

*   [n8n Miro Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/miro/)
*   [n8n HTTP Request Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
*   [Miro Developer Platform](https://developers.miro.com/)
*   [Miro REST API Reference](https://developers.miro.com/reference/api-reference)
*   [Miro API Scopes/Permissions](https://developers.miro.com/reference/scopes)

---

## 128. Integration_onesignal_status.md ---

## n8n Integration Status: OneSignal

**Integration Type:** HTTP Request Node (No Dedicated Node)

**Status:** Not Available as a Dedicated Node

### Overview

As of the current version, n8n does not feature a dedicated, built-in node specifically for interacting with the OneSignal push notification service. Furthermore, there are no widely adopted or actively maintained community nodes available for this purpose. However, integrating OneSignal functionality into n8n workflows is entirely feasible and commonly achieved by leveraging n8n's versatile **HTTP Request** node.

### Integration Method: HTTP Request Node

The primary method for integrating OneSignal with n8n involves using the **HTTP Request** node to directly interact with the OneSignal REST API. This approach provides full access to OneSignal's capabilities, allowing you to send push notifications, manage devices, view statistics, and perform other actions supported by the API.

To implement this, you will need to configure the HTTP Request node to make calls to the appropriate OneSignal API endpoints. This typically involves:

1.  **Authentication:** Obtain your OneSignal App ID and REST API Key from your OneSignal account settings. These credentials are required to authenticate your API requests. The REST API Key should be included in the `Authorization` header of your HTTP requests, usually prefixed with `Basic `.
2.  **API Endpoint:** Determine the correct API endpoint URL for the desired action. For sending notifications, the primary endpoint is typically `https://onesignal.com/api/v1/notifications`.
3.  **HTTP Method:** Select the appropriate HTTP method (e.g., `POST` for creating notifications).
4.  **Request Body (JSON):** Construct the request body in JSON format according to the OneSignal API documentation for the specific action. For sending a notification, this body will include parameters like `app_id`, `contents` (the message text), and targeting parameters (e.g., `included_segments`, `include_player_ids`).

### Configuration Steps (Example: Sending a Notification)

1.  Add an **HTTP Request** node to your n8n workflow.
2.  Set the **Request Method** to `POST`.
3.  Set the **URL** to `https://onesignal.com/api/v1/notifications`.
4.  Under **Authentication**, select 'Header Auth'.
5.  Click 'Add Header'. Set the **Name** to `Authorization` and the **Value** to `Basic YOUR_REST_API_KEY` (replace `YOUR_REST_API_KEY` with your actual key).
6.  Click 'Add Header' again. Set the **Name** to `Content-Type` and the **Value** to `application/json`.
7.  In the **Body Content Type** dropdown, select 'JSON'.
8.  In the **Body** field, enter the JSON payload for your notification. You can use n8n expressions to dynamically insert data. A basic example targeting all subscribed users:
    ```json
    {
      "app_id": "YOUR_APP_ID",
      "included_segments": ["Subscribed Users"],
      "contents": {"en": "{{ $json.message }}"},
      "headings": {"en": "{{ $json.title }}"}
    }
    ```
    (Replace `YOUR_APP_ID` with your App ID and ensure incoming data provides `message` and `title` fields, or adjust the expressions accordingly).

### Considerations

*   **API Documentation:** Always refer to the official [OneSignal REST API documentation](https://documentation.onesignal.com/reference/rest-api-overview) for the most up-to-date endpoints, parameters, and authentication methods.
*   **Error Handling:** Implement robust error handling in your workflow to manage potential API errors (e.g., invalid credentials, rate limits, incorrect parameters).
*   **Rate Limits:** Be mindful of OneSignal's API rate limits to avoid service disruptions.

By utilizing the HTTP Request node and the OneSignal API, you can effectively integrate push notification capabilities into your n8n automation workflows.

---

## 129. Intercom.md ---

# n8n-nodes-base.intercom

## Description

The Intercom node allows interaction with the Intercom customer communications platform. It enables automating tasks related to managing users (customers), leads, and companies within Intercom directly from n8n workflows.

## Credentials

Requires Intercom credentials:
*   **Intercom API**: Uses an Access Token generated within your Intercom developer settings.

## Resources and Operations

The node supports operations on the following Intercom resources:

*   **Company**
    *   `Create`: Creates a new company record.
    *   `Get`: Retrieves data for a specific company by its Intercom ID.
    *   `Get All`: Retrieves a list of companies, potentially with filtering or pagination.
    *   `Update`: Updates an existing company's attributes.
    *   `List Users`: Retrieves a list of users associated with a specific company.
*   **Lead**
    *   `Create`: Creates a new lead record.
    *   `Delete`: Deletes a specific lead by its Intercom ID.
    *   `Get`: Retrieves data for a specific lead by its Intercom ID.
    *   `Get All`: Retrieves a list of leads.
    *   `Update`: Updates an existing lead's attributes.
*   **User** (Represents end-users/customers)
    *   `Create`: Creates a new user record.
    *   `Delete`: Deletes a specific user by their Intercom ID or User ID/Email.
    *   `Get`: Retrieves data for a specific user by their Intercom ID or User ID/Email.
    *   `Get All`: Retrieves a list of users.
    *   `Update`: Updates an existing user's attributes.

## Common Parameters

Parameters vary based on the selected Resource and Operation.

*   **Resource**: `company`, `lead`, `user`.
*   **Operation**: `create`, `delete`, `get`, `getAll`, `update`, `listUsers` (for company).
*   **Identifiers**: Required for specific operations.
    *   `Company ID`, `Lead ID`, `User ID`: Intercom's internal ID for the record.
    *   `User ID / Email`: Can often be used interchangeably with Intercom ID for user operations (`Get`, `Update`, `Delete`).
*   **Attributes/Fields**: Used extensively in `Create` and `Update` operations.
    *   *Company*: `Company ID` (custom identifier), `Name`, `Monthly Spend`, `Plan`, `Website`, custom attributes.
    *   *Lead/User*: `Email`, `Phone`, `Name`, `User ID` (custom identifier), `Signed Up At`, `Company ID` (for association), custom attributes.
    *   These are typically set using `Add Field` or `JSON Parameters` and mapped with expressions like `={{ $json.customer_email }}`.
*   **Filters/Pagination (Get All)**: Options to filter the list of records (e.g., by email, tag) and control pagination (`Limit`, potentially `Page` or cursor-based depending on API version used by the node).
*   **Additional Fields**: Options to specify which fields to return, simplify output, etc.

## Input Data

*   `Create`/`Update`: Expects data for the attributes to be set, usually mapped from incoming n8n items.
*   `Get`/`Delete`/`Update`/`List Users`: Expects the relevant identifier (Company ID, Lead ID, User ID, Email) for the target record.
*   `Get All`: May use filter parameters derived from input data.

## Output Data

*   `Get`/`Get All`: Returns an array of objects representing the Intercom records (Company, Lead, or User) with their attributes.
*   `Create`/`Update`: Returns the object representing the newly created or updated Intercom record.
*   `Delete`: Returns a success confirmation, possibly with the ID of the deleted record.
*   `List Users`: Returns an array of user objects associated with the specified company.

## JSON Structure Example (Conceptual - Create User)

```json
{
  "parameters": {
    "resource": "user",
    "operation": "create",
    "email": "={{ $json.email }}", // Required for user creation
    "userId": "={{ $json.externalId }}", // Optional custom user ID
    "name": "={{ $json.fullName }}",
    "phone": "={{ $json.phone }}",
    "signedUpAt": "={{ $json.signupTimestamp }}", // Unix timestamp
    "updateFields": {
      "company": "={{ $json.companyName }}", // Example custom attribute
      "plan_level": "premium" // Example custom attribute
    },
    "options": {}
  },
  "name": "Create Intercom User",
  "type": "n8n-nodes-base.intercom",
  "typeVersion": 1, // Check actual version
  "position": [
    6900,
    6100
  ],
  "credentials": {
    "intercomApi": {
      "id": "YOUR_INTERCOM_CREDENTIAL_ID",
      "name": "My Intercom App"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get Company)

```json
{
  "parameters": {
    "resource": "company",
    "operation": "get",
    "companyId": "={{ $json.intercomCompanyId }}", // ID from previous step
    "options": {}
  },
  "name": "Get Intercom Company",
  "type": "n8n-nodes-base.intercom",
  "typeVersion": 1, // Check actual version
  "position": [
    7000,
    6200
  ],
  "credentials": {
    "intercomApi": {
      "id": "YOUR_INTERCOM_CREDENTIAL_ID",
      "name": "My Intercom App"
    }
  }
}
```

---

## 130. InvoiceNinja.md ---

# n8n-nodes-base.invoiceNinja

## Description

The Invoice Ninja node integrates n8n with the Invoice Ninja invoicing platform. It allows for the automation of tasks related to managing clients, invoices, quotes, payments, expenses, and tasks within Invoice Ninja.

## Credentials

Requires Invoice Ninja credentials:
*   **Invoice Ninja API**: Needs an API Token generated within your Invoice Ninja account settings (Settings > API Tokens). You also need to provide the Base URL of your Invoice Ninja instance (e.g., `https://app.invoiceninja.com` for the hosted version or your self-hosted URL).

## Resources and Operations

The node supports operations on various Invoice Ninja resources:

*   **Client**
    *   `Create`: Creates a new client.
    *   `Delete`: Deletes a client by ID.
    *   `Get`: Retrieves data for a specific client by ID.
    *   `Get All`: Retrieves a list of clients, with options for filtering and sorting.
*   **Expense**
    *   `Create`: Creates a new expense record.
    *   `Delete`: Deletes an expense by ID.
    *   `Get`: Retrieves data for a specific expense by ID.
    *   `Get All`: Retrieves a list of expenses.
*   **Invoice**
    *   `Create`: Creates a new invoice.
    *   `Delete`: Deletes an invoice by ID.
    *   `Email`: Sends an existing invoice via email to the client.
    *   `Get`: Retrieves data for a specific invoice by ID.
    *   `Get All`: Retrieves a list of invoices.
*   **Payment**
    *   `Create`: Records a new payment against an invoice or client.
    *   `Delete`: Deletes a payment record by ID.
    *   `Get`: Retrieves data for a specific payment by ID.
    *   `Get All`: Retrieves a list of payments.
*   **Quote**
    *   `Create`: Creates a new quote.
    *   `Delete`: Deletes a quote by ID.
    *   `Email`: Sends an existing quote via email to the client.
    *   `Get`: Retrieves data for a specific quote by ID.
    *   `Get All`: Retrieves a list of quotes.
*   **Task**
    *   `Create`: Creates a new task.
    *   `Delete`: Deletes a task by ID.
    *   `Get`: Retrieves data for a specific task by ID.
    *   `Get All`: Retrieves a list of tasks.

## Common Parameters

Parameters differ based on the selected Resource and Operation.

*   **Resource**: `client`, `expense`, `invoice`, `payment`, `quote`, `task`.
*   **Operation**: `create`, `delete`, `email`, `get`, `getAll`.
*   **Identifiers**: Required for specific operations (`Get`, `Delete`, `Email`).
    *   `Client ID`, `Expense ID`, `Invoice ID`, `Payment ID`, `Quote ID`, `Task ID`.
*   **Fields/Attributes**: Used in `Create` operations.
    *   *Client*: `Name`, `Contact Email`, `Contact Name`, `Address`, `VAT Number`, etc.
    *   *Invoice/Quote*: `Client ID`, `Invoice Date`, `Due Date`, `Line Items` (description, quantity, cost), `Terms`, `Notes`, etc.
    *   *Expense*: `Amount`, `Date`, `Vendor ID`, `Client ID`, `Category`, `Notes`.
    *   *Payment*: `Amount`, `Date`, `Client ID`, `Invoice ID` (to apply payment to specific invoices).
    *   *Task*: `Description`, `Rate`, `Project ID`, `Client ID`, `Start Time`, `End Time`.
    *   These are set using `Add Field`, `JSON Parameters`, or specific fields like `Line Items`.
*   **Filters/Pagination (Get All)**: Options to filter records (e.g., by client ID, status) and control pagination (`Limit`, potentially `Page`).
*   **Additional Fields/Options**: May include options like `Return All`, specifying fields to return, setting invoice/quote status upon creation, etc.

## Input Data

*   `Create`: Expects data for the attributes of the record being created, mapped from incoming n8n items.
*   `Get`/`Delete`/`Email`: Expects the relevant identifier for the target record.
*   `Get All`: May use filter parameters derived from input data.

## Output Data

*   `Get`/`Get All`: Returns an array of objects representing the Invoice Ninja records with their details.
*   `Create`: Returns the object representing the newly created Invoice Ninja record.
*   `Delete`: Returns a success confirmation.
*   `Email`: Returns a success confirmation.

## JSON Structure Example (Conceptual - Create Invoice)

```json
{
  "parameters": {
    "resource": "invoice",
    "operation": "create",
    "clientId": "={{ $json.clientId }}", // ID of the client to invoice
    "lineItems": {
      "values": [
        {
          "productKey": "Service A",
          "notes": "Monthly retainer",
          "cost": 1000,
          "quantity": 1
        },
        {
          "productKey": "Support Hours",
          "notes": "Additional support",
          "cost": 150,
          "quantity": "={{ $json.supportHours }}"
        }
      ]
    },
    "options": {
      "action": "email" // Optionally email the invoice upon creation
    }
  },
  "name": "Create Invoice Ninja Invoice",
  "type": "n8n-nodes-base.invoiceNinja",
  "typeVersion": 1, // Check actual version
  "position": [
    7100,
    6300
  ],
  "credentials": {
    "invoiceNinjaApi": {
      "id": "YOUR_INVOICE_NINJA_CREDENTIAL_ID",
      "name": "My Invoice Ninja"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get All Clients)

```json
{
  "parameters": {
    "resource": "client",
    "operation": "getAll",
    "returnAll": true,
    "options": {}
  },
  "name": "Get All Invoice Ninja Clients",
  "type": "n8n-nodes-base.invoiceNinja",
  "typeVersion": 1, // Check actual version
  "position": [
    7200,
    6400
  ],
  "credentials": {
    "invoiceNinjaApi": {
      "id": "YOUR_INVOICE_NINJA_CREDENTIAL_ID",
      "name": "My Invoice Ninja"
    }
  }
}
```

---

## 131. Jira.md ---

# n8n Node: Jira Software

The Jira Software node (`n8n-nodes-base.jira`) provides integration with Atlassian Jira Software (Cloud and potentially Server/Data Center, depending on API compatibility and authentication method), allowing you to automate issue tracking, user management, and other Jira-related tasks within your n8n workflows.

## Credentials

To interact with Jira, you need to configure Jira credentials in n8n. This typically involves:

*   **Jira Cloud (Recommended):**
    *   **Email:** The email address associated with your Atlassian account.
    *   **API Token:** Generate an API token from your Atlassian account settings ([Manage account > Security > API token > Create and manage API tokens](https://id.atlassian.com/manage-profile/security/api-tokens)).
    *   **Domain:** Your Jira site domain (e.g., `your-company.atlassian.net`).
*   **Jira Server/Data Center:** Authentication might differ (e.g., username/password, Personal Access Tokens). Refer to n8n's specific credential setup guide for your Jira version.

See the official n8n documentation for detailed guidance on setting up [Jira credentials](https://docs.n8n.io/integrations/builtin/credentials/jira/).

## AI Tool Usage

This node can be utilized as a tool within an AI agent context in n8n. When used this way, parameters like issue IDs, project keys, or user details might be automatically populated or directed by the AI agent based on the workflow context.

## Operations

The node supports a wide range of operations grouped by resource:

*   **Issue**
    *   `Get issue changelog`: Retrieves the history of changes for a specific issue.
    *   `Create a new issue`: Creates a new issue in a specified project with defined fields (summary, description, issue type, etc.).
    *   `Delete an issue`: Deletes an existing issue (requires appropriate permissions).
    *   `Get an issue`: Retrieves details of a specific issue by its ID or key.
    *   `Get all issues`: Retrieves multiple issues, often filtered using JQL (Jira Query Language).
    *   `Create an email notification for an issue...`: Sends a notification related to an issue.
    *   `Return either all transitions...`: Gets available workflow transitions for an issue.
    *   `Update an issue`: Modifies fields of an existing issue.
*   **Issue Attachment**
    *   `Add attachment to issue`: Uploads a file (binary data) as an attachment to an issue.
    *   `Get an attachment`: Retrieves details about a specific attachment.
    *   `Get all attachments`: Lists all attachments for an issue.
    *   `Remove an attachment`: Deletes an attachment from an issue.
*   **Issue Comment**
    *   `Add comment to issue`: Adds a text comment to an issue.
    *   `Get a comment`: Retrieves a specific comment by its ID.
    *   `Get all comments`: Lists all comments for an issue.
    *   `Remove a comment`: Deletes a comment.
    *   `Update a comment`: Edits an existing comment.
*   **User**
    *   `Create a new user`: Creates a new user account (requires admin permissions).
    *   `Delete a user`: Deactivates or deletes a user account.
    *   `Retrieve a user`: Gets details about a specific user.

## Key Parameters & Concepts

*   **Issue ID or Key:** The unique identifier for a Jira issue (e.g., `10001` or `PROJECT-123`).
*   **Project Key:** The short identifier for a Jira project (e.g., `PROJECT`).
*   **JQL (Jira Query Language):** A powerful query language used to search for issues in Jira. Used extensively in the `Get all issues` operation via the **JQL** option (e.g., `project = YOUR_PROJECT_KEY AND status = Done ORDER BY created DESC`).
*   **Fields:** When creating or updating issues, you often need to provide field names or IDs and their corresponding values in the **Additional Fields** or **Update Fields** parameters. Field names/IDs can sometimes be complex (e.g., `customfield_10010`).
*   **Transitions:** Moving an issue through its workflow often requires specifying a transition ID, which can be retrieved using the `Return either all transitions...` operation.

## Using JQL for Filtering

When using the `Issue: Get All` operation, leverage the **JQL** option under **Options** to filter issues effectively:

*   Fetch issues for a specific project: `project = N8N`
*   Fetch open issues assigned to the current user: `assignee = currentUser() AND resolution = Unresolved`
*   Fetch issues created in the last 7 days: `created >= -7d`

## Alternative: HTTP Request Node

If the Jira node doesn't support a specific Jira API endpoint or operation you need, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

1.  Set **Authentication** to `Predefined Credential Type`.
2.  Select `Jira` as the **Credential Type**.
3.  Choose your configured Jira credentials.
4.  Configure the Method, URL (using the [Jira Cloud REST API documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/)), and Body/Query Parameters as needed.

## Resources

*   [n8n Jira Software Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira/)
*   [n8n Jira Trigger Node Documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.jiratrigger/)
*   [n8n Jira Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/jira/)
*   [Atlassian Jira Cloud REST API Documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/)
*   [Atlassian JQL Documentation](https://support.atlassian.com/jira-software-cloud/docs/advanced-search-reference-jql-fields/)

---

## 132. JiraSoftware.md ---

# n8n-nodes-base.jiraSoftware

## Description

The Jira Software node (often referred to as just "Jira" in the UI and documentation URLs) allows interaction with Atlassian Jira Software (Cloud and potentially Server/Data Center depending on authentication). It enables automation of workflows involving Jira issues, users, comments, and attachments.

## Credentials

Requires Jira credentials:
*   **Jira API Token**: Uses your email address and an API token generated from your Atlassian account security settings. Requires the Base URL of your Jira instance (e.g., `https://your-domain.atlassian.net`).
*   **Jira PAT**: Uses a Personal Access Token generated from your Atlassian account security settings. Requires the Base URL.
*   **Jira Server / Data Center**: May support username/password or other methods depending on the specific n8n version and Jira configuration.

## Resources and Operations

The node organizes operations by resource:

*   **Issue**
    *   `Get Changelog`: Retrieves the history of changes for an issue.
    *   `Create`: Creates a new issue (Task, Bug, Story, etc.).
    *   `Delete`: Deletes an issue.
    *   `Get`: Retrieves details of a specific issue by ID or Key.
    *   `Get All`: Retrieves multiple issues, often filtered using JQL.
    *   `Notify`: Sends an email notification related to an issue.
    *   `Get Transitions`: Lists the possible workflow transitions for an issue.
    *   `Update`: Modifies fields of an existing issue.
*   **Issue Attachment**
    *   `Add`: Attaches a file (from binary data) to an issue.
    *   `Get`: Retrieves metadata for a specific attachment.
    *   `Get All`: Lists metadata for all attachments on an issue.
    *   `Remove`: Deletes an attachment from an issue.
*   **Issue Comment**
    *   `Add`: Adds a comment to an issue.
    *   `Get`: Retrieves a specific comment.
    *   `Get All`: Lists all comments for an issue.
    *   `Remove`: Deletes a comment.
    *   `Update`: Edits an existing comment.
*   **User**
    *   `Create`: Creates a new Jira user (requires appropriate permissions).
    *   `Delete`: Deletes a Jira user.
    *   `Get`: Retrieves details for a specific user.

## Common Parameters

Parameters vary significantly based on the Resource and Operation.

*   **Resource**: `issue`, `issueAttachment`, `issueComment`, `user`.
*   **Operation**: Specific action like `create`, `get`, `getAll`, `update`, `delete`, `add`, `remove`, `getTransitions`.
*   **Identifiers**: Required for most operations targeting specific items.
    *   `Issue ID or Key`: The unique identifier for an issue (e.g., `PROJ-123` or `10001`).
    *   `Attachment ID`: The ID of the attachment.
    *   `Comment ID`: The ID of the comment.
    *   `User ID` or `Account ID`: Identifier for the user.
*   **Required Fields (Create Issue)**:
    *   `Project Key`: The key of the project where the issue will be created (e.g., `PROJ`).
    *   `Issue Type ID or Name`: The type of issue (e.g., `Bug`, `Task`, `Story`). Using the Name is often easier.
    *   `Summary`: The title of the issue.
*   **Fields (Create/Update Issue)**:
    *   `fieldsUi`: Provides a user interface for common fields like `Assignee`, `Priority`, `Labels`, `Description`, `Reporter`.
    *   `updateFields`: A JSON object used to set or update any field, including custom fields. Field IDs (like `customfield_10010`) or sometimes names are used as keys. Values depend on the field type (string, number, user object, array, etc.).
*   **Filtering/Searching (Get All Issues)**:
    *   `JQL` (Jira Query Language): A powerful query string to filter issues (e.g., `project = PROJ AND status = Done ORDER BY created DESC`).
    *   `Return All`: Boolean to fetch all matching results, handling pagination automatically.
    *   `Limit`: Number of results per page if `Return All` is false.
*   **Attachments**: The `Add Attachment` operation requires the input data to have a binary property containing the file content (often named `data`). The `File Name` parameter specifies the name for the attachment in Jira.
*   **Comments**: The `Add Comment` operation requires the `Body` of the comment.
*   **Options**: May include `Fields` (to specify which fields to return), `Expand` (to include related data), etc.

## Input Data

*   `Create`/`Update`/`Add`: Expects data for the fields/attributes being set, often mapped from previous nodes (e.g., `={{ $json.summary }}`). For attachments, expects binary data.
*   `Get`/`Delete`/`Remove`/`Get Transitions`/`Get Changelog`: Expects the relevant identifier (Issue ID/Key, Attachment ID, Comment ID, User ID).
*   `Get All`: May use JQL or other filter parameters derived from input data.

## Output Data

*   `Get`/`Get All`: Returns an array of objects representing the Jira items (Issues, Comments, Attachments, Users) with their details.
*   `Create`/`Update`/`Add`: Returns the object representing the newly created or updated Jira item.
*   `Delete`/`Remove`: Returns a success confirmation, often minimal.
*   `Get Transitions`: Returns an array of possible transitions.
*   `Get Changelog`: Returns an array of change history entries.

## JSON Structure Example (Conceptual - Create Issue)

```json
{
  "parameters": {
    "resource": "issue",
    "operation": "create",
    "projectKey": "PROJ",
    "issueTypeName": "Task", // Using Name instead of ID
    "summary": "={{ $json.taskTitle }}",
    "fieldsUi": {
      "description": "={{ $json.taskDescription }}",
      "assignee": {
        "accountId": "={{ $json.assigneeAccountId }}" // Assignee needs accountId
      }
    },
    "updateFields": {
      "customfield_10010": "={{ $json.customValue }}", // Example custom field
      "labels": [
        "automation",
        "n8n"
      ]
    },
    "options": {}
  },
  "name": "Create Jira Task",
  "type": "n8n-nodes-base.jira", // Note: Type might be just 'jira'
  "typeVersion": 1, // Check actual version
  "position": [
    7300,
    6500
  ],
  "credentials": {
    "jiraApi": {
      "id": "YOUR_JIRA_CREDENTIAL_ID",
      "name": "My Jira Cloud"
    }
  }
}
```

## JSON Structure Example (Conceptual - Get All Issues via JQL)

```json
{
  "parameters": {
    "resource": "issue",
    "operation": "getAll",
    "returnAll": true,
    "jql": "project = \"{{ $json.projectName }}\" AND status = Open",
    "options": {
      "fields": [
        "summary",
        "status",
        "assignee"
      ]
    }
  },
  "name": "Get Open Issues for Project",
  "type": "n8n-nodes-base.jira", // Note: Type might be just 'jira'
  "typeVersion": 1, // Check actual version
  "position": [
    7400,
    6600
  ],
  "credentials": {
    "jiraApi": {
      "id": "YOUR_JIRA_CREDENTIAL_ID",
      "name": "My Jira Cloud"
    }
  }
}
```

---

## 133. Jotformtrigger.md ---

# n8n Node: Jotform Trigger

The Jotform Trigger node (`n8n-nodes-base.jotformtrigger`) allows you to start n8n workflows automatically when a new submission is received on a specified Jotform form.

## Credentials

To use this node, you need to configure Jotform credentials in n8n using an API Key.

1.  **Generate API Key:** In your Jotform account, go to **Settings > API**. Click **Create New Key**. Give it a descriptive name (e.g., "n8n Integration") and ensure it has **Full Access** or at least **Read Access** permissions.
2.  **Copy API Key:** Copy the generated API Key.
3.  **Configure n8n Credential:**
    *   In n8n, create new credentials for Jotform.
    *   Paste the copied **API Key** into the corresponding field.
    *   Select the correct **API Domain** based on your Jotform account type:
        *   `api.jotform.com` (Default/Standard)
        *   `eu-api.jotform.com` (EU Safe Forms)
        *   `hipaa-api.jotform.com` (HIPAA Forms)

See the official n8n documentation for detailed guidance on setting up [Jotform credentials](https://docs.n8n.io/integrations/builtin/credentials/jotform/).

## Node Setup

1.  **Authentication:** Select your configured Jotform credentials.
2.  **Form:** Choose the specific Jotform form you want to trigger the workflow from the dropdown list. n8n will fetch the list of available forms using your credentials.

## How it Works

The Jotform Trigger node works by utilizing Jotform Webhooks. When you activate a workflow containing this trigger, n8n automatically registers a webhook URL with the selected Jotform form.

When a user submits the form, Jotform sends the submission data to the n8n webhook URL, which then triggers the workflow execution. The received submission data becomes the output of the Jotform Trigger node, available for use in subsequent nodes.

**Important:**

*   The workflow must be **active** for the trigger to function.
*   If you manually delete the webhook from your Jotform settings, the trigger will stop working. Reactivating the workflow in n8n should re-register the webhook.

## Output Data

The node outputs the form submission data as a JSON object. The structure will depend on the fields in your specific Jotform form. It typically includes:

*   `submissionID`: The unique ID of the submission.
*   `formID`: The ID of the form submitted.
*   `formTitle`: The title of the form.
*   `ip`: The IP address of the submitter.
*   `createdAt`: Timestamp of the submission.
*   Fields corresponding to your form questions (often nested under `answers` or directly accessible, potentially with question IDs as keys).

## Use Cases

*   Save form submissions to a database (Google Sheets, Airtable, SQL database).
*   Send custom email notifications upon form submission.
*   Create tasks in project management tools (Jira, Trello, Asana) based on form entries.
*   Add contacts to CRM systems (HubSpot, Salesforce).
*   Trigger complex follow-up sequences based on form answers.

## Resources

*   [n8n Jotform Trigger Node Documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.jotformtrigger/)
*   [n8n Jotform Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/jotform/)
*   [Jotform API Documentation](https://api.jotform.com/docs/)
*   [Jotform Webhooks Documentation](https://www.jotform.com/help/245-how-to-setup-a-webhook-with-jotform/)

---

## 134. KafkaTrigger.md ---

# n8n-nodes-base.kafkaTrigger

The Kafka Trigger node consumes messages from a specified Apache Kafka topic.

## Node Parameters

*   **Topic**: (String, Required) The name of the Kafka topic to consume messages from. Example: `my-topic`.
*   **Group ID**: (String, Required) The identifier for the consumer group this trigger belongs to. Example: `n8n-consumer-group`.
*   **Use Schema Registry**: (Boolean, Optional) Set to true if using Confluent Schema Registry to decode messages. Defaults to `false`.
*   **Schema Registry URL**: (String, Required if `Use Schema Registry` is true) The URL of the Confluent Schema Registry. Example: `http://localhost:8081`.
*   **Options**: (Collection, Optional) Additional configuration options for the Kafka consumer:
    *   **Allow Topic Creation**: (Boolean, Optional) Whether to allow sending messages to a non-existent topic (may depend on broker configuration). Defaults to `false`.
    *   **Auto Commit Threshold**: (Number, Optional) Commit offsets after consuming a specified number of messages. Defaults to `0` (disabled).
    *   **Auto Commit Interval**: (Number, Optional) Commit offsets after a specified time interval (in milliseconds). Defaults to `0` (disabled).
    *   **Heartbeat Interval**: (Number, Optional) The expected time between heartbeats to the consumer coordinator (in milliseconds). Must be lower than `Session Timeout`. Defaults to `3000`.
    *   **Max Number of Requests**: (Number, Optional) The maximum number of unacknowledged requests the client will send on a single connection before blocking. Defaults to `1`.
    *   **Read Messages From Beginning**: (Boolean, Optional) Whether the consumer should start reading from the earliest offset if no committed offset is found. Defaults to `true`.
    *   **JSON Parse Message**: (Boolean, Optional) Whether to attempt parsing the incoming message value as JSON. Defaults to `false`.
    *   **Parallel Processing**: (Boolean, Optional) Whether to process messages in parallel or sequentially (maintaining order). Defaults to `true`.
    *   **Only Message**: (Boolean, Optional, Visible if `JSON Parse Message` is true) Whether to output only the parsed message content, discarding topic and header information. Defaults to `false`.
    *   **Return Headers**: (Boolean, Optional) Whether to include Kafka message headers in the output. Defaults to `false`.
    *   **Session Timeout**: (Number, Optional) The timeout used to detect client failures (in milliseconds). Defaults to `30000`.

## JSON Example

```json
{
  "nodes": [
    {
      "parameters": {
        "topic": "user-signups",
        "groupId": "n8n-processing-group",
        "useSchemaRegistry": true,
        "schemaRegistryUrl": "http://schema-registry:8081",
        "options": {
          "fromBeginning": false,
          "jsonParseMessage": true,
          "returnHeaders": true,
          "autoCommitInterval": 5000,
          "sessionTimeout": 45000,
          "heartbeatInterval": 10000
        }
      },
      "id": "d8f5e3a8-a7f2-4f7a-8e2c-1b9d0a3c4e5f",
      "name": "Kafka Trigger",
      "type": "n8n-nodes-base.kafkaTrigger",
      "typeVersion": 1.1,
      "position": [
        800,
        300
      ],
      "credentials": {
        "kafka": {
          "id": "your_kafka_credential_id",
          "name": "Kafka Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 135. Keap.md ---

# n8n-nodes-base.keap

The Keap node allows interaction with the Keap (formerly Infusionsoft) API, enabling automation for CRM and marketing tasks.

## Resources and Operations

The node supports various resources, each with specific operations:

*   **Company**: `Create`, `Get All`
*   **Contact**: `Create/Update`, `Delete`, `Get`, `Get All`
*   **Contact Note**: `Create`, `Delete`, `Get`, `Get All`, `Update`
*   **Contact Tag**: `Add Tags to Contact`, `Delete Contact Tag`, `Get All Contact Tags`
*   **Ecommerce Order**: `Create`, `Get`, `Delete`, `Get All`
*   **Ecommerce Product**: `Create`, `Delete`, `Get`, `Get All`
*   **Email**: `Create Email Record`, `Get All Sent Emails`, `Send Email`
*   **File**: `Delete`, `Get All`, `Upload`

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (String, Required) The Keap resource to interact with (e.g., `contact`, `company`).
*   **Operation**: (String, Required) The action to perform on the selected resource (e.g., `create`, `getAll`).
*   **Contact ID / Company ID / Order ID / etc.**: (String/Number, Required for specific operations) The ID of the specific item to target.
*   **Return All**: (Boolean, Optional for `Get All` operations) Whether to return all results, potentially making multiple API calls. Defaults to `false`.
*   **Limit**: (Number, Optional for `Get All` operations if `Return All` is false) The maximum number of results to return per API call.
*   **Filters/Options**: (Object, Optional for `Get All` operations) Key-value pairs for filtering results (e.g., `email`, `order_by`, `since`, `until`).
*   **Additional Fields / Update Fields**: (Object, Optional for `Create`/`Update` operations) Key-value pairs representing the data for the resource. Specific fields depend on the resource (e.g., `email_addresses`, `given_name`, `family_name` for Contact; `company_name` for Company).
    *   **Addresses UI / Faxes UI / Phones UI / Social Accounts UI**: (Fixed Collection, Optional for Contact/Company `Create`/`Update`) Structured input for addresses, fax numbers, phone numbers, and social media accounts.
    *   **Custom Fields**: (Fixed Collection, Optional for Contact `Create`/`Update`) Allows setting values for custom fields defined in Keap.
*   **Duplicate Option**: (Options, Optional for Contact `Create/Update`) How to handle duplicate contacts (e.g., `Update with blank fields`, `Email only`).

## JSON Example (Create/Update Contact)

This example demonstrates creating or updating a contact, including email, phone, address, and custom fields.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "contact",
        "operation": "createUpdate",
        "email": "test@example.com",
        "duplicateOption": "Email",
        "updateFields": {
          "given_name": "John",
          "family_name": "Doe",
          "job_title": "Developer",
          "company": {
            "id": 123
          },
          "time_zone": "America/New_York",
          "addressesUi": {
            "addressesValues": [
              {
                "field": "BILLING",
                "line1": "123 Main St",
                "locality": "Anytown",
                "region": "Anystate",
                "postal_code": "12345",
                "country_code": "USA"
              }
            ]
          },
          "phonesUi": {
            "phonesValues": [
              {
                "field": "WORK",
                "number": "555-123-4567",
                "extension": "101"
              }
            ]
          },
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 456, 
                "content": "Custom Value Here"
              }
            ]
          }
        }
      },
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "Keap Create/Update Contact",
      "type": "n8n-nodes-base.keap",
      "typeVersion": 1,
      "position": [
        950,
        450
      ],
      "credentials": {
        "keapOAuth2Api": {
          "id": "your_keap_credential_id",
          "name": "Keap Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 136. Langchain_anthropicChatModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "template": "Translate the following text to French: {{ $json.text }}",
        "options": {},
        "nodes": [
          {
            "parameters": {
              "model": "claude-3-opus-20240229",
              "options": {
                "maxTokens": 1024,
                "temperature": 0.8,
                "topK": 50,
                "topP": 0.9
              }
            },
            "id": "anthropic-llm-uuid",
            "name": "Anthropic Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmchatanthropic",
            "typeVersion": 1,
            "position": [
              1400,
              400
            ],
            "credentials": {
              "anthropicApi": {
                "id": "anthropicCredentialId",
                "name": "Anthropic account"
              }
            }
          }
        ],
        "connections": {
          "llm": {
            "main": [
              [
                {
                  "node": "anthropic-llm-uuid",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      },
      "id": "llm-chain-uuid",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainllm",
      "typeVersion": 1,
      "position": [
        1200,
        500
      ]
    }
  ],
  "connections": {}
}
```

---

## 137. Langchain_awsBedrockChatModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "template": "Generate a short story about a robot exploring Mars.",
        "options": {},
        "nodes": [
          {
            "parameters": {
              "model": "anthropic.claude-v2",
              "region": "us-east-1",
              "options": {
                "maxTokens": 512,
                "temperature": 0.9
              }
            },
            "id": "aws-bedrock-llm-uuid",
            "name": "AWS Bedrock Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmchatawsbedrock",
            "typeVersion": 1,
            "position": [
              1400,
              400
            ],
            "credentials": {
              "aws": {
                "id": "awsCredentialId",
                "name": "AWS account"
              }
            }
          }
        ],
        "connections": {
          "llm": {
            "main": [
              [
                {
                  "node": "aws-bedrock-llm-uuid",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      },
      "id": "llm-chain-uuid",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainllm",
      "typeVersion": 1,
      "position": [
        1200,
        500
      ]
    }
  ],
  "connections": {}
}
```

---

## 138. Langchain_azureOpenAIChatModel.md ---

## Azure OpenAI Chat Model Node

**Node Type:** Sub-node (LangChain)

**Description:**

This node allows interaction with Azure OpenAI's chat models within n8n workflows, particularly when used in conjunction with conversational agents. It enables leveraging the power of models like GPT hosted on Azure for generating chat completions.

**Credentials:**

Requires Azure OpenAI credentials configured in n8n. Refer to the [Azure OpenAI credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/azureopenai/) for setup instructions.

**Note on Parameter Resolution:**

Sub-nodes handle multiple input items differently than standard nodes. When using expressions (like `{{ $json.someValue }}`) within a sub-node's parameters, the expression will always resolve based on the *first* input item, even if multiple items are passed to the node.

**Parameters:**

*   **Model:** (Required) Select the specific Azure OpenAI chat model deployment to use for generating the completion (e.g., `gpt-35-turbo`, `gpt-4`).

**Options:**

*   **Frequency Penalty:** (Number, Default: 0) Controls the likelihood of the model repeating the same lines verbatim. Higher values (up to 2.0) decrease repetition.
*   **Maximum Number of Tokens:** (Number, Default: 256) Sets the maximum number of tokens (roughly words or parts of words) the generated completion can contain.
*   **Response Format:** (Dropdown, Default: Text) Specify the desired format for the model's output. Choose 'Text' for standard text or 'JSON' to enforce a valid JSON object output (useful for structured data generation, requires model support).
*   **Presence Penalty:** (Number, Default: 0) Influences the model's tendency to introduce new topics. Higher values (up to 2.0) increase the likelihood of discussing new concepts.
*   **Sampling Temperature:** (Number, Default: 1) Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused and deterministic, while higher values (e.g., 1.0) increase randomness and creativity but also the risk of nonsensical 'hallucinations'.
*   **Timeout:** (Number, Milliseconds) The maximum time allowed for the request to Azure OpenAI before timing out.
*   **Max Retries:** (Number) The maximum number of times n8n should retry the request if it fails.
*   **Top P:** (Number, Default: 1) Nucleus sampling parameter. The model considers only the tokens comprising the top 'P' probability mass. A lower value (e.g., 0.1) means only the most likely tokens are considered, leading to less random completions.

**Related Resources:**

*   [LangChain Azure OpenAI Documentation](https://python.langchain.com/docs/integrations/chat/azure_chat_openai)
*   [n8n Advanced AI Documentation](https://docs.n8n.io/advanced-ai/)

---

## 139. Langchain_chatTrigger.md ---

# @n8n/n8n-nodes-langchain.chatTrigger

## Description

The Chat Trigger node is used when building AI workflows for chatbots and other chat interfaces. It serves as the entry point for user messages. It allows configuration of how users access the chat (hosted by n8n or embedded), and supports authentication methods (None, Basic Auth, n8n User Auth). It must be connected to an agent or chain root node.

*Note: Each message sent to this trigger counts as one workflow execution.*

## Parameters

*   **Make Chat Publicly Available**: (Boolean) Controls if the chat is accessible via its URL or only through the manual chat interface in the n8n editor.
*   **Mode**: Defines the chat interface type:
    *   `hosted`: Use n8n's built-in chat interface.
    *   `embedded`: Use a custom chat interface (e.g., n8n's chat widget or a self-built one) that calls the node's webhook URL.
*   **Authentication**: Restricts access:
    *   `none`: No authentication required.
    *   `basicAuth`: Requires username/password defined in a Basic Auth credential.
    *   `n8nUserAuth`: Requires users to be logged into an n8n account.
*   **Credential for Basic Auth**: (Credential) Select the Basic Auth credential if `authentication` is `basicAuth`.
*   **Initial Message(s)** (Hosted Mode only): Configure the initial message(s) displayed in the hosted chat interface.

### Hosted Chat Options (`mode: hosted`)

*   **Allowed Origin (CORS)**: (String) Comma-separated list of allowed origins for cross-origin requests (use `*` for all).
*   **Input Placeholder**: (String) Placeholder text for the user input field.
*   **Title**: (String) Title displayed in the chat interface.
*   **Subtitle**: (String) Subtitle displayed below the title.
*   **Load Previous Session**: (String: `off`, `fromMemory`) Determines if previous chat history is loaded. Requires connection to a memory sub-node if not `off`.
*   **Response Mode**: (String: `lastNode`, `respondToWebhook`) How the trigger sends the response:
    *   `lastNode`: Sends the output of the workflow's last executed node.
    *   `respondToWebhook`: Uses a dedicated 'Respond to Webhook' node to define the response.
*   **Require Button Click to Start Chat**: (Boolean) If true, displays a "New Conversation" button to initiate the chat.

### Embedded Chat Options (`mode: embedded`)

*   **Allowed Origin (CORS)**: (String) Comma-separated list of allowed origins (use `*` for all).
*   **Load Previous Session**: (String: `off`, `fromMemory`) Determines if previous chat history is loaded. Requires connection to a memory sub-node if not `off`.
*   **Response Mode**: (String: `lastNode`, `respondToWebhook`) How the trigger sends the response (see Hosted Chat Options).

## JSON Structure Example (Conceptual - Hosted Mode)

```json
{
  "parameters": {
    "publicChat": true,
    "mode": "hosted",
    "authentication": "none", // or "basicAuth", "n8nUserAuth"
    // "credentials": { // If authentication = "basicAuth"
    //   "basicAuth": {
    //     "id": "YOUR_CREDENTIAL_ID",
    //     "name": "Basic Auth Credential Name"
    //   }
    // },
    "initialMessages": {
        "message": [
            {
                "message": "Welcome! How can I help you today?"
            }
        ]
    },
    "options": {
        "allowedOrigin": "*",
        "inputPlaceholder": "Type your message...",
        "title": "AI Assistant",
        "subtitle": "Powered by n8n",
        "loadPreviousSession": "fromMemory",
        "responseMode": "lastNode",
        "requireButtonClick": false
    }
  },
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "typeVersion": 1.1, // Version from initial file
  "position": [
    -320,
    1600
  ],
  "webhookId": "GENERATED_WEBHOOK_ID" // Automatically generated by n8n
}
```

---

## 140. Langchain_cohereModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "template": "Write a short poem about the ocean.",
        "options": {},
        "nodes": [
          {
            "parameters": {
              "model": "command", // Or "command-light", "command-nightly", etc.
              "options": {
                "maxTokens": 250,
                "temperature": 0.75
              }
            },
            "id": "cohere-llm-uuid",
            "name": "Cohere Model",
            "type": "@n8n/n8n-nodes-langchain.lmcohere",
            "typeVersion": 1,
            "position": [
              1400,
              400
            ],
            "credentials": {
              "cohereApi": {
                "id": "cohereCredentialId",
                "name": "Cohere account"
              }
            }
          }
        ],
        "connections": {
          "llm": {
            "main": [
              [
                {
                  "node": "cohere-llm-uuid",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      },
      "id": "llm-chain-uuid",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainllm",
      "typeVersion": 1,
      "position": [
        1200,
        500
      ]
    }
  ],
  "connections": {}
}
```

---

## 141. Langchain_embeddingsAwsBedrock.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "amazon.titan-embed-text-v1", // Or other available Bedrock embedding models
        "region": "us-west-2"
        // "options": {} // Optional parameters if needed
      },
      "id": "aws-bedrock-embeddings-uuid",
      "name": "Embeddings AWS Bedrock",
      "type": "@n8n/n8n-nodes-langchain.embeddingsawsbedrock",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "aws": {
          "id": "awsCredentialId",
          "name": "AWS account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "amazon.titan-embed-text-v1",
        "region": "us-west-2"
      },
      "id": "aws-bedrock-embeddings-uuid", // Reference this node
      "name": "Embeddings AWS Bedrock",
      "type": "@n8n/n8n-nodes-langchain.embeddingsawsbedrock",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "aws-bedrock-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aws-bedrock-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 142. Langchain_embeddingsAzureOpenAI.md ---

## Embeddings Azure OpenAI Node

**Node Type:** Sub-node (LangChain)

**Description:**

This node generates vector embeddings for input text using a specified Azure OpenAI embedding model deployment. Embeddings are numerical representations of text used in various AI tasks like semantic search, clustering, and classification, often in conjunction with vector stores.

**Credentials:**

Requires Azure OpenAI credentials configured in n8n. Refer to the [Azure OpenAI credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/azureopenai/) for setup instructions.

**Note on Parameter Resolution:**

Sub-nodes handle multiple input items differently than standard nodes. When using expressions (like `{{ $json.someValue }}`) within a sub-node's parameters, the expression will always resolve based on the *first* input item, even if multiple items are passed to the node.

**Parameters/Options:**

*   **Model (Deployment) Name:** (Required) Specify the name of your deployed Azure OpenAI embedding model (e.g., `text-embedding-ada-002`).
*   **Batch Size:** (Number, Default: 512) The maximum number of text documents to process in a single request to the Azure OpenAI API. Adjust based on API limits and performance considerations.
*   **Strip New Lines:** (Boolean, Default: true) If enabled, newline characters (`\n`) are removed from the input text before generating embeddings. Disable if newlines are significant for your use case.
*   **Timeout:** (Number, Seconds) The maximum time allowed for the request to Azure OpenAI before timing out. Set to `-1` for no timeout.

**Related Resources:**

*   [LangChain OpenAI Embeddings Documentation](https://python.langchain.com/docs/integrations/text_embedding/azureopenai)
*   [n8n Advanced AI Documentation](https://docs.n8n.io/advanced-ai/)

---

## 143. Langchain_embeddingsCohere.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "embed-multilingual-v2.0", // Or "embed-english-v2.0", "embed-english-light-v2.0"
        "options": {
          // No specific options mentioned in docs for this node, but keep structure for potential future additions
        }
      },
      "id": "cohere-embeddings-uuid",
      "name": "Embeddings Cohere",
      "type": "@n8n/n8n-nodes-langchain.embeddingscohere",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "cohereApi": {
          "id": "cohereCredentialId",
          "name": "Cohere account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "embed-multilingual-v2.0"
      },
      "id": "cohere-embeddings-uuid", // Reference this node
      "name": "Embeddings Cohere",
      "type": "@n8n/n8n-nodes-langchain.embeddingscohere",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "cohere-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cohere-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 144. Langchain_embeddingsGooglePalm.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "models/embedding-gecko-001", // Example model, actual list loaded dynamically
        "options": {
          // No specific options mentioned in docs for this node, but keep structure
        }
      },
      "id": "google-palm-embeddings-uuid",
      "name": "Embeddings Google PaLM",
      "type": "@n8n/n8n-nodes-langchain.embeddingsgooglepalm",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "googlePalmApi": {
          "id": "googlePalmCredentialId",
          "name": "Google PaLM account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "models/embedding-gecko-001"
      },
      "id": "google-palm-embeddings-uuid", // Reference this node
      "name": "Embeddings Google PaLM",
      "type": "@n8n/n8n-nodes-langchain.embeddingsgooglepalm",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "google-palm-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "google-palm-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 145. Langchain_embeddingsHuggingFaceInference.md ---

```json
{
  "nodes": [
    // Example 1: Using a public Hugging Face model
    {
      "parameters": {
        "model": "sentence-transformers/all-MiniLM-L6-v2", // Example model
        "options": {}
      },
      "id": "hf-embeddings-public-uuid",
      "name": "Embeddings HF Inference (Public)",
      "type": "@n8n/n8n-nodes-langchain.embeddingshuggingfaceinference",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "huggingFaceCredentialId",
          "name": "Hugging Face account"
        }
      }
    },
    // Example 2: Using a custom inference endpoint
    {
      "parameters": {
        // Model parameter is ignored when custom endpoint is set
        "options": {
          "customEndpoint": "https://your-custom-hf-inference-endpoint.com"
        }
      },
      "id": "hf-embeddings-custom-uuid",
      "name": "Embeddings HF Inference (Custom)",
      "type": "@n8n/n8n-nodes-langchain.embeddingshuggingfaceinference",
      "typeVersion": 1,
      "position": [
        1400,
        600
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "huggingFaceCredentialId", // Still needed for authentication potentially
          "name": "Hugging Face account"
        }
      }
    }
    // These nodes would typically be connected after a Text Splitter
    // and before a Vector Store node.
  ],
  "connections": {}
}
```

---

## 146. Langchain_embeddingsMistralCloud.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "mistral-embed", // Default and currently only model
        "options": {
          "batchSize": 32, // Default batch size
          "stripNewLines": true // Default setting
        }
      },
      "id": "mistral-embeddings-uuid",
      "name": "Embeddings Mistral Cloud",
      "type": "@n8n/n8n-nodes-langchain.embeddingsmistralcloud",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "mistralCloudApi": {
          "id": "mistralCredentialId",
          "name": "Mistral Cloud account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "mistral-embed",
        "options": {
          "batchSize": 64, // Example: Larger batch size
          "stripNewLines": false // Example: Keep new lines
        }
      },
      "id": "mistral-embeddings-uuid", // Reference this node
      "name": "Embeddings Mistral Cloud",
      "type": "@n8n/n8n-nodes-langchain.embeddingsmistralcloud",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "mistral-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mistral-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 147. Langchain_embeddingsOllama.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "nomic-embed-text", // Or "all-minilm"
        "options": {
          // No specific options mentioned in docs for this node
        }
      },
      "id": "ollama-embeddings-uuid",
      "name": "Embeddings Ollama",
      "type": "@n8n/n8n-nodes-langchain.embeddingsollama",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "ollamaApi": {
          "id": "ollamaCredentialId",
          "name": "Ollama account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "nomic-embed-text"
      },
      "id": "ollama-embeddings-uuid", // Reference this node
      "name": "Embeddings Ollama",
      "type": "@n8n/n8n-nodes-langchain.embeddingsollama",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "ollama-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ollama-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 148. Langchain_embeddingsOpenAI.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "text-embedding-3-large", // Or "text-embedding-3-small", "text-embedding-ada-002"
        "options": {
          "batchSize": 512, // Example batch size
          "stripNewLines": true, // Default
          "timeout": 60 // Example timeout in seconds
          // "baseUrl": "https://your-openai-compatible-endpoint.com" // Optional for self-hosted/proxy
        }
      },
      "id": "openai-embeddings-uuid",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsopenai",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "openAiCredentialId",
          "name": "OpenAI account"
        }
      }
    }
    // This node would typically be connected after a Text Splitter
    // and before a Vector Store node.
    // Example:
    /*
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": {
        "model": "text-embedding-3-large"
      },
      "id": "openai-embeddings-uuid", // Reference this node
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsopenai",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "openai-embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings", // Connect to the 'embeddings' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 149. Langchain_githubDocumentLoader.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "repositoryUrl": "https://github.com/n8n-io/n8n", // Example repository URL
        "branch": "master", // Example branch
        "options": {
          "recursive": true, // Default: true
          "ignorePaths": [
            ".git",
            "node_modules"
          ] // Example paths to ignore
        }
      },
      "id": "github-doc-loader-uuid",
      "name": "GitHub Document Loader",
      "type": "@n8n/n8n-nodes-langchain.documentgithubloader",
      "typeVersion": 1,
      "position": [
        1200,
        400
      ],
      "credentials": {
        "githubApi": {
          "id": "githubCredentialId", // Use Personal Access Token credentials
          "name": "GitHub account (PAT)"
        }
      }
    }
    // This node would typically be connected before a Text Splitter
    // or directly to a summarization chain/node.
    // Example:
    /*
    {
      "parameters": { ... }, // GitHub Loader parameters
      "id": "github-doc-loader-uuid",
      "name": "GitHub Document Loader",
      "type": "@n8n/n8n-nodes-langchain.documentgithubloader",
      ...
    },
    {
      "parameters": { ... }, // Text Splitter parameters
      "id": "text-splitter-uuid",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter",
      ...
    },
    {
      "parameters": { ... }, // Embeddings parameters
      "id": "embeddings-uuid",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsopenai",
      ...
    },
    {
      "parameters": { ... }, // Vector Store parameters (e.g., Pinecone Upsert)
      "id": "vector-store-uuid",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepinecone",
      "operation": "upsert",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "github-doc-loader-uuid": {
      "main": [
        [
          {
            "node": "text-splitter-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text-splitter-uuid": {
      "main": [
        [
          {
            "node": "embeddings-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embeddings-uuid": {
      "main": [
        [
          {
            "node": "vector-store-uuid",
            "type": "embeddings",
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 150. Langchain_huggingFaceInferenceModel.md ---

```json
{
  "nodes": [
    // Example 1: Using a public Hugging Face model with basic options
    {
      "parameters": {
        "model": "google/flan-t5-large", // Example model for text generation
        "options": {
          "maxTokens": 256, // Limit completion length
          "temperature": 0.7 // Control randomness
        }
      },
      "id": "hf-model-basic-uuid",
      "name": "HF Inference Model (Basic)",
      "type": "@n8n/n8n-nodes-langchain.lmopenhuggingfaceinference",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "huggingFaceCredentialId",
          "name": "Hugging Face account"
        }
      }
    },
    // Example 2: Using a custom inference endpoint with more options
    {
      "parameters": {
        // Model parameter is ignored when custom endpoint is set
        "options": {
          "customEndpoint": "https://your-custom-hf-inference-endpoint.com",
          "frequencyPenalty": 0.5, // Reduce repetition
          "presencePenalty": 0.2, // Encourage new topics slightly
          "topK": 50, // Consider top 50 tokens
          "topP": 0.9 // Use top 90% probability mass
        }
      },
      "id": "hf-model-custom-uuid",
      "name": "HF Inference Model (Custom)",
      "type": "@n8n/n8n-nodes-langchain.lmopenhuggingfaceinference",
      "typeVersion": 1,
      "position": [
        1400,
        600
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "huggingFaceCredentialId", // Still needed for authentication potentially
          "name": "Hugging Face account"
        }
      }
    }
    // This node would typically be connected after a Prompt Template
    // or as part of an Agent/Chain.
  ],
  "connections": {}
}
```

---

## 151. Langchain_mistralCloudChatModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "mistral-large-latest", // Example model, list loaded dynamically
        "options": {
          "maxTokens": 1024, // Example max tokens
          "temperature": 0.7, // Default temperature
          "topP": 1.0, // Default Top P
          "safeMode": false, // Default safe mode
          "randomSeed": null // Default random seed (null for non-deterministic)
          // "timeout": 30000, // Optional timeout in ms
          // "maxRetries": 3 // Optional max retries
        }
      },
      "id": "mistral-chat-uuid",
      "name": "Mistral Cloud Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatmistralcloud",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "mistralCloudApi": {
          "id": "mistralCredentialId",
          "name": "Mistral Cloud account"
        }
      }
    }
    // This node would typically be connected after a Prompt Template
    // or as part of an Agent/Chain.
    // Example:
    /*
    {
      "parameters": { ... }, // Prompt Template parameters
      "id": "prompt-template-uuid",
      "name": "Prompt Template",
      "type": "@n8n/n8n-nodes-langchain.prompttemplate",
      ...
    },
    {
      "parameters": {
        "model": "mistral-small-latest",
        "options": {
          "temperature": 0.2,
          "safeMode": true
        }
      },
      "id": "mistral-chat-uuid", // Reference this node
      "name": "Mistral Cloud Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatmistralcloud",
      ...
    }
    // Connect prompt template output to this node's input
    */
  ],
  "connections": {
    // Example connection:
    /*
    "prompt-template-uuid": {
      "main": [
        [
          {
            "node": "mistral-chat-uuid",
            "type": "prompt", // Connect to the 'prompt' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 152. Langchain_motorheadMemory.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "sessionId": "{{ $json.userId || \"default-session\" }}" // Dynamically set session ID, fallback to default
      },
      "id": "motorhead-memory-uuid",
      "name": "Motorhead Memory",
      "type": "@n8n/n8n-nodes-langchain.memorymotorhead",
      "typeVersion": 1,
      "position": [
        1000,
        600
      ],
      "credentials": {
        "motorheadApi": {
          "id": "motorheadCredentialId",
          "name": "Motorhead Instance"
        }
      }
    }
    // This node acts as a memory provider and would be connected
    // to a chain or agent that requires memory.
    // Example: Connecting to an AI Agent
    /*
    {
      "parameters": { ... }, // AI Agent parameters
      "id": "ai-agent-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    },
    {
      "parameters": {
        "sessionId": "{{ $json.conversationId }}"
      },
      "id": "motorhead-memory-uuid", // Reference this node
      "name": "Motorhead Memory",
      "type": "@n8n/n8n-nodes-langchain.memorymotorhead",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "motorhead-memory-uuid": {
      "main": [
        [
          {
            "node": "ai-agent-uuid",
            "type": "memory", // Connect to the 'memory' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 153. Langchain_ollamaChatModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "llama2", // Or llama2:13b, llama2:70b, llama2-uncensored, or other models available in your Ollama instance
        "options": {
          "temperature": 0.7, // Example temperature
          "topK": 40, // Example Top K
          "topP": 0.9 // Example Top P
          // "baseUrl": "http://localhost:11434" // Default, change if Ollama runs elsewhere
          // "requestTimeout": 120000 // Optional timeout in ms
        }
      },
      "id": "ollama-chat-uuid",
      "name": "Ollama Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatollama",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ]
      // No credentials needed, assumes Ollama is running locally and accessible
    }
    // This node would typically be connected after a Prompt Template
    // or as part of an Agent/Chain.
    // Example:
    /*
    {
      "parameters": { ... }, // Prompt Template parameters
      "id": "prompt-template-uuid",
      "name": "Prompt Template",
      "type": "@n8n/n8n-nodes-langchain.prompttemplate",
      ...
    },
    {
      "parameters": {
        "model": "llama2:13b",
        "options": {
          "temperature": 0.2
        }
      },
      "id": "ollama-chat-uuid", // Reference this node
      "name": "Ollama Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatollama",
      ...
    }
    // Connect prompt template output to this node's input
    */
  ],
  "connections": {
    // Example connection:
    /*
    "prompt-template-uuid": {
      "main": [
        [
          {
            "node": "ollama-chat-uuid",
            "type": "prompt", // Connect to the 'prompt' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 154. Langchain_ollamaModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "llama2", // Or llama2:13b, llama2:70b, llama2-uncensored, or other models available in your Ollama instance
        "options": {
          "temperature": 0.7, // Example temperature
          "topK": 40, // Example Top K
          "topP": 0.9 // Example Top P
          // "baseUrl": "http://localhost:11434" // Default, change if Ollama runs elsewhere
          // "requestTimeout": 120000 // Optional timeout in ms
        }
      },
      "id": "ollama-model-uuid",
      "name": "Ollama Model",
      "type": "@n8n/n8n-nodes-langchain.lmollama", // Note: This is the non-chat model endpoint
      "typeVersion": 1,
      "position": [
        1400,
        400
      ]
      // No credentials needed, assumes Ollama is running locally and accessible
    }
    // This node provides a standard LLM interface (not chat-specific).
    // It would typically be connected after a Prompt Template.
    // Example:
    /*
    {
      "parameters": { ... }, // Prompt Template parameters
      "id": "prompt-template-uuid",
      "name": "Prompt Template",
      "type": "@n8n/n8n-nodes-langchain.prompttemplate",
      ...
    },
    {
      "parameters": {
        "model": "llama2:13b",
        "options": {
          "temperature": 0.2
        }
      },
      "id": "ollama-model-uuid", // Reference this node
      "name": "Ollama Model",
      "type": "@n8n/n8n-nodes-langchain.lmollama",
      ...
    }
    // Connect prompt template output to this node's input
    */
  ],
  "connections": {
    // Example connection:
    /*
    "prompt-template-uuid": {
      "main": [
        [
          {
            "node": "ollama-model-uuid",
            "type": "prompt", // Connect to the 'prompt' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 155. Langchain_openAIChatModel.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4-turbo", // Or gpt-4, gpt-3.5-turbo, etc. (list loaded dynamically)
        "options": {
          "maxTokens": 1024, // Example max tokens
          "temperature": 0.7, // Default temperature
          "responseFormat": "text", // Or "json"
          "frequencyPenalty": 0.0, // Default
          "presencePenalty": 0.0, // Default
          "topP": 1.0 // Default
          // "baseUrl": "https://your-openai-compatible-endpoint.com", // Optional for self-hosted/proxy
          // "timeout": 60000, // Optional timeout in ms
          // "maxRetries": 3 // Optional max retries
        }
      },
      "id": "openai-chat-uuid",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatopenai",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "openAiCredentialId",
          "name": "OpenAI account"
        }
      }
    }
    // This node would typically be connected after a Prompt Template
    // or as part of an Agent/Chain.
    // Example:
    /*
    {
      "parameters": { ... }, // Prompt Template parameters
      "id": "prompt-template-uuid",
      "name": "Prompt Template",
      "type": "@n8n/n8n-nodes-langchain.prompttemplate",
      ...
    },
    {
      "parameters": {
        "model": "gpt-3.5-turbo",
        "options": {
          "temperature": 0.2,
          "responseFormat": "json"
        }
      },
      "id": "openai-chat-uuid", // Reference this node
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmchatopenai",
      ...
    }
    // Connect prompt template output to this node's input
    */
  ],
  "connections": {
    // Example connection:
    /*
    "prompt-template-uuid": {
      "main": [
        [
          {
            "node": "openai-chat-uuid",
            "type": "prompt", // Connect to the 'prompt' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 156. Langchain_pgvectorVectorStore.md ---

```json
{
  "nodes": [
    // Example 1: Inserting Documents
    {
      "parameters": {
        "operationMode": "insertDocuments",
        "tableName": "my_documents_table",
        "options": {
          "useCollection": true,
          "collectionName": "my_collection",
          "collectionTableName": "my_collections_table", // Optional, defaults if not set
          "idColumnName": "uuid", // Optional, defaults if not set
          "vectorColumnName": "embedding", // Optional, defaults if not set
          "contentColumnName": "document", // Optional, defaults if not set
          "metadataColumnName": "metadata" // Optional, defaults if not set
        }
      },
      "id": "pgvector-insert-uuid",
      "name": "PGVector Insert",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepgvector",
      "typeVersion": 1,
      "position": [
        1600,
        200
      ],
      "credentials": {
        "postgres": {
          "id": "postgresCredentialId",
          "name": "My Postgres DB"
        }
      }
      // Requires an Embeddings node and Document node connected to its inputs
    },
    // Example 2: Getting Documents (Similarity Search)
    {
      "parameters": {
        "operationMode": "getMany",
        "tableName": "my_documents_table",
        "prompt": "{{ $json.query }}", // User query for similarity search
        "limit": 5, // Retrieve top 5 similar documents
        "options": {
          "useCollection": true,
          "collectionName": "my_collection",
          "metadataFilter": {
            "filter": [
              {
                "key": "source",
                "value": "manual"
              }
              // Add more metadata filters if needed (AND logic)
            ]
          }
        }
      },
      "id": "pgvector-get-uuid",
      "name": "PGVector Get Many",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepgvector",
      "typeVersion": 1,
      "position": [
        1600,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "postgresCredentialId",
          "name": "My Postgres DB"
        }
      }
      // Requires an Embeddings node connected to its input
    },
    // Example 3: Retrieve for Chain/Tool (e.g., Vector Store Retriever)
    {
      "parameters": {
        "operationMode": "retrieveDocumentsChainTool",
        "tableName": "my_documents_table",
        "options": {
          "useCollection": true,
          "collectionName": "my_collection"
        }
      },
      "id": "pgvector-retrieve-chain-uuid",
      "name": "PGVector Retrieve for Chain",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepgvector",
      "typeVersion": 1,
      "position": [
        1600,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "postgresCredentialId",
          "name": "My Postgres DB"
        }
      }
      // Connect this node to the 'Vector Store' input of a Vector Store Retriever
    },
    // Example 4: Retrieve as Tool for AI Agent
    {
      "parameters": {
        "operationMode": "retrieveDocumentsAgentTool",
        "name": "product_database_search",
        "description": "Searches the product database for relevant items based on user query.",
        "tableName": "my_documents_table",
        "limit": 3,
        "options": {
          "useCollection": true,
          "collectionName": "my_collection"
        }
      },
      "id": "pgvector-retrieve-agent-uuid",
      "name": "PGVector Retrieve for Agent",
      "type": "@n8n/n8n-nodes-langchain.vectorstorepgvector",
      "typeVersion": 1,
      "position": [
        1600,
        800
      ],
      "credentials": {
        "postgres": {
          "id": "postgresCredentialId",
          "name": "My Postgres DB"
        }
      }
      // Connect this node to the 'Tools' input of an AI Agent node
    }
  ],
  "connections": {
    // Example connection for Insert:
    /*
    "DocumentLoaderNode": {
      "main": [
        [
          {
            "node": "EmbeddingsNode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EmbeddingsNode": {
       "main": [
        [
          {
            "node": "pgvector-insert-uuid",
            "type": "embeddings",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for Get Many:
    /*
    "EmbeddingsNode": {
       "main": [
        [
          {
            "node": "pgvector-get-uuid",
            "type": "embeddings",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for Retrieve for Chain/Tool:
    /*
    "pgvector-retrieve-chain-uuid": {
      "main": [
        [
          {
            "node": "VectorStoreRetrieverNode",
            "type": "vectorStore",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for Retrieve as Tool for Agent:
    /*
    "pgvector-retrieve-agent-uuid": {
      "main": [
        [
          {
            "node": "AIAgentNode",
            "type": "tool",
            "index": 0 // Or appropriate tool index
          }
        ]
      ]
    }
    */
  }
}
```

---

## 157. Langchain_postgresChatMemory.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "sessionKey": "{{ $json.userId || \"default-session\" }}", // Dynamically set session key, fallback to default
        "tableName": "n8n_chat_history", // Name for the chat history table
        "contextWindowLength": 10 // Example: Remember last 10 messages (5 pairs)
      },
      "id": "postgres-chat-memory-uuid",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memorypostgreschat",
      "typeVersion": 1,
      "position": [
        1000,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "postgresCredentialId",
          "name": "My Postgres DB"
        }
      }
    }
    // This node acts as a memory provider and would be connected
    // to a chain or agent that requires memory.
    // Example: Connecting to an AI Agent
    /*
    {
      "parameters": { ... }, // AI Agent parameters
      "id": "ai-agent-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    },
    {
      "parameters": {
        "sessionKey": "{{ $json.conversationId }}",
        "tableName": "agent_conversations",
        "contextWindowLength": 20
      },
      "id": "postgres-chat-memory-uuid", // Reference this node
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memorypostgreschat",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "postgres-chat-memory-uuid": {
      "main": [
        [
          {
            "node": "ai-agent-uuid",
            "type": "memory", // Connect to the 'memory' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 158. Langchain_qdrantVectorStore.md ---

```json
{
  "nodes": [
    // Example 1: Inserting Documents
    {
      "parameters": {
        "operationMode": "insertDocuments",
        "collectionName": "my_qdrant_collection",
        "options": {
          "collectionConfig": "{\"vectors\":{\"size\": 1536, \"distance\": \"Cosine\"}}" // Example config for OpenAI embeddings
        }
      },
      "id": "qdrant-insert-uuid",
      "name": "Qdrant Insert",
      "type": "@n8n/n8n-nodes-langchain.vectorstoreqdrant",
      "typeVersion": 1,
      "position": [
        1800,
        200
      ],
      "credentials": {
        "qdrantApi": {
          "id": "qdrantCredentialId",
          "name": "My Qdrant Cloud/Instance"
        }
      }
      // Requires an Embeddings node and Document node connected to its inputs
    },
    // Example 2: Getting Documents (Similarity Search)
    {
      "parameters": {
        "operationMode": "getMany",
        "collectionName": "my_qdrant_collection",
        "prompt": "{{ $json.query }}", // User query for similarity search
        "limit": 5, // Retrieve top 5 similar documents
        "options": {
          "metadataFilter": {
            "filter": [
              {
                "key": "metadata.category", // Qdrant uses dot notation for nested fields
                "value": "tech"
              }
              // Add more metadata filters if needed (AND logic)
            ]
          }
        }
      },
      "id": "qdrant-get-uuid",
      "name": "Qdrant Get Many",
      "type": "@n8n/n8n-nodes-langchain.vectorstoreqdrant",
      "typeVersion": 1,
      "position": [
        1800,
        400
      ],
      "credentials": {
        "qdrantApi": {
          "id": "qdrantCredentialId",
          "name": "My Qdrant Cloud/Instance"
        }
      }
      // Requires an Embeddings node connected to its input
    },
    // Example 3: Retrieve for Chain/Tool (e.g., Vector Store Retriever)
    {
      "parameters": {
        "operationMode": "retrieveDocumentsChainTool",
        "collectionName": "my_qdrant_collection",
        "options": {
          "metadataFilter": {
            "filter": [] // Optional filter for retrieval
          }
        }
      },
      "id": "qdrant-retrieve-chain-uuid",
      "name": "Qdrant Retrieve for Chain",
      "type": "@n8n/n8n-nodes-langchain.vectorstoreqdrant",
      "typeVersion": 1,
      "position": [
        1800,
        600
      ],
      "credentials": {
        "qdrantApi": {
          "id": "qdrantCredentialId",
          "name": "My Qdrant Cloud/Instance"
        }
      }
      // Connect this node to the 'Vector Store' input of a Vector Store Retriever
    },
    // Example 4: Retrieve as Tool for AI Agent
    {
      "parameters": {
        "operationMode": "retrieveDocumentsAgentTool",
        "name": "knowledge_base_search",
        "description": "Searches the company knowledge base for relevant articles based on user query.",
        "collectionName": "my_qdrant_collection",
        "limit": 3
      },
      "id": "qdrant-retrieve-agent-uuid",
      "name": "Qdrant Retrieve for Agent",
      "type": "@n8n/n8n-nodes-langchain.vectorstoreqdrant",
      "typeVersion": 1,
      "position": [
        1800,
        800
      ],
      "credentials": {
        "qdrantApi": {
          "id": "qdrantCredentialId",
          "name": "My Qdrant Cloud/Instance"
        }
      }
      // Connect this node to the 'Tools' input of an AI Agent node
    }
  ],
  "connections": {
    // Connections similar to PGVector examples would apply here,
    // connecting Embeddings, Document Loaders, Retrievers, or Agents
    // based on the chosen operationMode.
  }
}
```

---

## 159. Langchain_redisChatMemory.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "sessionKey": "{{ $json.userId || \"default-session\" }}", // Dynamically set session key, fallback to default
        "sessionTtl": 3600, // Example: Session expires after 1 hour (3600 seconds)
        "contextWindowLength": 10 // Example: Remember last 10 messages (5 pairs)
      },
      "id": "redis-chat-memory-uuid",
      "name": "Redis Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryredischat",
      "typeVersion": 1,
      "position": [
        1000,
        600
      ],
      "credentials": {
        "redis": {
          "id": "redisCredentialId",
          "name": "My Redis Instance"
        }
      }
    }
    // This node acts as a memory provider and would be connected
    // to a chain or agent that requires memory.
    // Example: Connecting to an AI Agent
    /*
    {
      "parameters": { ... }, // AI Agent parameters
      "id": "ai-agent-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    },
    {
      "parameters": {
        "sessionKey": "{{ $json.conversationId }}",
        "sessionTtl": 7200, // 2 hours
        "contextWindowLength": 20
      },
      "id": "redis-chat-memory-uuid", // Reference this node
      "name": "Redis Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryredischat",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "redis-chat-memory-uuid": {
      "main": [
        [
          {
            "node": "ai-agent-uuid",
            "type": "memory", // Connect to the 'memory' input
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 160. Langchain_serpApiTool.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "name": "google_search", // Tool name for the agent
        "description": "A wrapper around Google Search. Useful for when you need to answer questions about current events. Input should be a search query.", // Description for the agent
        "options": {
          "country": "us", // Example: United States
          "language": "en", // Example: English
          "googleDomain": "google.com" // Example: Standard Google domain
          // "device": "desktop", // Optional: desktop, tablet, mobile
          // "explicitArray": false // Optional: Force fresh results
        }
      },
      "id": "serpapi-tool-uuid",
      "name": "SerpApi Tool",
      "type": "@n8n/n8n-nodes-langchain.toolserpapi",
      "typeVersion": 1,
      "position": [
        1400,
        800
      ],
      "credentials": {
        "serpApi": {
          "id": "serpApiCredentialId",
          "name": "My SerpApi Key"
        }
      }
    }
    // This node acts as a tool and would be connected
    // to the 'Tools' input of an AI Agent node.
    /*
    {
      "parameters": { ... }, // AI Agent parameters
      "id": "ai-agent-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    }
    */
  ],
  "connections": {
    // Example connection:
    /*
    "serpapi-tool-uuid": {
      "main": [
        [
          {
            "node": "ai-agent-uuid",
            "type": "tool", // Connect to the 'tool' input
            "index": 0 // Or appropriate tool index
          }
        ]
      ]
    }
    */
  }
}
```

---

## 161. Langchain_supabaseVectorStore.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "insert", // Or "getMany", "retrieveChainTool", "retrieveAgentTool", "update"
        "tableName": "documents", // Your Supabase table name (default from quickstart)
        // Parameters for 'insert' operation:
        "document": "{{ $json.documentContent }}", // Input document(s)
        // Parameters for 'getMany' operation:
        // "prompt": "{{ $json.searchQuery }}",
        // "limit": 5,
        // "options": {
        //   "queryName": "match_documents", // Default from quickstart
        //   "metadataFilter": {
        //     "metadata": {
        //       "source": "{{ $json.sourceFilter }}"
        //     }
        //   }
        // }
        // Parameters for 'retrieveChainTool' operation:
        // (No specific parameters other than tableName)
        // Parameters for 'retrieveAgentTool' operation:
        // "name": "supabase_knowledge_search",
        // "description": "Searches the Supabase knowledge base for relevant documents.",
        // "limit": 3,
        // "options": {
        //   "queryName": "match_documents"
        // }
        // Parameters for 'update' operation:
        // "document": "{{ $json.updatedContent }}",
        // "id": "{{ $json.documentIdToUpdate }}"
      },
      "id": "supabase-vector-store-uuid",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstoresupabase",
      "typeVersion": 1,
      "position": [
        800,
        400
      ],
      "credentials": {
        "supabaseVectorApi": {
          "id": "supabaseCredentialId",
          "name": "My Supabase Credentials"
        }
      }
      // Requires an Embeddings node connected to the 'Embeddings' input
    }
    // Example supporting Embeddings node:
    /*
    {
      "parameters": { ... }, // Embeddings parameters (e.g., OpenAI Embeddings)
      "id": "embeddings-node-uuid",
      "name": "Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsopenai", // Or other embeddings node
      ...
    }
    */
    // Example usage with a Retriever for a QA Chain:
    /*
    {
      "parameters": {
        "operation": "retrieveChainTool",
        "tableName": "documents"
      },
      "id": "supabase-vector-store-uuid", ...
    },
    {
      "parameters": { ... }, // Retriever parameters
      "id": "retriever-node-uuid",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrievervectorstore",
      ...
    },
    {
      "parameters": { ... }, // QA Chain parameters
      "id": "qa-chain-uuid",
      "name": "Question Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainretrievalqa",
      ...
    }
    */
  ],
  "connections": {
    // Example connection for Embeddings:
    /*
    "embeddings-node-uuid": {
      "main": [
        [
          {
            "node": "supabase-vector-store-uuid",
            "type": "embeddings",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for Retriever usage:
    /*
    "supabase-vector-store-uuid": {
      "main": [
        [
          {
            "node": "retriever-node-uuid",
            "type": "vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "retriever-node-uuid": {
      "main": [
        [
          {
            "node": "qa-chain-uuid",
            "type": "retriever",
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 162. Langchain_vectorStoreRetrieverPinecone.md ---

# @n8n/n8n-nodes-langchain.vectorStoreRetrieverPinecone

## Description

The Pinecone Vector Store Retriever node (type `@n8n/n8n-nodes-langchain.vectorStoreRetrieverPinecone` as seen in user input, likely a specialized version or configuration of the generic `n8n-nodes-langchain.retrievervectorstore` sub-node) is used within LangChain workflows in n8n to retrieve relevant documents from a Pinecone vector store based on a query.

This node typically functions as a sub-node connected to a root Vector Store node (specifically, a Pinecone Vector Store root node like `n8n-nodes-langchain.vectorstorepinecone`) which handles the connection configuration and credentials for Pinecone and the embedding model (e.g., OpenAI).

## Parameters

*   **Query**: (String/Expression) The input query string used to search for relevant documents in the Pinecone vector store.
*   **Limit / K**: (Number, Optional) The maximum number of relevant documents to retrieve. The generic retriever documentation mentions `Limit`, while LangChain often uses `k`. Defaults typically apply (e.g., 4).
*   **Filter**: (Object, Optional) Metadata filtering criteria to apply during the search within Pinecone. *This is a common Pinecone feature, inferred as potentially available.*
*   **Namespace**: (String, Optional) The specific Pinecone namespace to search within. *This is often configured in the root node but might be overridable here.*

## Connection Requirements

*   Requires connection to a configured Pinecone Vector Store root node.
*   The root node requires credentials for:
    *   **Pinecone API**: API Key and Environment.
    *   **Embedding Model API** (e.g., OpenAI API): API Key.

## JSON Structure Example (Conceptual, based on user input)

```json
{
  "parameters": {
    "query": "{{ $json.message }}", // The search query
    "options": {
        "k": 4 // Example: Retrieve top 4 documents
        // "filter": { "genre": "sci-fi" } // Example filter
        // "namespace": "my-documents" // Example namespace
    }
  },
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreRetrieverPinecone",
  "typeVersion": 1,
  "position": [
    500,
    1600
  ],
  "credentials": {
    // Credentials are typically defined in the connected ROOT node,
    // but sometimes might be referenced or inherited here depending on n8n version/implementation.
    // Example from user input (likely defined in the root node):
    "pineconeApi": {
      "id": "pinecone-account",
      "name": "Pinecone account"
    },
    "openAiApi": {
      "id": "openai-account",
      "name": "OpenAI account"
    }
  }
}
```

*Note: The exact parameter structure within `options` might vary. The `credentials` block shown here was present in the user's example for this node type, although typically credentials reside in the root node for sub-nodes.*

---

## 163. Langchain_vectorStoreUpsertPinecone.md ---

# @n8n/n8n-nodes-langchain.vectorStoreUpsertPinecone

## Description

The Pinecone Vector Store Upsert node (type `@n8n/n8n-nodes-langchain.vectorStoreUpsertPinecone` as seen in user input) is used within LangChain workflows in n8n to insert or update documents (specifically, their vector embeddings and metadata) into a Pinecone vector store index.

This functionality is typically handled by the main Pinecone Vector Store root node (`n8n-nodes-langchain.vectorstorepinecone`) when set to the **Insert Documents** operation mode. The `vectorStoreUpsertPinecone` type likely represents this specific operation or configuration, possibly as a sub-node or a specialized variant in older versions or specific contexts.

## Operation Mode (within `n8n-nodes-langchain.vectorstorepinecone`)

*   **Insert Documents**: This mode is used to add new documents (embeddings and metadata) to the specified Pinecone index.

## Parameters (for Insert Documents mode)

*   **Documents**: (Array/Expression) The documents to be inserted. This input typically comes from a node that prepares or loads documents, often after being processed by a text splitter (like `textSplitterRecursive`). Each document usually contains `pageContent` and `metadata`.
*   **Pinecone Index**: (String) The name of the target Pinecone index where documents will be inserted.
*   **Pinecone Namespace**: (String, Optional) Specifies a namespace within the index to insert the documents. Helps segregate data within a single index.
*   **Clear Namespace**: (Boolean, Optional) If enabled, deletes all existing data within the specified namespace before inserting the new documents.
*   **Embedding Model**: (Implicit/Credential) The embedding model used to convert document text into vectors. This is configured via the credentials linked to the root node (e.g., OpenAI API credential).

## Connection Requirements

*   Requires connection to or configuration within a Pinecone Vector Store root node (`n8n-nodes-langchain.vectorstorepinecone`).
*   Requires credentials for:
    *   **Pinecone API**: API Key and Environment.
    *   **Embedding Model API** (e.g., OpenAI API): API Key.

## JSON Structure Example (Conceptual, based on user input)

```json
{
  "parameters": {
    // Operation mode might be implicit in the type or set explicitly in a root node
    // "operation": "insertDocuments", 
    "docs": "{{ $json.docs }}", // Input documents, likely from a text splitter
    "options": {
        "namespace": "my-knowledge-base", // Optional namespace
        "clearNamespace": false // Optional: Set to true to clear before upsert
    }
    // Pinecone Index is often set in the root node's main parameters or here
    // "pineconeIndex": "my-index-name"
  },
  "name": "Vector Store Upsert",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreUpsertPinecone",
  "typeVersion": 1,
  "position": [
    300,
    1600
  ],
  "credentials": {
    // Credentials defined in the root node are used.
    // The user input showed credentials here, which might be specific to how it was configured or an older pattern.
    "pineconeApi": {
      "id": "pinecone-account",
      "name": "Pinecone account"
    },
    "openAiApi": {
      "id": "openai-account",
      "name": "OpenAI account"
    }
  }
}
```

*Note: The primary configuration (Index, Credentials) usually resides in the root `n8n-nodes-langchain.vectorstorepinecone` node. The `vectorStoreUpsertPinecone` type might represent a specific instance focused solely on the upsert operation, potentially inheriting settings from a parent or requiring specific parameters like `docs`.*

---

## 164. Langchain_wikipediaTool.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "name": "Wikipedia Search", // Tool name for the agent
        "description": "A tool to search Wikipedia for information on a given topic. Input should be the search query.", // Description for the agent
        "options": {
          "topKResults": 3, // Max number of documents to return
          "maxDocContentLength": 2000 // Max characters per document
        }
      },
      "id": "wikipedia-tool-uuid",
      "name": "Wikipedia Tool",
      "type": "@n8n/n8n-nodes-langchain.toolwikipedia",
      "typeVersion": 1,
      "position": [
        1400,
        600
      ]
      // This node connects to the 'Tools' input of an AI Agent node.
      // It does not require an LLM connection directly.
    }
    // Example AI Agent node using this tool:
    /*
    {
      "parameters": { ... }, // Agent parameters
      "id": "agent-node-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    }
    */
  ],
  "connections": {
    // Example connection to Agent:
    /*
    "wikipedia-tool-uuid": {
      "main": [
        [
          {
            "node": "agent-node-uuid",
            "type": "tool",
            "index": 2 // Connect to another tool input
          }
        ]
      ]
    }
    */
  }
}
```

---

## 165. Langchain_wolframAlphaTool.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "name": "WolframAlpha Query", // Tool name for the agent
        "description": "A tool to query Wolfram Alpha for computational knowledge, math, science, and more. Input should be the query.", // Description for the agent
        "credentials": {
          "wolframAlphaApi": {
            "id": "YOUR_CREDENTIAL_ID", // Replace with your actual credential ID
            "name": "WolframAlpha API"
          }
        }
      },
      "id": "wolfram-tool-uuid",
      "name": "WolframAlpha Tool",
      "type": "@n8n/n8n-nodes-langchain.toolwolframalpha",
      "typeVersion": 1,
      "position": [
        1600,
        600
      ]
      // This node connects to the 'Tools' input of an AI Agent node.
      // It requires WolframAlpha API credentials.
    }
    // Example AI Agent node using this tool:
    /*
    {
      "parameters": { ... }, // Agent parameters
      "id": "agent-node-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    }
    */
  ],
  "connections": {
    // Example connection to Agent:
    /*
    "wolfram-tool-uuid": {
      "main": [
        [
          {
            "node": "agent-node-uuid",
            "type": "tool",
            "index": 3 // Connect to another tool input
          }
        ]
      ]
    }
    */
  }
}
```

---

## 166. Langchain_xataMemory.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "sessionId": "user-{{ $json.userId }}", // Unique session ID, often dynamic based on user
        "contextWindowLength": 10, // Number of past interactions to keep in memory
        "credentials": {
          "xataApi": {
            "id": "YOUR_XATA_CREDENTIAL_ID", // Replace with your actual Xata credential ID
            "name": "Xata API"
          }
        }
      },
      "id": "xata-memory-uuid",
      "name": "Xata Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryxata",
      "typeVersion": 1,
      "position": [
        800,
        800
      ]
      // This node provides memory capabilities using Xata.
      // Connects to the 'Memory' input of an AI Agent or Chain node.
      // Requires Xata API credentials.
    }
    // Example AI Agent node using this memory:
    /*
    {
      "parameters": { ... }, // Agent parameters
      "id": "agent-node-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    }
    */
  ],
  "connections": {
    // Example connection to Agent:
    /*
    "xata-memory-uuid": {
      "main": [
        [
          {
            "node": "agent-node-uuid",
            "type": "memory",
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 167. Langchain_zepMemory.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "sessionId": "chat-{{ $json.chatId }}", // Unique session ID, often dynamic
        "credentials": {
          "zepApi": {
            "id": "YOUR_ZEP_CREDENTIAL_ID", // Replace with your actual Zep credential ID
            "name": "Zep API"
          }
        }
      },
      "id": "zep-memory-uuid",
      "name": "Zep Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryzep",
      "typeVersion": 1,
      "position": [
        900,
        800
      ]
      // This node provides memory capabilities using a Zep server.
      // Connects to the 'Memory' input of an AI Agent or Chain node.
      // Requires Zep API credentials (URL and optional API Key).
    }
    // Example AI Agent node using this memory:
    /*
    {
      "parameters": { ... }, // Agent parameters
      "id": "agent-node-uuid",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      ...
    }
    */
  ],
  "connections": {
    // Example connection to Agent:
    /*
    "zep-memory-uuid": {
      "main": [
        [
          {
            "node": "agent-node-uuid",
            "type": "memory",
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 168. Langchain_zepVectorStore.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "operationMode": "insertDocuments", // Or "getMany", "retrieveDocumentsVectorStore", "retrieveDocumentsTool"
        "collectionName": "my_zep_collection",
        "credentials": {
          "zepApi": {
            "id": "YOUR_ZEP_CREDENTIAL_ID", // Replace with your actual Zep credential ID
            "name": "Zep API"
          }
        },
        // Parameters for "insertDocuments"
        "embeddings": {
          "embeddings": [
            {
              "node": "openai-embeddings-uuid", // Connect to an Embeddings node (e.g., OpenAI)
              "type": "embeddings",
              "index": 0
            }
          ]
        },
        "documents": "={{ $input.item.json.documents }}", // Input documents to insert
        "options": {
          "isAutoEmbedded": true // Let Zep handle embedding if true (requires Zep config)
          // "embeddingDimensions": 1536 // Specify if isAutoEmbedded is false and using external embeddings
        }
        // Parameters for "getMany"
        /*
        "prompt": "{{ $json.query }}",
        "limit": 5,
        "options": {
          "metadataFilter": {
            "filters": {
              "filter": [
                {
                  "fieldName": "source",
                  "value": "manual"
                }
              ]
            }
          }
        }
        */
        // Parameters for "retrieveDocumentsVectorStore"
        // (No specific parameters other than collectionName & credentials)

        // Parameters for "retrieveDocumentsTool"
        /*
        "name": "Zep Knowledge Base",
        "description": "Use this tool to search the Zep knowledge base for relevant documents based on the user query.",
        "limit": 3
        */
      },
      "id": "zep-vectorstore-uuid",
      "name": "Zep Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorstorezep",
      "typeVersion": 1,
      "position": [
        1200,
        800
      ]
      // This node interacts with a Zep Vector Store.
      // Usage depends on the operationMode.
      // - insertDocuments: Takes documents and embeddings as input.
      // - getMany: Takes a prompt, returns documents.
      // - retrieveDocumentsVectorStore: Connects to a Vector Store Retriever.
      // - retrieveDocumentsTool: Connects to an AI Agent's tool input.
    }
    // Example Embeddings Node (for insertDocuments)
    /*
    {
      "parameters": { ... }, // OpenAI Embeddings parameters
      "id": "openai-embeddings-uuid",
      "name": "OpenAI Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsopenai",
      ...
    }
    */
  ],
  "connections": {
    // Example connection for insertDocuments
    /*
    "openai-embeddings-uuid": {
      "main": [
        [
          {
            "node": "zep-vectorstore-uuid",
            "type": "embeddings",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for retrieveDocumentsVectorStore (to a Retriever)
    /*
    "zep-vectorstore-uuid": {
      "main": [
        [
          {
            "node": "vector-retriever-uuid",
            "type": "vectorStore",
            "index": 0
          }
        ]
      ]
    }
    */
    // Example connection for retrieveDocumentsTool (to an Agent)
    /*
    "zep-vectorstore-uuid": {
      "main": [
        [
          {
            "node": "agent-node-uuid",
            "type": "tool",
            "index": 5
          }
        ]
      ]
    }
    */
  }
}
```

---

## 169. Lemlist.md ---

# n8n Nodes: Lemlist & Lemlist Trigger

Lemlist is an email outreach and sales engagement platform. n8n provides built-in nodes to interact with Lemlist, allowing you to automate tasks related to leads, campaigns, activities, and trigger workflows based on events happening in Lemlist.

This document covers both the Lemlist action node (`n8n-nodes-base.lemlist`) and the Lemlist Trigger node (`n8n-nodes-base.lemlisttrigger`).

## Credentials

Both nodes require authentication using Lemlist credentials in n8n.

1.  **Generate API Key:** In your Lemlist account, go to **Settings > Integrations** and find the API section.
2.  **Copy API Key:** Copy the generated API Key.
3.  **Configure n8n Credential:**
    *   In n8n, create new credentials for Lemlist.
    *   Paste the copied **API Key** into the corresponding field.

See the official n8n documentation for detailed guidance on setting up [Lemlist credentials](https://docs.n8n.io/integrations/builtin/credentials/lemlist/).

## Lemlist Action Node (`n8n-nodes-base.lemlist`)

This node allows you to perform actions within Lemlist.

### Operations

*   **Activity**
    *   `Get Many`: Retrieves multiple activities based on specified filters.
*   **Campaign**
    *   `Get Many`: Retrieves multiple campaigns.
    *   `Get Stats`: Retrieves statistics for a specific campaign.
*   **Enrichment**
    *   `Get`: Fetches the results of a previously completed enrichment task.
    *   `Enrich Lead`: Initiates enrichment for a lead using an email or LinkedIn URL.
    *   `Enrich Person`: Initiates enrichment for a person using an email or LinkedIn URL.
*   **Lead**
    *   `Create`: Creates a new lead in Lemlist, optionally adding them to a campaign.
    *   `Delete`: Deletes an existing lead.
    *   `Get`: Retrieves details of an existing lead.
    *   `Unsubscribe`: Unsubscribes an existing lead from campaigns.
*   **Team**
    *   `Get`: Retrieves details of your Lemlist team.
    *   `Get Credits`: Retrieves the credit balance for your team (e.g., for enrichment).
*   **Unsubscribe**
    *   `Add`: Adds an email address to an unsubscribe list.
    *   `Delete`: Removes an email address from an unsubscribe list.
    *   `Get Many`: Retrieves multiple unsubscribed email addresses.

### Use Cases

*   Add leads to Lemlist campaigns from a CRM or spreadsheet.
*   Enrich leads with additional data before starting outreach.
*   Unsubscribe leads based on responses or actions in other tools.
*   Retrieve campaign statistics for reporting.

## Lemlist Trigger Node (`n8n-nodes-base.lemlisttrigger`)

This node starts a workflow when a specific event occurs in Lemlist.

### Setup

1.  **Authentication:** Select your configured Lemlist credentials.
2.  **Event:** Choose the Lemlist event(s) you want to trigger the workflow from the dropdown list.

### How it Works

The Lemlist Trigger node uses webhooks. When you activate the workflow, n8n registers a webhook URL with Lemlist for the selected event(s). When the event occurs in Lemlist, Lemlist sends data to the n8n webhook URL, triggering the workflow execution. The event data becomes the output of the trigger node.

### Supported Events

The node supports a wide range of events, including (but not limited to):

*   `Emails Bounced`
*   `Emails Clicked`
*   `Emails Opened`
*   `Emails Replied`
*   `Emails Sent`
*   `Emails Unsubscribed`
*   `Interested` (based on email reply analysis)
*   `Not Interested` (based on email reply analysis)
*   `LinkedIn Invite Accepted`
*   `LinkedIn Replied`
*   `Opportunities Done`
*   `*` (Triggers on any event - use with caution)

Refer to the node's event dropdown in the n8n editor for the full, up-to-date list.

### Use Cases

*   Update CRM when a lead replies (`Emails Replied`).
*   Trigger follow-up tasks when a lead clicks a link (`Emails Clicked`).
*   Remove unsubscribed leads from other lists (`Emails Unsubscribed`).
*   Notify sales team when a lead is marked as `Interested`.

## Alternative: HTTP Request Node

If the built-in nodes don't support a specific Lemlist API endpoint or operation, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

1.  Set **Authentication** to `Generic Credential Type`.
2.  Select `Basic Auth`.
3.  Enter your Lemlist API Key as the **User** (leave **Password** blank).
4.  Configure the Method, URL (using the [Lemlist API Reference](https://developer.lemlist.com/)), and Body/Query Parameters as needed.

## Resources

*   [n8n Lemlist Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.lemlist/)
*   [n8n Lemlist Trigger Node Documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.lemlisttrigger/)
*   [n8n Lemlist Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/lemlist/)
*   [Lemlist API Documentation](https://developer.lemlist.com/)

---

## 170. Linear.md ---

# n8n-nodes-base.linear

The Linear node interacts with the Linear API, allowing you to manage issues within your Linear workspace.

## Authentication

Supports both API Token and OAuth2 authentication.

## Resource: Issue

This node currently only supports the `Issue` resource.

## Operations

*   **Create**: Creates a new issue.
*   **Delete**: Deletes an existing issue.
*   **Get**: Retrieves a single issue by its ID.
*   **Get All**: Retrieves multiple issues, with options for filtering and pagination.
*   **Update**: Updates an existing issue.

## Parameters (Vary by Operation)

*   **Authentication**: (Options, Required) Choose between `API Token` or `OAuth2`.
*   **Resource**: (Options, Required) Currently fixed to `Issue`.
*   **Operation**: (Options, Required) Select the action: `Create`, `Delete`, `Get`, `Get All`, `Update`.
*   **Issue ID**: (String, Required for `Get`, `Delete`, `Update`) The ID of the target issue (e.g., `PRO-123`).
*   **Team ID**: (String, Required for `Create`, Load Options for `State ID`) The ID of the team the issue belongs to.
*   **Title**: (String, Required for `Create`) The title of the new issue.
*   **Return All**: (Boolean, Optional for `Get All`) Whether to retrieve all matching issues across multiple pages. Defaults to `false`.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) The maximum number of issues to return.
*   **Additional Fields / Update Fields**: (Object, Optional for `Create`/`Update`) Key-value pairs for issue properties:
    *   **Description**: (String) Issue description.
    *   **Priority**: (Number) Priority level (0-4).
    *   **Assignee ID**: (String) User ID of the assignee.
    *   **State ID**: (String) ID of the workflow state.
    *   **Estimate**: (Number) Point estimate for the issue.
    *   **Label IDs**: (String Array) List of label IDs to apply.
    *   **Due Date**: (DateTime) Due date for the issue.
    *   **Project ID**: (String) ID of the project the issue belongs to.
    *   **Parent ID**: (String) ID of the parent issue.
    *   **Subscriber IDs**: (String Array) List of user IDs to subscribe.

## JSON Example (Create Issue)

This example creates a new issue within a specific team, assigning it a title, description, priority, assignee, state, and labels.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "apiToken",
        "resource": "issue",
        "operation": "create",
        "teamId": "your_team_id_here",
        "title": "Implement new login flow",
        "additionalFields": {
          "description": "Design and implement the updated user login experience.",
          "priority": 2,
          "assigneeId": "user_id_assignee",
          "stateId": "workflow_state_id_todo",
          "labelIds": [
            "label_id_frontend",
            "label_id_auth"
          ],
          "estimate": 5
        }
      },
      "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
      "name": "Linear Create Issue",
      "type": "n8n-nodes-base.linear",
      "typeVersion": 1,
      "position": [
        1100,
        500
      ],
      "credentials": {
        "linearApi": {
          "id": "your_linear_api_token_credential_id",
          "name": "Linear API Token"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 171. LinkedIn.md ---

# n8n-nodes-base.linkedIn

The LinkedIn node allows interaction with the LinkedIn API, primarily focused on creating posts.

## Authentication

Supports two OAuth2 flows:
*   **Standard**: For general posting capabilities.
*   **Community Management**: For advanced community management features (though the node currently only implements post creation).

## Resource: Post

This node currently only supports the `Post` resource.

## Operation: Create

Creates a new post on LinkedIn.

## Parameters

*   **Authentication**: (Options, Required) Choose between `Standard` or `Community Management` OAuth2 credentials.
*   **Resource**: (Options, Required) Currently fixed to `Post`.
*   **Operation**: (Options, Required) Currently fixed to `Create`.
*   **Post As**: (Options, Required) Choose whether to post as a `Person` or `Organization`.
*   **Person**: (String, Required if `Post As` is `Person`) The URN (ID) of the person to post as. Can be selected from a list loaded via the API.
*   **Organization**: (String, Required if `Post As` is `Organization`) The URN (ID) of the organization to post as (e.g., `urn:li:organization:1234567`). Note: Only enter the numeric ID, not the full URN, in the UI field.
*   **Text**: (String, Required) The main content of the post. Special characters like `*[]{}<>@|~_` will be automatically escaped.
*   **Share Media Category**: (Options, Optional) Specify the type of media attached: `NONE`, `ARTICLE`, or `IMAGE`. Defaults to `NONE`.
*   **Additional Fields**:
    *   **Visibility**: (Options, Optional, Only for `Person` posts) Set post visibility: `PUBLIC` or `CONNECTIONS`. Defaults to `PUBLIC`.
    *   **Original URL**: (String, Required if `Share Media Category` is `ARTICLE`) The URL of the article to share.
    *   **Title**: (String, Optional, Used for `ARTICLE` and `IMAGE`) Title for the shared article or image.
    *   **Description**: (String, Optional, Used for `ARTICLE`) Description for the shared article.
    *   **Binary Property Name**: (String, Required if `Share Media Category` is `IMAGE`) The name of the binary property in the input data containing the image to upload.
    *   **Thumbnail Binary Property Name**: (String, Optional, Used for `ARTICLE`) The name of the binary property containing a thumbnail image for the article.

## JSON Example (Create Post with Image)

This example demonstrates creating a post as an organization, including text and an image from binary data.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "communityManagement",
        "resource": "post",
        "operation": "create",
        "postAs": "organization",
        "organization": "12345678", 
        "text": "Check out our latest product update! #NewFeatures #Innovation",
        "shareMediaCategory": "IMAGE",
        "additionalFields": {
          "title": "Product Update Screenshot",
          "binaryPropertyName": "screenshot"
        }
      },
      "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef12",
      "name": "LinkedIn Post Image",
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        1250,
        600
      ],
      "credentials": {
        "linkedInCommunityManagementOAuth2Api": {
          "id": "your_linkedin_cm_credential_id",
          "name": "LinkedIn CM Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 172. Mailchimp.md ---

# n8n-nodes-base.mailchimp

The Mailchimp node allows interaction with the Mailchimp Marketing API, enabling automation for email campaigns, list management, and member tagging.

## Authentication

Supports both API Key and OAuth2 authentication.

## Resources and Operations

*   **Campaign**
    *   `Delete`: Delete a campaign.
    *   `Get`: Get a specific campaign by ID.
    *   `Get All`: Get multiple campaigns (with filtering options).
    *   `Replicate`: Replicate an existing campaign.
    *   `Resend`: Create and send a Resend to Non-Openers version of a campaign.
    *   `Send`: Send a campaign immediately.
*   **List Group**
    *   `Get All`: Get all interest categories (groups) for a specific list.
*   **Member**
    *   `Create`: Create a new member (subscriber) on a list.
    *   `Delete`: Delete a member from a list.
    *   `Get`: Get a specific member from a list by email.
    *   `Get All`: Get multiple members from a list (with filtering/pagination).
    *   `Update`: Update an existing member on a list.
*   **Member Tag**
    *   `Create`: Add tags to a list member.
    *   `Delete`: Remove tags from a list member.

## Common Parameters (Vary by Resource/Operation)

*   **Authentication**: (Options, Required) `API Key` or `OAuth2`.
*   **Resource**: (Options, Required) `Campaign`, `List Group`, `Member`, `Member Tag`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **List Name or ID**: (Options/String, Required for `Member`, `List Group`, `Member Tag` operations) The target Mailchimp list.
*   **Email**: (String, Required for `Member` operations like `Create`, `Get`, `Update`, `Delete`, `Member Tag`) The email address of the member.
*   **Campaign ID**: (String, Required for `Campaign` operations like `Get`, `Delete`, `Replicate`, `Resend`, `Send`) The ID of the target campaign.
*   **Return All**: (Boolean, Optional for `Get All` operations) Whether to retrieve all results.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) Maximum results per request.
*   **Filters/Options**: (Object, Optional for `Get All` operations) Filtering criteria (e.g., `status`, `since_last_changed`).
*   **JSON Parameters**: (Boolean, Optional for `Member: Create/Update`) Allows specifying complex parameters like `merge_fields` and `interests` using JSON.
*   **Status**: (Options, Required for `Member: Create`, Optional for `Member: Update`) Member status (`subscribed`, `unsubscribed`, `cleaned`, `pending`, `transactional`).
*   **Tags**: (String/Array, Required for `Member Tag: Create/Delete`) Tags to add or remove (comma-separated string in UI, array in JSON mode or for `Member: Create/Update`).
*   **Merge Fields**: (Object/Fixed Collection, Optional for `Member: Create/Update`) Custom data fields for the member (e.g., `FNAME`, `LNAME`).
*   **Interests**: (Object/Fixed Collection, Optional for `Member: Create/Update`) Interest group memberships (key is interest ID, value is boolean).
*   **Update Existing**: (Boolean, Optional for `Member: Create`) If true, updates the member if they already exist.

## JSON Example (Create Member with Merge Fields, Interests, and Tags)

This example demonstrates creating a new subscribed member, providing merge fields, setting interest group status, and adding tags, using the JSON Parameters mode.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "apiKey",
        "resource": "member",
        "operation": "create",
        "list": "your_list_id_here",
        "email": "{{ $json.email }}",
        "status": "subscribed",
        "jsonParameters": true,
        "options": {
          "merge_fields": {
            "FNAME": "{{ $json.firstName }}",
            "LNAME": "{{ $json.lastName }}",
            "COMPANY": "{{ $json.company }}"
          },
          "interests": {
            "interest_id_1": true,
            "interest_id_2": false
          },
          "tags": [
            "Lead",
            "Website Signup"
          ],
          "language": "en",
          "vip": false
        }
      },
      "id": "d4e5f6a7-b8c9-0123-4567-890abcdef123",
      "name": "Mailchimp Create Member",
      "type": "n8n-nodes-base.mailchimp",
      "typeVersion": 1,
      "position": [
        1400,
        700
      ],
      "credentials": {
        "mailchimpApi": {
          "id": "your_mailchimp_api_key_credential_id",
          "name": "Mailchimp API Key"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 173. Mailgun.md ---

# n8n-nodes-base.mailgun

The Mailgun node allows you to send emails using the Mailgun API.

## Authentication

Requires Mailgun API credentials (API Key and Domain).

## Resource: Email

This node currently only supports the `Email` resource.

## Operation: Send

Sends an email message.

## Parameters

*   **Resource**: (Options, Required) Currently fixed to `Email`.
*   **Operation**: (Options, Required) Currently fixed to `Send`.
*   **From Email**: (String, Required) The sender's email address.
*   **To Email**: (String, Required) The recipient's email address. Multiple addresses can be comma-separated.
*   **Subject**: (String, Required) The subject line of the email.
*   **Text**: (String, Optional) The plain text body of the email. Required if HTML is not provided.
*   **HTML**: (String, Optional) The HTML body of the email. Required if Text is not provided.
*   **Attachments**: (String, Optional) The name of the binary property in the input data containing the file(s) to attach. Multiple attachments can be handled if the property contains an array of binary objects.
*   **Additional Fields**:
    *   **CC Email**: (String, Optional) Carbon copy recipients (comma-separated).
    *   **BCC Email**: (String, Optional) Blind carbon copy recipients (comma-separated).
    *   **Reply To Email**: (String, Optional) Email address for replies.
    *   **Domain**: (String, Optional) Specify a different Mailgun sending domain than the one in credentials.
    *   **Test Mode**: (Boolean, Optional) Enable Mailgun's test mode (emails are validated but not sent).
    *   **Tracking**: (Boolean, Optional) Enable/disable Mailgun open and click tracking.
    *   **Tracking Clicks**: (Options, Optional) Control click tracking (`yes`, `no`, `htmlonly`).
    *   **Tracking Opens**: (Boolean, Optional) Enable/disable open tracking.
    *   **Tags**: (String, Optional) Comma-separated tags to apply to the email (e.g., `marketing`, `newsletter`). Corresponds to `o:tag`.
    *   **DKIM**: (Boolean, Optional) Enable/disable DKIM signature.
    *   **Delivery Time**: (DateTime, Optional) Schedule email delivery time (ISO 8601 format). Corresponds to `o:deliverytime`.
    *   **Custom Headers**: (Fixed Collection, Optional) Add custom email headers (key-value pairs).
    *   **Recipient Variables**: (JSON, Optional) JSON object for recipient-specific variables (e.g., `{"recipient1@example.com": {"id": 1}}`).
    *   **Custom Variables**: (Fixed Collection, Optional) Add custom data variables (key-value pairs, prefixed with `v:` automatically, e.g., `my-var` becomes `v:my-var`).

## JSON Example (Send Email with Attachment, CC, Tag, and Custom Variable)

This example sends an HTML email with a PDF attachment, CCs another recipient, adds a tag, and includes a custom variable.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "email",
        "operation": "send",
        "fromEmail": "sender@yourdomain.com",
        "toEmail": "recipient@example.com",
        "subject": "Your Weekly Report",
        "html": "<h1>Report Attached</h1><p>Please find your weekly report attached.</p>",
        "attachments": "reportPdf", 
        "additionalFields": {
          "ccEmail": "manager@example.com",
          "tags": "weekly-report",
          "tracking": true,
          "customVariables": {
            "customVariablesValue": [
              {
                "name": "userId",
                "value": "usr_12345"
              }
            ]
          }
        }
      },
      "id": "e5f6a7b8-c9d0-1234-5678-90abcdef1234",
      "name": "Mailgun Send Report",
      "type": "n8n-nodes-base.mailgun",
      "typeVersion": 1,
      "position": [
        1550,
        800
      ],
      "credentials": {
        "mailgunApi": {
          "id": "your_mailgun_credential_id",
          "name": "Mailgun Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 174. Mailjet.md ---

# n8n-nodes-base.mailjet

The Mailjet node allows interaction with the Mailjet API for sending transactional and marketing emails, as well as SMS messages.

## Authentication

Requires separate credentials for Email and SMS APIs:
*   **Email**: Mailjet Email API Key and Secret Key.
*   **SMS**: Mailjet SMS API Token.

## Resources and Operations

*   **Email**
    *   `Send`: Send a standard email with HTML and/or text content.
    *   `Send Template`: Send an email using a pre-defined Mailjet template.
*   **SMS**
    *   `Send`: Send an SMS message.

## Parameters (Vary by Resource/Operation)

### Email (Send / Send Template)

*   **Resource**: (Options, Required) `Email`.
*   **Operation**: (Options, Required) `Send` or `Send Template`.
*   **From Email**: (String, Required) The sender's email address registered with Mailjet.
*   **To Email**: (String, Required) Recipient email address(es), comma-separated.
*   **Subject**: (String, Required) Email subject line.
*   **HTML**: (String, Optional, Required for `Send` if Text is not provided) HTML content of the email.
*   **Text**: (String, Optional, Required for `Send` if HTML is not provided) Plain text content of the email.
*   **Template ID**: (Options/Number, Required for `Send Template`) The ID of the Mailjet template to use.
*   **JSON Parameters**: (Boolean, Optional) Use JSON input for variables instead of the UI builder.
*   **Variables (JSON)**: (JSON, Required if `JSON Parameters` is true) A JSON object containing key-value pairs for template variables.
*   **Variables UI**: (Fixed Collection, Required if `JSON Parameters` is false) Key-value pairs for template variables defined in the UI.
*   **Additional Fields**:
    *   **From Name**: (String, Optional) Sender's name.
    *   **CC Email**: (String, Optional) Carbon copy recipients (comma-separated).
    *   **BCC Email**: (String, Optional) Blind carbon copy recipients (comma-separated).
    *   **Reply To**: (String, Optional) Email address for replies.
    *   **Track Opens**: (Options, Optional) Override account default open tracking (`account_default`, `activated`, `deactivated`).
    *   **Track Clicks**: (Options, Optional) Override account default click tracking (`account_default`, `activated`, `deactivated`).
    *   **Template Language**: (Boolean, Optional) Whether to enable Mailjet's templating language in the content.
    *   **Priority**: (Number, Optional) Email priority (1-4).
    *   **Attachments**: (String, Optional) Name of the binary property containing file(s) to attach.

### SMS (Send)

*   **Resource**: (Options, Required) `SMS`.
*   **Operation**: (Options, Required) `Send`.
*   **From**: (String, Required) The sender ID (alphanumeric string).
*   **To**: (String, Required) The recipient's phone number in E.164 format (e.g., `+15551234567`).
*   **Text**: (String, Required) The content of the SMS message.

## JSON Example (Send Email Template with Variables)

This example sends an email using a Mailjet template, providing variables via JSON.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "email",
        "operation": "sendTemplate",
        "fromEmail": "noreply@yourdomain.com",
        "toEmail": "{{ $json.customerEmail }}",
        "subject": "Your Order Confirmation {{ $json.orderId }}",
        "templateId": 1234567, 
        "jsonParameters": true,
        "variablesJson": "{\"firstName\": \"{{ $json.firstName }}\", \"orderTotal\": \"{{ $json.orderTotal }}\"}",
        "additionalFields": {
          "fromName": "Your Company Name",
          "replyTo": "support@yourdomain.com",
          "trackOpens": "activated",
          "trackClicks": "activated"
        }
      },
      "id": "f6a7b8c9-d0e1-2345-6789-0abcdef12345",
      "name": "Mailjet Send Order Confirmation",
      "type": "n8n-nodes-base.mailjet",
      "typeVersion": 1,
      "position": [
        1700,
        900
      ],
      "credentials": {
        "mailjetEmailApi": {
          "id": "your_mailjet_email_credential_id",
          "name": "Mailjet Email Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 175. Mariadb_mysql.md ---

# n8n Integration: MariaDB (using MySQL Node)

**Status:** No dedicated MariaDB node. Use the MySQL node.

## Overview

MariaDB is a popular open-source relational database, created by the original developers of MySQL and designed as a drop-in replacement. n8n does not have a specific, dedicated node named "MariaDB". However, due to MariaDB's high compatibility with MySQL, you can effectively interact with your MariaDB databases using the built-in **MySQL node** (`n8n-nodes-base.mysql`).

This document explains how to configure and use the MySQL node to connect to and automate tasks with your MariaDB database.

## Credentials (using MySQL Credential Type)

To connect to a MariaDB database, you will create credentials in n8n using the **MySQL** credential type:

1.  In n8n, go to **Credentials** and click **Add credential**.
2.  Search for and select **MySQL**.
3.  Fill in the connection details for your MariaDB instance:
    *   **Host:** The hostname or IP address of your MariaDB server.
    *   **Database:** The name of the database you want to connect to.
    *   **User:** The username for accessing the database.
    *   **Password:** The password for the specified user.
    *   **Port:** The port your MariaDB server is listening on (default is typically `3306`).
    *   **Timezone (Optional):** Specify the timezone if needed for date/time handling (e.g., `Z` for UTC, `local`, or specific timezone names like `Europe/Berlin`).
    *   **SSL (Optional):** If your MariaDB connection requires SSL/TLS, enable this option and provide the necessary Certificate Authority (CA) certificate, client certificate, and client key files.

Save the credentials. You can now select these credentials in the MySQL node.

## Operations (using MySQL Node)

Once the credentials are set up, you can use the MySQL node with your MariaDB database to perform standard SQL operations:

*   **Execute SQL:** Run any valid SQL query (SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, etc.). This is the most flexible operation.
*   **Select:** Specifically perform SELECT queries to retrieve data.
*   **Insert:** Insert new rows into a specified table.
*   **Update:** Update existing rows in a specified table based on conditions.
*   **Delete:** Delete rows from a specified table based on conditions.
*   **Insert or Update (Upsert):** Insert a new row, or update an existing one if a key conflict occurs (behavior depends on table constraints).

### Query Parameters

When using the `Execute SQL` or `Select` operations, it is highly recommended to use **Query Parameters** (found under **Options**) to safely inject dynamic data into your queries. This prevents SQL injection vulnerabilities.

**Example:**

*   **Query:** `SELECT * FROM customers WHERE email = $1;`
*   **Query Parameters:** `{{ $json.email }}`

Here, `$1` in the query acts as a placeholder, and its value is taken from the `Query Parameters` field, which uses an n8n expression to get the email from the incoming item. n8n sanitizes the value before inserting it into the query.

## Use Cases

*   Fetch customer data from MariaDB based on input from a form or webhook.
*   Insert new records into MariaDB from spreadsheet data or CRM events.
*   Update inventory levels in MariaDB based on sales data.
*   Delete user data from MariaDB upon request.
*   Run complex reports by executing custom SQL queries.

## Resources

*   [n8n MySQL Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mysql/) (Use this for MariaDB)
*   [n8n MySQL Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/mysql/)
*   [MariaDB Documentation](https://mariadb.com/kb/en/documentation/)
*   [MySQL Documentation (Often relevant due to compatibility)](https://dev.mysql.com/doc/)

---

## 176. Matomo.md ---

# Matomo Integration

As of the latest research, n8n does not currently feature an official, built-in integration node specifically for Matomo.

Matomo (formerly Piwik) is a popular open-source web analytics platform. While a dedicated node is not available in the standard n8n distribution, integration is still possible through other means.

Users wishing to connect n8n with Matomo can consider these approaches:

1.  **Community Nodes:** Explore the n8n community forums and GitHub. Research indicated potential community interest or development, so a user-contributed node might exist.
2.  **HTTP Request Node:** Matomo provides a comprehensive [Reporting API](https://developer.matomo.org/api-reference/reporting-api). You can use n8n's HTTP Request node to query this API. This involves:
    *   Constructing the correct API request URL, including your Matomo site ID, desired API method, format (e.g., JSON, XML), and authentication token (`token_auth`).
    *   Sending the request (usually via GET) using the HTTP Request node.
    *   Parsing the response data within your n8n workflow.
3.  **Tracking API:** For sending data *to* Matomo (e.g., tracking events or pageviews), you can use the HTTP Request node to interact with the [Matomo Tracking API](https://developer.matomo.org/api-reference/tracking-api).

Always refer to the official Matomo Developer documentation for the most accurate details on API endpoints, parameters, and authentication.

---

## 177. Mattermost.md ---

# n8n-nodes-base.mattermost

The Mattermost node allows interaction with the Mattermost API for team collaboration, including managing channels, users, messages, and reactions.

## Authentication

Requires Mattermost credentials, typically using a Personal Access Token.

## Resources and Operations

*   **Channel**
    *   `Add User`: Add a user to a channel.
    *   `Create`: Create a new channel (public or private).
    *   `Delete`: Soft delete a channel.
    *   `Get Members`: Get a page of members for a channel.
    *   `Restore`: Restore a soft-deleted channel.
    *   `Search`: Search for channels.
    *   `Get Statistics`: Get statistics for a channel.
*   **Message**
    *   `Delete`: Soft delete a post (message).
    *   `Post`: Post a message to a channel.
    *   `Post Ephemeral`: Post an ephemeral (temporary, user-visible only) message to a channel.
*   **Reaction**
    *   `Add`: Add a reaction (emoji) to a post.
    *   `Remove`: Remove a reaction from a post.
    *   `Get All`: Get all reactions for one or more posts.
*   **User**
    *   `Create`: Create a new user.
    *   `Deactivate`: Deactivate a user.
    *   `Get All`: Retrieve all users (paginated).
    *   `Get By Email`: Get a user by their email address.
    *   `Get By ID`: Get a user by their ID.
    *   `Invite`: Invite a user to the team (requires email setup).

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `Channel`, `Message`, `Reaction`, `User`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Channel ID**: (Options/String, Required for most `Channel`, `Message`, `Reaction` operations) The target channel ID. Can be selected from a list or specified via expression.
*   **User ID**: (Options/String, Required for `Channel: Add User`, `Message: Post Ephemeral`, `User: Get By ID`, `User: Deactivate`) The target user ID.
*   **Post ID**: (String, Required for `Message: Delete`, `Reaction: Add/Remove/Get All`) The ID of the target message/post.
*   **Message**: (String, Required for `Message: Post/Post Ephemeral`) The text content of the message.
*   **Emoji Name**: (String, Required for `Reaction: Add/Remove`) The name of the emoji (e.g., `+1`, `smile`).
*   **Email**: (String, Required for `User: Create/Get By Email`) User's email address.
*   **Username**: (String, Required for `User: Create`) User's username.
*   **Password**: (String, Required for `User: Create`) User's password.
*   **Return All**: (Boolean, Optional for `Get All` operations) Whether to retrieve all results.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) Maximum results per request.
*   **Options/Additional Fields**: (Object, Optional) Various operation-specific options like `notifyProps` (for message notifications), `props` (custom message properties), `type` (channel type), `displayName`, `purpose`, `header` (for channel creation), etc.

## JSON Example (Post Message with Props and Notification Override)

This example posts a message to a specific channel, includes custom properties (`props`), and overrides default notification settings.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channelId": "{{ $json.channelId }}", 
        "message": "**Alert:** System maintenance scheduled for {{ $json.maintenanceTime }}. Details: {{ $json.detailsLink }}",
        "additionalFields": {
          "props": {
            "from_webhook": "true",
            "override_username": "System Alert Bot",
            "override_icon_url": "https://example.com/bot_icon.png"
          },
          "notifyProps": {
            "channel": "true", 
            "desktop": "all", 
            "email": "false",
            "push": "mention"
          }
        }
      },
      "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
      "name": "Mattermost Post Alert",
      "type": "n8n-nodes-base.mattermost",
      "typeVersion": 1,
      "position": [
        1850,
        1000
      ],
      "credentials": {
        "mattermostApi": {
          "id": "your_mattermost_credential_id",
          "name": "Mattermost Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 178. Mautic.md ---

# n8n-nodes-base.mautic

The Mautic node provides integration with the Mautic marketing automation platform, allowing management of contacts, companies, segments, and campaigns.

## Authentication

Supports both Basic Auth (Username/Password) via `Credentials` and `OAuth2`.

## Resources and Operations

*   **Campaign Contact**
    *   `Add`: Add a contact to a campaign.
    *   `Remove`: Remove a contact from a campaign.
*   **Company**
    *   `Create`: Create a new company.
    *   `Delete`: Delete a company.
    *   `Get`: Get data for a specific company.
    *   `Get All`: Get data for all companies (paginated, with filtering).
    *   `Update`: Update an existing company.
*   **Company Contact**
    *   `Add`: Add a contact to a company.
    *   `Remove`: Remove a contact from a company.
*   **Contact**
    *   `Create`: Create a new contact.
    *   `Delete`: Delete a contact.
    *   `Edit Points`: Adjust a contact's points.
    *   `Do Not Contact`: Add/remove contacts from the Do Not Contact (DNC) list.
    *   `Get`: Get data for a specific contact.
    *   `Get All`: Get data for all contacts (paginated, with filtering).
    *   `Send Email`: Send a specific email (template or segment) to a contact.
    *   `Update`: Update an existing contact.
*   **Contact Segment**
    *   `Add`: Add a contact to a segment.
    *   `Remove`: Remove a contact from a segment.
*   **Segment Email**
    *   `Send`: Send an email to an entire segment.

## Common Parameters (Vary by Resource/Operation)

*   **Authentication**: (Options, Required) `Credentials` or `OAuth2`.
*   **Resource**: (Options, Required) `Campaign Contact`, `Company`, `Company Contact`, `Contact`, `Contact Segment`, `Segment Email`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Contact ID or Email**: (String/Number, Required for most `Contact`, `Campaign Contact`, `Company Contact`, `Contact Segment` operations) Identifier for the contact.
*   **Company ID or Name**: (String/Number, Required for `Company: Get/Update/Delete`, `Company Contact` operations) Identifier for the company.
*   **Campaign ID**: (Options/Number, Required for `Campaign Contact` operations) The target campaign.
*   **Segment ID**: (Options/Number, Required for `Contact Segment`, `Segment Email` operations) The target segment.
*   **Email ID**: (Options/Number, Required for `Contact: Send Email`, `Segment Email: Send`) The email to send.
*   **Return All**: (Boolean, Optional for `Get All` operations) Whether to retrieve all results.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) Maximum results per request.
*   **Filters**: (Object, Optional for `Get All` operations) Filtering criteria (e.g., `search`, `published`, `owner`).
*   **Fields To Include**: (MultiOptions, Optional for `Get All` operations) Specify which fields to return.
*   **Update If Exists**: (Boolean, Optional for `Contact: Create`) Update the contact if an email match is found.
*   **Points**: (Number, Required for `Contact: Edit Points`) Points to add or subtract.
*   **Reason**: (String, Optional for `Contact: Do Not Contact`) Reason for adding to DNC list.
*   **Channel**: (Options, Optional for `Contact: Do Not Contact`) Channel to apply DNC (e.g., `email`).
*   **Custom Fields (UI)**: (Fixed Collection, Optional for `Contact/Company: Create/Update`) Define custom field values using the UI.
*   **Custom Fields (JSON)**: (JSON, Optional for `Contact/Company: Create/Update`) Define custom field values using a JSON object.
*   **Tags**: (MultiOptions/String, Optional for `Contact/Company: Create/Update`) Add tags to the record.

## JSON Example (Create/Update Contact with Custom Fields and Tags via JSON)

This example creates a new contact. If a contact with the specified email already exists, it updates them (`updateIfExist: true`). It uses the JSON Parameters mode to set standard and custom fields, and adds tags.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "credentials",
        "resource": "contact",
        "operation": "create",
        "updateIfExist": true,
        "email": "{{ $json.email }}",
        "jsonParameters": true,
        "fieldsJson": "{\"firstname\": \"{{ $json.firstName }}\", \"lastname\": \"{{ $json.lastName }}\", \"company\": \"{{ $json.companyName }}\", \"points\": 10, \"lead_source\": \"Website Form\", \"custom_field_alias\": \"{{ $json.customValue }}\"}",
        "tags": [
          "New Lead",
          "{{ $json.productInterestTag }}"
        ]
      },
      "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef12",
      "name": "Mautic Create/Update Contact",
      "type": "n8n-nodes-base.mautic",
      "typeVersion": 1,
      "position": [
        2000,
        1100
      ],
      "credentials": {
        "mauticApi": {
          "id": "your_mautic_credential_id",
          "name": "Mautic Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 179. Metabase.md ---

# n8n-nodes-base.metabase

The Metabase node allows interaction with the Metabase business intelligence tool's API, enabling operations on alerts, databases, metrics, and questions (saved queries).

## Authentication

Requires Metabase API credentials, which typically involve the Metabase URL, username, and password to obtain a session token.

## Resources and Operations

*   **Alert**
    *   `Get`: Retrieve a specific alert by its ID.
    *   `Get All`: Retrieve all alerts.
*   **Database**
    *   `Add`: Add a new database connection (requires admin privileges in Metabase).
    *   `Get All`: Retrieve all configured databases.
    *   `Get Fields`: Retrieve the fields (schema) for a specific database table.
*   **Metric**
    *   `Get`: Retrieve a specific metric by its ID.
    *   `Get All`: Retrieve all defined metrics.
*   **Question** (Saved Query / Card)
    *   `Get`: Retrieve a specific question (card) by its ID.
    *   `Get All`: Retrieve all questions (cards).
    *   `Result Data`: Execute a question (card) and retrieve its results.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `Alert`, `Database`, `Metric`, `Question`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Alert ID**: (Number, Required for `Alert: Get`) The ID of the alert.
*   **Database ID**: (Number, Required for `Database: Get Fields`) The ID of the database.
*   **Table ID**: (Number, Required for `Database: Get Fields`) The ID of the table within the database.
*   **Metric ID**: (Number, Required for `Metric: Get`) The ID of the metric.
*   **Question ID**: (Number, Required for `Question: Get`, `Question: Result Data`) The ID of the question/card.
*   **Return All**: (Boolean, Optional for `Get All` operations) Whether to retrieve all results instead of the default limit.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) Maximum results per request.
*   **Filters / Options**: (Object, Optional) Various operation-specific filters or options (e.g., `archived` for `Question: Get All`, `include_tables` for `Database: Get All`).
*   **Parameters (for Question: Result Data)**: (JSON/Fixed Collection, Optional) Parameters to pass to the Metabase question if it uses variables.
    *   **JSON Parameters**: Define parameters as a JSON object.
    *   **UI Parameters**: Define parameters using key-value pairs in the UI.
*   **Export Format (for Question: Result Data)**: (Options, Optional, Default: `json`) Format for the results (`json`, `csv`, `xlsx`).
*   **Database Details (for Database: Add)**: (Object, Required) Configuration details for the new database connection (engine, name, connection details like host, port, dbname, user, password).

## JSON Example (Get Question Results with Parameters)

This example executes a specific Metabase question (card) identified by `questionId`, passes parameters to it using the JSON mode, and requests the results in JSON format.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "questions",
        "operation": "resultData",
        "questionId": {{ $json.metabaseCardId }},
        "exportFormat": "json",
        "jsonParameters": true,
        "parametersJson": "[{\"type\":\"category\",\"target\":[\"variable\",[\"template-tag\",\"user_id\"]],\"value\":\"{{ $json.userId }}\"},{\"type\":\"date/single\",\"target\":[\"variable\",[\"template-tag\",\"start_date\"]],\"value\":\"{{ $json.startDate }}\"}]"
      },
      "id": "d4e5f6a7-b8c9-0123-4567-890abcdef123",
      "name": "Metabase Get Results",
      "type": "n8n-nodes-base.metabase",
      "typeVersion": 1,
      "position": [
        2150,
        1200
      ],
      "credentials": {
        "metabaseApi": {
          "id": "your_metabase_credential_id",
          "name": "Metabase Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 180. MicrosoftDynamicsCrm.md ---

# n8n-nodes-base.microsoftDynamicsCrm

The Microsoft Dynamics CRM node allows interaction with the Microsoft Dynamics 365 CRM API, primarily focusing on Account management in the current implementation.

## Authentication

Requires Microsoft OAuth2 credentials configured within n8n.

## Resources and Operations

The node currently supports the **Account** resource with the following operations:

*   **Account**
    *   `Create`: Create a new account record.
    *   `Delete`: Delete an existing account record by its ID.
    *   `Get`: Retrieve a specific account record by its ID.
    *   `Get All`: Retrieve multiple account records, with options for filtering and limiting results.
    *   `Update`: Update an existing account record by its ID.

## Common Parameters (Vary by Operation)

*   **Resource**: (Options, Required) Currently only `Account` is available.
*   **Operation**: (Options, Required) `Create`, `Delete`, `Get`, `Get All`, `Update`.
*   **Account ID**: (String, Required for `Get`, `Update`, `Delete`) The unique identifier (GUID) of the account record.
*   **Return All**: (Boolean, Optional for `Get All`) Whether to retrieve all matching records, potentially across multiple pages.
*   **Limit**: (Number, Optional for `Get All` if `Return All` is false) Maximum number of records to return.
*   **Options / Filters (for Get All)**: (Object, Optional) Use OData query options for filtering, selecting specific fields, ordering, etc. Examples:
    *   `$filter`: e.g., `name eq 'Example Corp'` or `contains(telephone1, '555')`
    *   `$select`: e.g., `name,accountnumber,telephone1`
    *   `$orderby`: e.g., `name desc`
    *   `$top`: Equivalent to `Limit` if `Return All` is false.
*   **Fields (for Create/Update)**: (Object/Fixed Collection, Required for Create, partially for Update)
    *   **Name**: (String, Required for Create) The name of the account.
    *   **Additional Fields**: Specify other account fields to create or update (e.g., `telephone1`, `websiteurl`, `address1_city`). Field names correspond to the Dynamics CRM schema names.

## JSON Example (Create Account)

This example creates a new Account record with basic information.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "account",
        "operation": "create",
        "name": "{{ $json.companyName }}",
        "additionalFields": {
          "telephone1": "{{ $json.phone }}",
          "websiteurl": "{{ $json.website }}",
          "address1_city": "{{ $json.city }}"
        }
      },
      "id": "e5f6a7b8-c9d0-1234-5678-90abcdef1234",
      "name": "MS Dynamics Create Account",
      "type": "n8n-nodes-base.microsoftDynamicsCrm",
      "typeVersion": 1,
      "position": [
        2300,
        1300
      ],
      "credentials": {
        "microsoftDynamicsCrmOAuth2Api": {
          "id": "your_ms_dynamics_credential_id",
          "name": "MS Dynamics CRM Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Note:** Since the direct source code link was unavailable, this documentation relies heavily on the official n8n documentation page. More complex operations or fields might require using the HTTP Request node with Dynamics CRM credentials.

---

## 181. MicrosoftExcel.md ---

# n8n-nodes-base.microsoftExcel

The Microsoft Excel 365 node allows interaction with Excel files stored in OneDrive or SharePoint via the Microsoft Graph API. It supports operations on workbooks, worksheets, and tables.

## Authentication

Requires Microsoft OAuth2 credentials configured within n8n, granting access to Files.ReadWrite or similar permissions.

## Resources and Operations

*   **Table**
    *   `Add Rows`: Adds one or more rows to the end of a specified table.
    *   `Get Columns`: Retrieves the list of columns in a table.
    *   `Get Rows`: Retrieves rows from a table.
    *   `Lookup Row`: Finds a row in a table based on a specific column value.
*   **Workbook**
    *   `Add Worksheet`: Creates a new worksheet within a workbook.
    *   `Get All`: Retrieves a list of workbooks accessible by the user (typically from OneDrive root or specified Drive/Site).
*   **Worksheet**
    *   `Get All`: Retrieves all worksheets within a specified workbook.
    *   `Get Content` / `Read Rows`: Retrieves the content of a worksheet, either the entire used range or a specific range.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `Table`, `Workbook`, `Worksheet`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Workbook**: (Options/String, Required for most operations) The ID or path of the target Excel workbook file.
*   **Worksheet**: (Options/String, Required for `Table` and `Worksheet: Get Content` operations) The name or ID of the target worksheet.
*   **Table**: (Options/String, Required for `Table` operations) The name or ID of the target table within the worksheet.
*   **Drive/Site**: (Options/String, Optional) Specify the OneDrive/SharePoint location if the file isn't in the user's root drive.
*   **Return All**: (Boolean, Optional for `Get All`/`Get Rows` operations) Whether to retrieve all results.
*   **Limit**: (Number, Optional for `Get All`/`Get Rows` if `Return All` is false) Maximum results per request.
*   **Use Range (for Worksheet: Get Content)**: (Boolean, Optional) Whether to read a specific range instead of the entire used range.
*   **Range (for Worksheet: Get Content)**: (String, Required if `Use Range` is true) The A1-style notation for the range (e.g., `A1:C10`).
*   **Header Row (for Worksheet: Get Content with Range)**: (Number, Optional, Default: 0) The 0-based index of the row containing headers within the specified range.
*   **First Data Row (for Worksheet: Get Content with Range)**: (Number, Optional, Default: 1) The 0-based index of the first data row within the specified range.
*   **RAW Data (Options for Worksheet: Get Content)**: (Boolean, Optional) Return raw cell values instead of structured JSON based on headers.
*   **Data Property (Options for Worksheet: Get Content)**: (String, Optional, Default: `data`) Property name for RAW data output.
*   **Lookup Column (for Table: Lookup Row)**: (Options/String, Required) The column to search within.
*   **Lookup Value (for Table: Lookup Row)**: (String, Required) The value to find in the lookup column.
*   **Rows (for Table: Add Rows)**: (JSON/Object Array, Required) An array of objects representing the rows to add, where keys are column headers.

## JSON Example (Read Specific Range from Worksheet)

This example reads data from a specific range (`B2:D5`) within a worksheet, specifying that the header row is the first row of this range (index 0 relative to the range) and data starts from the second row (index 1 relative to the range).

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "readRows", 
        "workbook": "{{ $json.workbookIdOrPath }}", 
        "worksheet": "{{ $json.worksheetNameOrId }}",
        "useRange": true,
        "range": "B2:D5",
        "keyRow": 0,
        "dataStartRow": 1,
        "options": {}
      },
      "id": "f6a7b8c9-d0e1-2345-6789-0abcdef12345",
      "name": "MS Excel Read Range",
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2, 
      "position": [
        2450,
        1400
      ],
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "your_ms_excel_credential_id",
          "name": "MS Excel Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 182. MicrosoftOneDrive.md ---

# n8n-nodes-base.microsoftOneDrive

The Microsoft OneDrive node allows interaction with files and folders stored in Microsoft OneDrive (Personal or Business/SharePoint) via the Microsoft Graph API.

## Authentication

Requires Microsoft OAuth2 credentials configured within n8n, granting appropriate Files permissions (e.g., `Files.ReadWrite.All`, `Sites.ReadWrite.All`).

## Resources and Operations

*   **File**
    *   `Copy`: Copies a file to a new location.
    *   `Delete`: Deletes a file.
    *   `Download`: Downloads a file's content as binary data.
    *   `Get`: Retrieves metadata for a specific file.
    *   `Rename`: Renames a file.
    *   `Search`: Searches for files based on a query.
    *   `Share`: Creates a sharing link for a file.
    *   `Upload`: Uploads a file (up to 4MB using this operation; larger files require different API calls, potentially via HTTP Request node).
*   **Folder**
    *   `Create`: Creates a new folder.
    *   `Delete`: Deletes a folder.
    *   `Get Children`: Lists the items (files and folders) within a specified folder.
    *   `Rename`: Renames a folder.
    *   `Search`: Searches for folders based on a query.
    *   `Share`: Creates a sharing link for a folder.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `File`, `Folder`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **File/Folder ID or Path**: (String, Required for most operations) The unique ID or the path (relative to the drive root) of the target file or folder. Use the `Search` operation or URL inspection to find IDs.
*   **Drive/Site**: (Options/String, Optional) Specify the OneDrive/SharePoint location if the item isn't in the user's root drive.
*   **Destination Folder ID or Path**: (String, Required for `Copy`, `Upload`, `Create Folder`) The target location for the operation.
*   **New Name**: (String, Required for `Rename`, `Upload`, `Create Folder`) The desired new name for the file or folder.
*   **Binary Property (for Upload)**: (String, Optional, Default: `data`) The name of the input property containing the binary file data to upload.
*   **File Name (for Upload)**: (String, Required) The name to give the uploaded file.
*   **Conflict Behavior (for Upload/Copy/Create)**: (Options, Optional, Default: `rename`) How to handle naming conflicts (`rename`, `replace`, `fail`).
*   **Query (for Search)**: (String, Required) The search query string (e.g., `report.xlsx` or `status:"draft"`).
*   **Return All**: (Boolean, Optional for `Search`, `Get Children`) Whether to retrieve all matching results.
*   **Limit**: (Number, Optional for `Search`, `Get Children` if `Return All` is false) Maximum results per request.
*   **Share Type**: (Options, Required for `Share`, Default: `view`) Type of sharing link (`view`, `edit`).
*   **Share Scope**: (Options, Required for `Share`, Default: `organization`) Scope of the link (`anonymous`, `organization`).
*   **Password**: (String, Optional for `Share`) Set a password for the link.
*   **Expiration Date/Time**: (String, Optional for `Share`) Set an expiration for the link.

## JSON Example (Upload File)

This example uploads a binary file (expected in the `data` property of the input item) to a specific OneDrive folder, renaming it if a file with the same name exists.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "file",
        "operation": "upload",
        "destinationFolderId": "{{ $json.folderId }}", 
        "fileName": "{{ $json.outputFileName }}.pdf",
        "binaryPropertyName": "data",
        "options": {
          "conflictBehavior": "rename"
        }
      },
      "id": "a7b8c9d0-e1f2-3456-7890-bcdef1234567",
      "name": "OneDrive Upload File",
      "type": "n8n-nodes-base.microsoftOneDrive",
      "typeVersion": 1,
      "position": [
        2600,
        1500
      ],
      "credentials": {
        "microsoftOneDriveOAuth2Api": {
          "id": "your_ms_onedrive_credential_id",
          "name": "MS OneDrive Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 183. MicrosoftOutlook.md ---

# n8n-nodes-base.microsoftOutlook

The Microsoft Outlook node allows interaction with various Outlook features via the Microsoft Graph API, including calendars, contacts, emails (messages, drafts), events, and folders.

## Authentication

Requires Microsoft OAuth2 credentials configured within n8n, granting appropriate permissions (e.g., `Mail.ReadWrite`, `Mail.Send`, `Calendars.ReadWrite`, `Contacts.ReadWrite`).

## Resources and Operations

*   **Calendar**: Manage calendars.
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`
*   **Contact**: Manage contacts.
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`
*   **Draft**: Manage email drafts.
    *   `Create`, `Delete`, `Get`, `Send`, `Update`
*   **Event**: Manage calendar events.
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`
*   **Folder**: Manage mail folders.
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`
*   **Folder Message**: Specifically for getting messages within a folder.
    *   `Get Many`
*   **Message**: Manage emails.
    *   `Delete`, `Get`, `Get Many`, `Move`, `Reply`, `Send`, `Send and Wait for Response`, `Update`
*   **Message Attachment**: Manage attachments on messages.
    *   `Add`, `Download`, `Get`, `Get Many`

## Special Operation: Send and Wait for Response

This operation sends an email and pauses the workflow, waiting for a user response via interactive elements embedded in the email. This is useful for approvals or gathering information.

*   **Response Types**:
    *   `Approval`: Simple Approve/Disapprove buttons.
    *   `Free Text`: A simple text input form.
    *   `Custom Form`: Allows building a more complex form using elements similar to the n8n Form Trigger.
*   **Common Wait Options**:
    *   `Limit Wait Time`: Set a timeout (interval or specific time) after which the workflow resumes automatically.
    *   `Append n8n Attribution`: Toggle n8n branding in the message.
*   **Customization**: Button labels, form titles/descriptions can be customized based on the response type.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `Calendar`, `Contact`, `Draft`, `Event`, `Folder`, `Folder Message`, `Message`, `Message Attachment`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Message ID / Event ID / Contact ID / Folder ID / Draft ID**: (String, Required for Get/Update/Delete/Move/Reply/Send Draft/Add Attachment operations) The unique ID of the target item.
*   **Folder ID**: (Options/String, Often Required) The ID of the mail folder (e.g., Inbox, Sent Items, or custom folder ID).
*   **To / CC / BCC Recipients**: (String/Array, Required for Send/Create Draft/Reply) Email addresses (comma-separated string or array).
*   **Subject**: (String, Required for Send/Create Draft/Reply) Email subject.
*   **Body Content Type**: (Options, Required for Send/Create Draft/Reply, Default: `HTML`) `HTML` or `Text`.
*   **Body**: (String, Required for Send/Create Draft/Reply) Email body content.
*   **Return All / Limit**: (Boolean/Number, Optional for `Get Many` operations) Control pagination.
*   **Filters / Options**: (Object, Optional for `Get Many`) Use OData query options (`$filter`, `$select`, `$orderby`, `$top`).
*   **Attachment Name / Content Type / Binary Property**: (String/String/String, Required for `Add Attachment`) Details for adding attachments.
*   **Wait Options (for Send and Wait)**: Parameters specific to the chosen response type (Approval, Free Text, Custom Form), including timeouts, button labels, form definitions.

## JSON Example (Send Email with Attachment)

This example sends an email with an attachment. It assumes the attachment data is in the `attachmentData` binary property of the input item.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "toRecipients": "{{ $json.recipientEmail }}",
        "subject": "Report for {{ $today.format("YYYY-MM-DD") }}",
        "bodyContentType": "HTML",
        "body": "<p>Please find the attached report.</p>",
        "options": {
          "attachmentsUi": {
            "attachmentsValues": [
              {
                "fileName": "report_{{ $today.format("YYYYMMDD") }}.pdf",
                "binaryPropertyName": "attachmentData",
                "contentType": "application/pdf"
              }
            ]
          }
        }
      },
      "id": "b8c9d0e1-f2a3-4567-890a-cdef12345678",
      "name": "Outlook Send Email",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 1,
      "position": [
        2750,
        1600
      ],
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "your_ms_outlook_credential_id",
          "name": "MS Outlook Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 184. MicrosoftSql.md ---

# n8n-nodes-base.microsoftSql

The Microsoft SQL node allows interaction with Microsoft SQL Server databases.

## Authentication

Requires Microsoft SQL credentials configured within n8n, including Host, Port, User, Password, and Database name. Options for SSL/TLS encryption are also available.

## Operations

*   **Execute Query**: Executes an arbitrary SQL query (SELECT, INSERT, UPDATE, DELETE, stored procedures, etc.).
*   **Insert Rows**: Inserts one or more rows into a specified table.
*   **Update Rows**: Updates rows in a specified table based on matching criteria.
*   **Delete Rows**: Deletes rows from a specified table based on matching criteria.

## Common Parameters (Vary by Operation)

*   **Operation**: (Options, Required) `Execute Query`, `Insert Rows`, `Update Rows`, `Delete Rows`.
*   **Query (for Execute Query)**: (String, Required) The SQL query to execute. Can use n8n expressions `{{ }}` for dynamic values, but be cautious about SQL injection.
*   **Table (for Insert/Update/Delete)**: (String, Required) The name of the target database table.
*   **Schema (Optional)**: (String) The database schema if the table is not in the default schema (e.g., `dbo`).
*   **Columns (for Insert/Update)**: (String/Array, Required for Insert, Optional for Update) Comma-separated list or array of column names for insertion or update.
*   **Values (for Insert)**: (String/Array, Required) Comma-separated list or array of values corresponding to the specified columns. For multiple rows, each input item typically represents a row.
*   **Update Key Columns (for Update)**: (String/Array, Required) Column(s) to use in the WHERE clause to identify rows to update.
*   **Delete Key Columns (for Delete)**: (String/Array, Required) Column(s) to use in the WHERE clause to identify rows to delete.
*   **Options**: (Object, Optional)
    *   **Split Into Items (for Execute Query)**: (Boolean, Default: true) Whether to output each row returned by a SELECT query as a separate n8n item.
    *   **Include/Exclude Fields**: Filter columns in the output.
    *   **Data Type Casts**: Specify data types for parameters if needed.

## JSON Example (Insert Row)

This example inserts a single row into the `Customers` table. The values are taken from the input JSON item.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "insert",
        "schema": "dbo",
        "table": "Customers",
        "columns": "FirstName,LastName,Email,SignupDate",
        "values": "{{ $json.firstName }},{{ $json.lastName }},{{ $json.email }},{{ $now.toISO() }}"
      },
      "id": "c9d0e1f2-a3b4-5678-90ab-cdef123456789",
      "name": "MS SQL Insert Customer",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        2900,
        1700
      ],
      "credentials": {
        "microsoftSql": {
          "id": "your_ms_sql_credential_id",
          "name": "MS SQL Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Note:** When using `Execute Query` with dynamic values, parameterization is generally safer than direct string interpolation to prevent SQL injection, although n8n's node might handle basic escaping. For complex scenarios or maximum security, consider using stored procedures or carefully validating inputs.

---

## 185. MicrosoftTeams.md ---

# n8n-nodes-base.microsoftTeams

The Microsoft Teams node allows interaction with Microsoft Teams via the Microsoft Graph API, enabling automation around channels, messages (chat and channel), and tasks.

## Authentication

Requires Microsoft OAuth2 credentials configured within n8n, granting appropriate permissions (e.g., `ChannelMessage.Send`, `Chat.ReadWrite`, `Team.ReadBasic.All`, `Tasks.ReadWrite`).

## Resources and Operations

*   **Channel**: Manage team channels.
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`
*   **Channel Message**: Manage messages within a specific channel.
    *   `Create`: Send a message to a channel.
    *   `Get Many`: Retrieve messages from a channel.
*   **Chat Message**: Manage messages within a one-on-one or group chat.
    *   `Create`: Send a message to a chat.
    *   `Get`: Retrieve a specific chat message.
    *   `Get Many`: Retrieve messages from a chat.
    *   `Send and Wait for Response`: Send an interactive message and pause the workflow for user input.
*   **Task**: Manage tasks (likely requires integration with Planner or To Do, depending on Teams setup).
    *   `Create`, `Delete`, `Get`, `Get Many`, `Update`

## Special Operation: Send and Wait for Response (Chat Message)

This operation sends an interactive message to a chat and pauses the workflow, waiting for a user response. Useful for approvals or gathering information directly within Teams.

*   **Response Types**:
    *   `Approval`: Simple Approve/Disapprove buttons.
    *   `Free Text`: A simple text input form.
    *   `Custom Form`: Allows building a more complex form using elements similar to the n8n Form Trigger.
*   **Common Wait Options**:
    *   `Limit Wait Time`: Set a timeout (interval or specific time) after which the workflow resumes automatically.
    *   `Append n8n Attribution`: Toggle n8n branding in the message.
*   **Customization**: Button labels, form titles/descriptions can be customized based on the response type.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) `Channel`, `Channel Message`, `Chat Message`, `Task`.
*   **Operation**: (Options, Required) Specific action for the chosen resource.
*   **Team ID**: (Options/String, Required for Channel/Channel Message operations) The ID of the target Team.
*   **Channel ID**: (Options/String, Required for Channel/Channel Message operations) The ID of the target Channel.
*   **Chat ID**: (Options/String, Required for Chat Message operations) The ID of the target Chat.
*   **Message ID / Task ID**: (String, Required for Get/Update/Delete operations) The unique ID of the target item.
*   **Content Type**: (Options, Required for Create Message, Default: `HTML`) `HTML` or `Text`.
*   **Content**: (String, Required for Create Message) The message body.
*   **User ID/Email (for Chat Message: Create)**: (String, Required) The user ID or email address to send the chat message to (for 1:1 chats).
*   **Return All / Limit**: (Boolean/Number, Optional for `Get Many` operations) Control pagination.
*   **Filters / Options**: (Object, Optional for `Get Many`) Use OData query options (`$filter`, `$select`, `$orderby`, `$top`).
*   **Wait Options (for Send and Wait)**: Parameters specific to the chosen response type (Approval, Free Text, Custom Form), including timeouts, button labels, form definitions.
*   **Channel Name/Description (for Channel: Create/Update)**: (String) Details for channel management.
*   **Task Title/Details (for Task: Create/Update)**: (String) Details for task management.

## JSON Example (Send Channel Message with Mention)

This example sends a message to a specific Teams channel, mentioning a user.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "channelMessage",
        "operation": "create",
        "teamId": "{{ $json.teamId }}",
        "channelId": "{{ $json.channelId }}",
        "contentType": "HTML",
        "content": "<p>Hello <at id=\"{{ $json.userIdToMention }}\">{{ $json.userNameToMention }}</at>, please review the latest report.</p>",
        "options": {}
      },
      "id": "d0e1f2a3-b4c5-6789-0abc-def1234567890",
      "name": "MS Teams Send Channel Message",
      "type": "n8n-nodes-base.microsoftTeams",
      "typeVersion": 1,
      "position": [
        3050,
        1800
      ],
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "your_ms_teams_credential_id",
          "name": "MS Teams Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 186. Microsofttodo.md ---

# n8n Node: Microsoft To Do

**Official Documentation:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsofttodo/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsofttodo/)

## Overview

The Microsoft To Do node allows you to automate tasks within Microsoft To Do, the cloud-based task management application. You can integrate To Do with various other services supported by n8n.

This node provides comprehensive support for managing tasks, lists, and linked resources within Microsoft To Do.

## Credentials

This node uses the standard **Microsoft OAuth2 API** credentials in n8n.

1.  **Register an Azure AD Application:** Ensure you have an application registered in Azure Active Directory with the necessary Microsoft Graph permissions for To Do (e.g., `Tasks.ReadWrite`, `Tasks.Read`).
2.  **Configure n8n Microsoft Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Microsoft (OAuth2 API)**.
    *   Follow the n8n documentation for [Microsoft credentials](https://docs.n8n.io/integrations/builtin/credentials/microsoft/). You will need the Application (client) ID, Directory (tenant) ID, and a Client Secret or Certificate from your Azure AD app registration.
    *   Complete the OAuth2 connection flow.

## Operations

The node supports operations across three main resource types:

### Linked Resource

*   **Create:** Add a linked resource to a task.
*   **Delete:** Remove a linked resource from a task.
*   **Get:** Retrieve details of a specific linked resource.
*   **Get All:** Retrieve all linked resources for a task.
*   **Update:** Modify an existing linked resource.

### List

*   **Create:** Create a new task list.
*   **Delete:** Delete an existing task list.
*   **Get:** Retrieve details of a specific task list.
*   **Get All:** Retrieve all task lists.
*   **Update:** Modify an existing task list (e.g., rename).

### Task

*   **Create:** Create a new task in a specified list.
*   **Delete:** Delete an existing task.
*   **Get:** Retrieve details of a specific task.
*   **Get All:** Retrieve all tasks, potentially filtered by list or completion status.
*   **Update:** Modify an existing task (e.g., mark as complete, change due date, update title).

## Usage Notes

*   When performing operations on tasks or linked resources, you will often need the ID of the parent list or task.
*   Use the `Get All` operations for lists or tasks first if you need to find specific IDs dynamically within your workflow.
*   The node can also be used as an [AI tool](https://docs.n8n.io/integrations/ai-tools/) within n8n's AI agents, allowing parameters to be set dynamically based on AI instructions.

## Alternative: HTTP Request Node

If a specific operation or nuance of the Microsoft Graph API for To Do is not directly supported by the node, you can always use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your configured Microsoft OAuth2 credentials to make custom API calls.

## Resources

*   [n8n Microsoft To Do Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsofttodo/)
*   [n8n Microsoft Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)
*   [Microsoft Graph API - To Do Tasks Overview](https://learn.microsoft.com/en-us/graph/api/resources/todotask-overview)

---

## 187. Mindee.md ---

# n8n Node: Mindee

**Official Documentation:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mindee/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mindee/)
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/mindee/](https://docs.n8n.io/integrations/builtin/credentials/mindee/)

## Overview

The Mindee node integrates n8n with the Mindee API, a powerful tool for extracting data from documents using Optical Character Recognition (OCR) and specialized APIs. This node allows you to automate the processing of invoices and receipts directly within your workflows.

## Credentials

This node requires Mindee API Key credentials.

1.  Log in to your [Mindee account](https://platform.mindee.com/).
2.  Navigate to the **API Keys** section.
3.  Copy an existing API key or create a new one.
4.  In n8n, go to **Credentials** and add a new credential.
5.  Search for and select **Mindee API**.
6.  Paste your API key into the **API Key** field.
7.  Save the credential.

## Operations

The node currently supports the following operations, focused on document parsing:

*   **Invoice**
    *   **Predict:** Parses an invoice document (provided as binary data) and extracts key information like supplier name, invoice number, total amount, due date, etc., using Mindee's pre-trained invoice model.
*   **Receipt**
    *   **Predict:** Parses a receipt document (provided as binary data) and extracts key information like supplier name, total amount, date, etc., using Mindee's pre-trained receipt model.

## Input

For both operations, the node expects the document file (invoice or receipt) to be provided as binary data. This typically means the node should follow a node that reads a file (like Read Binary File) or receives a file via a trigger (like Webhook).

*   **Binary Property:** Specify the property name containing the binary file data (default is often `data`).

## Output

The node outputs the structured data extracted from the document, as defined by the specific Mindee API (Invoice or Receipt). This data can then be used in subsequent nodes in your workflow.

## Alternative: HTTP Request Node

If you need to interact with other Mindee APIs or use custom-built APIs not directly supported by this node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/). You will need to manually configure the API endpoint, method, and include your Mindee API key in the appropriate header (usually `Authorization: Token YOUR_API_KEY`).

## Resources

*   [n8n Mindee Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mindee/)
*   [n8n Mindee Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/mindee/)
*   [Mindee API Documentation](https://developers.mindee.com/docs)

---

## 188. Misp.md ---

# n8n Node: MISP

MISP (Malware Information Sharing Platform) is an open-source threat intelligence platform. The n8n MISP node (`n8n-nodes-base.misp`) allows you to automate interactions with your MISP instance, integrating threat intelligence management into your workflows.

## Credentials

To use this node, you need to configure MISP credentials in n8n.

1.  **MISP URL:** The base URL of your MISP instance (e.g., `https://misp.example.com`).
2.  **API Key:** Your MISP Automation key (API key).

You can find or generate an API key within your MISP instance under **Global Actions > My Profile > Auth keys**.

See the official n8n documentation for detailed guidance on setting up [MISP credentials](https://docs.n8n.io/integrations/builtin/credentials/misp/).

## Operations

The MISP node supports a wide range of operations across various MISP resources:

*   **Attribute**
    *   `Create`: Add a new attribute to an event.
    *   `Delete`: Delete an attribute.
    *   `Get`: Retrieve a specific attribute by ID.
    *   `Get All`: Retrieve all attributes (potentially filtered).
    *   `Search`: Search for attributes based on various criteria.
    *   `Update`: Modify an existing attribute.
*   **Event**
    *   `Create`: Create a new MISP event.
    *   `Delete`: Delete an event.
    *   `Get`: Retrieve a specific event by ID or UUID.
    *   `Get All`: Retrieve all events (potentially filtered).
    *   `Publish`: Publish an event.
    *   `Search`: Search for events based on various criteria (attributes, tags, date, etc.).
    *   `Unpublish`: Unpublish an event.
    *   `Update`: Modify an existing event.
*   **Event Tag**
    *   `Add`: Add a tag to an event.
    *   `Remove`: Remove a tag from an event.
*   **Feed**
    *   `Create`: Add a new feed.
    *   `Disable`: Disable an existing feed.
    *   `Enable`: Enable an existing feed.
    *   `Get`: Retrieve a specific feed.
    *   `Get All`: Retrieve all configured feeds.
    *   `Update`: Modify an existing feed.
*   **Galaxy**
    *   `Delete`: Delete a galaxy cluster.
    *   `Get`: Retrieve a specific galaxy cluster.
    *   `Get All`: Retrieve all galaxy clusters.
*   **Noticelist**
    *   `Get`: Retrieve a specific noticelist.
    *   `Get All`: Retrieve all noticelists.
*   **Object**
    *   `Search`: Search for MISP objects.
*   **Organisation**
    *   `Create`: Create a new organisation.
    *   `Delete`: Delete an organisation.
    *   `Get`: Retrieve a specific organisation.
    *   `Get All`: Retrieve all organisations.
    *   `Update`: Modify an existing organisation.
*   **Tag**
    *   `Create`: Create a new tag.
    *   `Delete`: Delete a tag.
    *   `Get All`: Retrieve all tags.
    *   `Update`: Modify an existing tag.
*   **User**
    *   `Create`: Create a new user.
    *   `Delete`: Delete a user.
    *   `Get`: Retrieve a specific user.
    *   `Get All`: Retrieve all users.
    *   `Update`: Modify an existing user.
*   **Warninglist**
    *   `Get`: Retrieve a specific warninglist.
    *   `Get All`: Retrieve all warninglists.

## Use Cases

*   Automatically create MISP events from security alerts (e.g., SIEM, EDR).
*   Add indicators (attributes) like IPs, domains, hashes to events.
*   Search MISP for indicators found in logs or emails.
*   Tag events based on enrichment data from other tools.
*   Publish events automatically after validation.
*   Synchronize MISP organisations or users with other systems.

## Alternative: HTTP Request Node

If the built-in node doesn't support a specific MISP API endpoint or operation, you can use the generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).

1.  Set **Authentication** to `Header Auth`.
2.  Click **Add Header**.
3.  Set **Name** to `Authorization`.
4.  Set **Value** to your MISP API Key.
5.  Add another header: **Name** `Accept`, **Value** `application/json`.
6.  Add another header: **Name** `Content-Type`, **Value** `application/json`.
7.  Configure the Method (GET, POST, etc.), URL (using the [MISP API Reference](https://www.misp-project.org/documentation/openapi.html)), and Body/Query Parameters as needed.

## Resources

*   [n8n MISP Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.misp/)
*   [n8n MISP Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/misp/)
*   [MISP Project Documentation](https://www.misp-project.org/documentation/)
*   [MISP API Documentation (OpenAPI)](https://www.misp-project.org/documentation/openapi.html)

---

## 189. Mixpanel.md ---

# Mixpanel Integration

Currently, n8n does not offer an official, dedicated integration node specifically for Mixpanel.

Mixpanel is a powerful product analytics service. While a direct node isn't available, n8n recommends using the generic HTTP Request node for integration. Official n8n documentation points towards this method.

To integrate Mixpanel with n8n:

1.  **Use the HTTP Request Node:** This is the primary method suggested by n8n.
    *   Obtain necessary credentials from Mixpanel (e.g., API Secret, Project Token, Service Account credentials depending on the API used - Ingestion, Data Pipelines, Query, etc.).
    *   Configure the HTTP Request node in n8n:
        *   Set the appropriate HTTP method (POST for ingestion, GET for querying, etc.).
        *   Use the correct Mixpanel API endpoint URL.
        *   Handle authentication, often via Basic Auth (using Service Account username/secret) or specific headers/parameters as required by the Mixpanel API.
        *   Construct the request body (e.g., JSON payload for events) according to Mixpanel's API specifications.
2.  **Community Nodes:** Check the n8n community forums and GitHub for any user-developed Mixpanel nodes that might simplify certain interactions.

Always refer to the official [Mixpanel API documentation](https://developer.mixpanel.com/reference/overview) for the most current information on endpoints, authentication, and request formats.

---

## 190. Moco.md ---

# @skriptfabrik/n8n-nodes-moco (Community Node)

This is a community node for interacting with the MOCO API (ERP agency software). It allows managing activities, companies, projects, and users.

**Note:** As a community node, its structure and features might differ from official n8n nodes and could change.

## Authentication

Requires MOCO API credentials (`mocoApi`), including the Sub-Domain and API Key.

## Resources and Operations

The node is structured around resources, each with several operations:

*   **Resource**: (Options, Required) Selects the MOCO entity to interact with.
    *   `Activity`: Time entries, expenses.
    *   `Company`: Client or lead companies.
    *   `Project`: Projects associated with companies.
    *   `User`: MOCO users.

*   **Operation**: (Options, Required) The action to perform on the selected resource.
    *   `Create`: Add a new record.
    *   `Delete`: Remove an existing record.
    *   `Get`: Retrieve a single record by its ID.
    *   `List` (or `Get Many`): Retrieve multiple records, often with filtering options.
    *   `Update`: Modify an existing record.

## Common Parameters (Vary by Resource/Operation)

Based on the source code (`Moco.node.ts`), parameters are defined within specific description files (`ActivityDescription.ts`, `CompanyDescription.ts`, etc.) and dynamically shown based on the selected Resource and Operation.

**General Parameters:**
*   **Resource**: (As above)
*   **Operation**: (As above)
*   **ID Fields**: (Number/String, Required for `Get`, `Update`, `Delete`) The specific ID of the Activity, Company, Project, or User.
*   **Return All / Limit**: (Boolean/Number, Optional for `List` operations) Control pagination.
*   **Filters**: (Various types, Optional for `List` operations) Parameters to filter the list results (e.g., `updated_after`, `user_id`, `project_id`, `company_id`, specific status flags).
*   **Additional Fields / Body Parameters**: (Various types, Required/Optional for `Create`, `Update`) Fields specific to the resource being created or updated (e.g., `date`, `project_id`, `task_id`, `seconds` for Activity; `name`, `firstname`, `lastname`, `email` for User/Company).
*   **Impersonate User ID**: (String, Optional for `Create Activity`) Perform the action as another user.

**Specific Examples from Source:**
*   **Activity Create**: Requires `date`, `project_id`, `task_id`, `seconds`. Optional: `description`, `billable`, `tag`, `remoteService`, `remoteId`, `remoteUrl`.
*   **Activity List Filters**: `from`, `to`, `user_id`, `project_id`, `task_id`, `term`, `tag`, `billable`, `budget_type`, `invoice_id`, `updated_after`, `ids`.
*   **Company Create**: Requires `name`. Optional fields cover address, contact details, custom properties, etc.
*   **Company List Filters**: `term`, `tags`, `custom_properties`, `updated_after`, `ids`.
*   **Project Create**: Requires `customer_id`, `name`. Optional fields include `leader_id`, `deal_id`, `billable`, `budget`, `hourly_rate`, etc.
*   **Project List Filters**: `identifier`, `term`, `tags`, `custom_properties`, `updated_after`, `ids`.
*   **User Create**: Requires `firstname`, `lastname`, `email`. Optional fields include `mobile`, `home_address`, `birthday`, `external_id`, etc.
*   **User List Filters**: `term`, `tags`, `custom_properties`, `updated_after`, `ids`.

## JSON Example (Create Activity)

This example creates a new time entry (Activity) for a specific project and task.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "activity",
        "operation": "create",
        "date": "{{ $now.toISODate() }}",
        "projectId": {{ $json.projectId }}, 
        "taskId": {{ $json.taskId }},
        "seconds": {{ $json.durationSeconds }},
        "description": "{{ $json.activityDescription }}",
        "additionalFields": {
          "billable": true,
          "tag": "Development"
        }
      },
      "id": "e1f2a3b4-c5d6-7890-abcd-ef12345678901",
      "name": "MOCO Create Activity",
      "type": "@skriptfabrik/n8n-nodes-moco", 
      "typeVersion": 1, 
      "position": [
        3200,
        1900
      ],
      "credentials": {
        "mocoApi": {
          "id": "your_moco_credential_id",
          "name": "MOCO Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Note:** The exact `type` value (`@skriptfabrik/n8n-nodes-moco`) is inferred from the npm package name. The `typeVersion` might vary.

---

## 191. MondayCom.md ---

# n8n-nodes-base.mondayCom

The monday.com node allows interaction with the monday.com API to manage boards, columns, groups, and items.

## Authentication

Requires monday.com API credentials (`mondayComApi`).

## Resources and Operations

The node is organized by resources (Board, Board Column, Board Group, Board Item), each supporting various operations.

**Board**
*   `Archive`: Archive a board.
*   `Create`: Create a new board.
*   `Get`: Retrieve a specific board by ID.
*   `GetAll`: Retrieve all accessible boards.

**Board Column**
*   `Create`: Create a new column on a board.
*   `GetAll`: Retrieve all columns for a specific board.

**Board Group**
*   `Create`: Create a new group within a board.
*   `Delete`: Delete a group from a board.
*   `GetAll`: Retrieve all groups within a board.

**Board Item**
*   `Create`: Create a new item within a specific board and group.
*   `Delete`: Delete an item by ID.
*   `Get`: Retrieve a specific item by ID.
*   `GetAll`: Retrieve all items from a board.
*   `GetByColumnValue`: Retrieve items matching a specific column value.
*   `MoveToGroup`: Move an item to a different group.
*   `UpdateColumnValue`: Change a single column value for an item.
*   `UpdateMultipleColumnValues`: Change multiple column values for an item.
*   `Update`: Add an update (comment) to an item.

## Common Parameters (Vary by Resource/Operation)

*   **Resource**: (Options, Required) Selects the monday.com entity (Board, Board Column, Board Group, Board Item).
*   **Operation**: (Options, Required) The action to perform.
*   **Board ID**: (Number/String, Required for most operations) The ID of the target board.
*   **Group ID**: (String, Required for Item Create, MoveToGroup, Group Delete) The ID of the target group.
*   **Item ID**: (Number/String, Required for Item Get, Update, Delete, MoveToGroup) The ID of the target item.
*   **Column ID**: (String, Required for GetByColumnValue, UpdateColumnValue) The ID of the target column.
*   **Column Value**: (String/JSON, Required for GetByColumnValue, UpdateColumnValue) The value to match or set.
*   **Column Values (JSON)**: (JSON String, Required for Create Item, UpdateMultipleColumnValues) A JSON object mapping column IDs to their values. Example: `{"text_column_id": "New Value", "number_column_id": 123}`.
*   **Item Name**: (String, Required for Create Item) The name of the new item.
*   **Update Text**: (String, Required for Item Update) The content of the update/comment.
*   **Return All / Limit**: (Boolean/Number, Optional for GetAll operations) Control pagination.
*   **Additional Fields**: (Object, Optional) Allows specifying less common parameters or options for certain operations.

## JSON Example (Create Board Item with Multiple Columns)

This example creates a new item named "New Lead" in a specific board and group, populating a text column and a status column.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "create",
        "boardId": {{ $json.boardId }}, 
        "groupId": "{{ $json.groupId }}", 
        "itemName": "New Lead",
        "columnValues": "{\"text_column\": \"{{ $json.leadName }}\", \"status_column\": {\"label\": \"New\"}}",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-1234-abcdef123456",
      "name": "Create Monday Item",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ],
      "credentials": {
        "mondayComApi": {
          "id": "your_monday_credential_id",
          "name": "Monday Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes on Column Values JSON:**
*   The `columnValues` parameter expects a **stringified JSON object**.
*   Keys are the column IDs.
*   Values depend on the column type. Simple types like text or numbers can be direct strings/numbers. Complex types like Status, Dropdown, or Person often require a specific JSON structure (e.g., `{"label": "Value"}` for Status/Dropdown, `{"personsAndTeams":[{"id": USER_ID, "kind":"person"}]}` for Person). Refer to the monday.com API documentation for the exact structure needed for each column type.

---

## 192. MongoDb.md ---

# n8n-nodes-base.mongoDb

The MongoDB node allows interaction with MongoDB databases, enabling operations like finding, inserting, updating, deleting, and aggregating documents.

## Authentication

Requires MongoDB credentials (`mongoDb`), which can be configured using either a connection string or individual parameters (host, port, user, password, database, authentication database, options).

## Operations

The node supports the following operations:

*   `aggregate`: Performs aggregation operations using a pipeline.
*   `delete`: Deletes documents matching a query.
*   `find`: Finds documents matching a query.
*   `findOneAndReplace`: Finds a single document and replaces it.
*   `findOneAndUpdate`: Finds a single document and updates it.
*   `insert`: Inserts new documents.
*   `update`: Updates documents matching a query.

## Common Parameters (Vary by Operation)

*   **Operation**: (Options, Required) Selects the MongoDB action (aggregate, delete, find, findOneAndReplace, findOneAndUpdate, insert, update).
*   **Collection**: (String, Required) The name of the MongoDB collection to operate on.
*   **Query**: (JSON String, Required for aggregate, delete, find, findOneAndReplace, findOneAndUpdate, update) The MongoDB query filter (e.g., `{"name": "example"}`, `{"age": {"$gt": 25}}`). For `aggregate`, this is the aggregation pipeline array.
*   **Document**: (JSON String, Required for insert, findOneAndReplace) The document(s) to insert or the replacement document. For `insert`, can be a single object or an array of objects.
*   **Update**: (JSON String, Required for findOneAndUpdate, update) The update operation document (e.g., `{"$set": {"status": "active"}}`).
*   **Options**: (Object, Optional) Provides additional settings for operations:
    *   **Find Options**: `limit`, `skip`, `projection` (JSON string), `sort` (JSON string).
    *   **Update/Replace Options**: `upsert` (Boolean), `useDotNotation` (Boolean), `dateFields` (String, comma-separated fields to convert to Date objects).
*   **Fields**: (String, Optional for insert, findOneAndReplace, findOneAndUpdate, update) Comma-separated list of fields from the input data to include in the document/update.
*   **Update Key**: (String, Required for findOneAndReplace, findOneAndUpdate) The field name used to match documents for replacement/update (often `_id`).

## JSON Example (Find Documents with Options)

This example finds documents in the `users` collection where the `status` is "active", sorts them by `lastName`, skips the first 10, limits the result to 5, and only returns the `firstName` and `lastName` fields.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "find",
        "collection": "users",
        "query": "{\"status\": \"active\"}",
        "options": {
          "limit": 5,
          "skip": 10,
          "sort": "{\"lastName\": 1}", 
          "projection": "{\"firstName\": 1, \"lastName\": 1, \"_id\": 0}"
        }
      },
      "id": "b2c3d4e5-f6a7-8901-2345-bcdef1234567",
      "name": "Find Active Users",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1, 
      "position": [
        1400,
        400
      ],
      "credentials": {
        "mongoDb": {
          "id": "your_mongodb_credential_id",
          "name": "MongoDB Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Query, Projection, and Sort parameters expect **stringified JSON**.
*   When using `_id` in queries, ensure it's correctly formatted. The node attempts to convert string `_id` values to MongoDB ObjectIds automatically in some operations (like `find`, `aggregate`), but manual conversion might be needed in complex scenarios or updates.
*   The `insert` operation can take a single JSON object or an array of JSON objects in the `Document` field to insert multiple documents at once.

---

## 193. MqttTrigger.md ---

# n8n-nodes-base.mqttTrigger

The MQTT Trigger node listens for messages published to specific topics on an MQTT broker and starts a workflow execution when a message is received.

## Authentication

Requires MQTT credentials (`mqtt`), including the broker URL (e.g., `mqtt://localhost:1883`), username, and password if authentication is enabled on the broker.

## Parameters

*   **Topic**: (String, Required) The MQTT topic to subscribe to. Wildcards (`+` for single level, `#` for multi-level) can be used.
*   **Options**:
    *   **Quality of Service (QoS)**: (Number, Optional, Default: 0) The QoS level for the subscription (0, 1, or 2).
    *   **Parse JSON**: (Boolean, Optional, Default: true) Whether to attempt parsing the incoming message payload as JSON.
    *   **Raw Message**: (Boolean, Optional, Default: false) If true, outputs the raw buffer instead of a string/JSON.
    *   **SSL/TLS**: (Boolean, Optional, Default: false) Enable SSL/TLS connection.
    *   **Allow Unauthorized**: (Boolean, Optional, Default: false) Allow connections to brokers with self-signed certificates (use with caution).

## Output

The node outputs the received message payload (parsed as JSON by default or as raw data/string) and metadata like the topic it was received on.

## JSON Example (Basic Trigger)

This example triggers the workflow when a message is published to the `sensors/+/temperature` topic.

```json
{
  "nodes": [
    {
      "parameters": {
        "topic": "sensors/+/temperature",
        "options": {
          "qos": 0,
          "parseJson": true,
          "rawMessage": false
        }
      },
      "id": "c3d4e5f6-a7b8-9012-3456-cdef12345678",
      "name": "MQTT Trigger",
      "type": "n8n-nodes-base.mqttTrigger",
      "typeVersion": 1,
      "position": [
        800,
        300
      ],
      "credentials": {
        "mqtt": {
          "id": "your_mqtt_credential_id",
          "name": "MQTT Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   The exact source code location for `MqttTrigger.node.ts` could not be verified in the repository at the time of documentation. The parameters listed are based on typical MQTT trigger functionality and the available documentation.
*   Ensure the MQTT broker is accessible from the n8n instance.

---

## 194. Msg91.md ---

# n8n Node: MSG91

MSG91 is a cloud communication platform providing Bulk SMS, transactional SMS APIs, OTP verification, and more. The n8n MSG91 node (`n8n-nodes-base.msg91`) allows you to integrate SMS sending capabilities directly into your workflows.

## Credentials

To use this node, you need to configure MSG91 credentials in n8n.

1.  **Auth Key:** Obtain your authentication key from your MSG91 dashboard.
2.  **Sender ID:** Specify the Sender ID you want to use for sending messages. You can find or create Sender IDs in your MSG91 dashboard under **SMS > Sender ID**.

Follow the detailed steps in the official n8n documentation for setting up [MSG91 credentials](https://docs.n8n.io/integrations/builtin/credentials/msg91/).

## Operations

The MSG91 node currently supports the following operation:

*   **SMS**
    *   `Send SMS`: Sends an SMS message to one or more recipients.

### Send SMS Parameters

*   **Authentication:** Select your configured MSG91 credentials.
*   **Mobile Numbers (Required):** A comma-separated list of recipient mobile numbers (including country code, e.g., `919999999999,918888888888`).
*   **Message (Required):** The text content of the SMS message.
*   **Sender ID (Required):** The approved Sender ID to use for the message (must match one configured in your MSG91 account and credentials).
*   **Route (Required):** Select the messaging route (e.g., `Transactional`, `Promotional`). This affects delivery speed, DND rules, and cost.
*   **Options:**
    *   **Flash SMS:** Send as a Flash SMS (appears directly on the screen, not usually stored).
    *   **Unicode:** Set to `true` if your message contains non-GSM characters (e.g., emojis, non-Latin scripts). This may affect message length limits.
    *   **Schedule Time:** Specify a future date and time (YYYY-MM-DD hh:mm:ss format) to schedule the message sending.
    *   **After Minutes:** Schedule the message to be sent after a specified number of minutes.
    *   **Response Format:** Choose the format for the API response (e.g., `JSON`).
    *   **Campaign Name:** Assign a name to the campaign for tracking purposes in MSG91.

## Use Cases

*   Send OTPs for user verification.
*   Send transactional alerts (e.g., order confirmations, shipping updates).
*   Send promotional messages to customer lists.
*   Notify users or administrators about workflow events.

## Resources

*   [n8n MSG91 Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.msg91/)
*   [n8n MSG91 Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/msg91/)
*   [MSG91 API Documentation](https://docs.msg91.com/reference/send-sms)
*   [n8n MSG91 Integration Templates](https://n8n.io/integrations/msg91/?utm_source=docs&utm_medium=workflow_templates&utm_campaign=msg91)

---

## 195. MySql.md ---

# n8n-nodes-base.mySql

The MySQL node allows interaction with a MySQL database, enabling operations like executing queries, inserting, updating, deleting, and selecting data.

## Authentication

Requires MySQL credentials (`mySql`), including host, port, database name, user, and password.

## Resource

*   **Database**: The only resource available, representing operations on the database itself.

## Operations (within Database resource)

*   **Delete**: Deletes rows from a specified table based on matching columns.
    *   **Table**: (String, Required) Name of the table.
    *   **Match Columns**: (String, Required) Comma-separated list of columns to match for deletion.
    *   **Options**:
        *   **Batch Size**: (Number, Optional, Default: 1000) Number of rows to delete per batch.
        *   **Continue on Fail**: (Boolean, Optional, Default: false) Continue processing even if some deletions fail.
*   **Execute SQL**: Executes a raw SQL query.
    *   **Query**: (String, Required) The SQL query to execute.
    *   **Options**:
        *   **Query Parameters**: (String, Optional) Comma-separated values or expressions to substitute into the query (e.g., `$1`, `$2`). Prevents SQL injection.
        *   **Split Batches**: (Boolean, Optional, Default: false) Split output into batches.
*   **Insert**: Inserts new rows into a specified table.
    *   **Table**: (String, Required) Name of the table.
    *   **Columns**: (String, Required) Comma-separated list of columns to insert data into.
    *   **Options**:
        *   **Batch Size**: (Number, Optional, Default: 1000) Number of rows to insert per batch.
        *   **Continue on Fail**: (Boolean, Optional, Default: false) Continue processing even if some insertions fail.
*   **Insert or Update (Upsert)**: Inserts new rows or updates existing ones based on specified columns.
    *   **Table**: (String, Required) Name of the table.
    *   **Columns**: (String, Required) Comma-separated list of all columns involved.
    *   **Update Key Columns**: (String, Required) Comma-separated list of columns to use as the key for matching existing rows to update.
    *   **Options**:
        *   **Batch Size**: (Number, Optional, Default: 1000) Number of rows to process per batch.
        *   **Continue on Fail**: (Boolean, Optional, Default: false) Continue processing even if some operations fail.
*   **Select**: Selects rows from a specified table.
    *   **Table**: (String, Required) Name of the table.
    *   **Columns**: (String, Optional, Default: `*`) Comma-separated list of columns to select.
    *   **Options**:
        *   **Filters**: (Fixed Collection, Optional) Define filter conditions (AND/OR logic, column, operation, value).
        *   **Return All**: (Boolean, Optional, Default: true) Return all matching rows.
        *   **Limit**: (Number, Optional) Maximum number of rows to return if `Return All` is false.
        *   **Offset**: (Number, Optional) Number of rows to skip.
        *   **Order By Fields**: (String, Optional) Comma-separated list of columns to sort by.
        *   **Order By Directions**: (String, Optional) Comma-separated list of sort directions (ASC/DESC).
        *   **Group By Fields**: (String, Optional) Comma-separated list of columns to group by.
        *   **Aggregate Functions**: (Fixed Collection, Optional) Define aggregate functions (e.g., COUNT, SUM, AVG) to apply.
        *   **Join**: (Fixed Collection, Optional) Define JOIN operations with other tables.
        *   **Split Batches**: (Boolean, Optional, Default: false) Split output into batches.
*   **Update**: Updates existing rows in a specified table based on matching columns.
    *   **Table**: (String, Required) Name of the table.
    *   **Update Columns**: (String, Required) Comma-separated list of columns to update.
    *   **Match Columns**: (String, Required) Comma-separated list of columns to match for updating.
    *   **Options**:
        *   **Batch Size**: (Number, Optional, Default: 1000) Number of rows to update per batch.
        *   **Continue on Fail**: (Boolean, Optional, Default: false) Continue processing even if some updates fail.

## JSON Example (Select Operation)

This example selects the `name` and `email` columns from the `customers` table where the `city` is 'London', limited to 10 results.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "database",
        "operation": "select",
        "table": "customers",
        "columns": "name,email",
        "options": {
          "filters": {
            "filter": [
              {
                "field": "city",
                "operation": "=",
                "value": "London"
              }
            ]
          },
          "returnAll": false,
          "limit": 10
        }
      },
      "id": "d4e5f6a7-b8c9-0123-4567-def123456789",
      "name": "Select London Customers",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        950,
        300
      ],
      "credentials": {
        "mySql": {
          "id": "your_mysql_credential_id",
          "name": "MySQL Credentials"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   The `options` object contains operation-specific parameters.
*   Query parameters (`options.queryParameters` for `executeQuery`) are crucial for preventing SQL injection when using dynamic values in queries.

---

## 196. Netlify.md ---

# n8n Nodes: Netlify & Netlify Trigger

**Official Action Node Documentation:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.netlify/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.netlify/)
**Official Trigger Node Documentation:** [https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.netlifytrigger/](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.netlifytrigger/)
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/netlify/](https://docs.n8n.io/integrations/builtin/credentials/netlify/)

## Overview

Netlify provides hosting and serverless backend services for web applications and static websites. n8n offers both an action node and a trigger node to integrate with Netlify.

*   **Netlify Node (Action):** Allows you to perform actions within Netlify, such as managing sites and deployments.
*   **Netlify Trigger Node:** Allows you to start workflows based on events occurring in Netlify, typically via webhooks.

## Credentials

Both nodes use **Netlify API** credentials.

1.  Log in to your Netlify account.
2.  Go to **User settings** > **Applications**.
3.  Under **Personal access tokens**, click **New access token**.
4.  Give the token a description and click **Generate token**.
5.  **Important:** Copy the generated token immediately. You won't be able to see it again.
6.  In n8n, go to **Credentials** and add a new credential.
7.  Search for and select **Netlify API**.
8.  Paste the copied personal access token into the **Access Token** field.
9.  Save the credential.

## Netlify Node (Action) Operations

*   **Deploy**
    *   **Cancel a deployment:** Cancels a specific ongoing deployment.
    *   **Create a new deployment:** Deploys a site from a specified source (e.g., a zip file or directory).
    *   **Get a deployment:** Retrieves details for a specific deployment.
    *   **Get all deployments:** Retrieves a list of deployments for a site.
*   **Site**
    *   **Delete a site:** Deletes a specified site.
    *   **Get a site:** Retrieves details for a specific site.
    *   **Get all sites:** Retrieves a list of all sites accessible by the credential.

## Netlify Trigger Node

The Netlify Trigger node allows your workflow to be triggered by events happening in Netlify. This is achieved using Netlify's **Outgoing webhooks**.

1.  **Configure n8n Trigger:**
    *   Add the Netlify Trigger node to your workflow.
    *   Select the Netlify API credential.
    *   The node will display a **Webhook URL**. Copy this URL.
2.  **Configure Netlify Webhook:**
    *   In your Netlify site settings, go to **Build & deploy** > **Outgoing webhooks**.
    *   Click **Add webhook**.
    *   Select the **Event to listen for** (e.g., Deploy succeeded, Deploy failed, Form submission).
    *   Paste the n8n Webhook URL into the **URL to notify** field.
    *   Save the webhook.

When the selected event occurs in Netlify, it will send data to the n8n webhook URL, triggering your workflow.

## Resources

*   [n8n Netlify Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.netlify/)
*   [n8n Netlify Trigger Node Documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.netlifytrigger/)
*   [n8n Netlify Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/netlify/)
*   [Netlify API Documentation](https://docs.netlify.com/api/get-started/)
*   [Netlify Outgoing Webhooks](https://docs.netlify.com/site-deploys/notifications/#outgoing-webhooks)

---

## 197. Newrelic.md ---

# New Relic Integration

Based on the latest research, n8n does not currently offer an official built-in integration node for interacting with the New Relic platform API.

New Relic is a comprehensive observability platform. While n8n itself can be monitored *by* New Relic (using New Relic's Node.js agent), there isn't a dedicated n8n node to query New Relic data or send events *to* New Relic from within a workflow.

Users looking to integrate New Relic functionality into their n8n workflows would need to use alternative methods:

1.  **HTTP Request Node:** Interact directly with the various [New Relic APIs](https://docs.newrelic.com/docs/apis/) (e.g., NerdGraph API, REST API, Event API). This requires:
    *   Obtaining the appropriate API keys or user keys from New Relic.
    *   Configuring the HTTP Request node with the correct API endpoint URL, HTTP method, authentication headers (e.g., `Api-Key`), and request body (often GraphQL for NerdGraph or JSON for REST/Event APIs) according to New Relic's API documentation.
2.  **Community Nodes:** Check the n8n community forums and GitHub for any user-developed New Relic nodes, although none were prominently found during the initial research.

Consult the official New Relic API documentation for specific details on authentication, endpoints, query languages (like NRQL or GraphQL), and data formats.

---

## 198. Nextcloud.md ---

# n8n-nodes-base.nextcloud

The Nextcloud node allows interaction with a Nextcloud instance, enabling operations on files, folders, and users.

## Authentication

Supports two methods:
*   **Access Token**: Uses a Nextcloud App password/token (`nextCloudApi` credentials).
*   **OAuth2**: Uses OAuth2 authentication flow (`nextCloudOAuth2Api` credentials).

## Resources & Operations

### 1. File
*   **Copy**: Copies a file from one path to another.
    *   `path` (From Path): Source file path (required).
    *   `toPath`: Destination file path (required).
*   **Delete**: Deletes a file.
    *   `path` (Delete Path): Path of the file to delete (required).
*   **Download**: Downloads a file.
    *   `path` (File Path): Path of the file to download (required).
    *   `binaryPropertyName`: Field name for the output binary data (required, default: `data`).
*   **Move**: Moves/renames a file.
    *   `path` (From Path): Source file path (required).
    *   `toPath`: Destination file path (required).
*   **Share**: Creates a public share link for a file.
    *   `path` (File Path): Path of the file to share (required).
    *   `options`: (Collection)
        *   `password`: Set a password for the share (optional).
        *   `permissions`: Share permissions (Read=1, Update=2, Create=4, Delete=8, Share=16, All=31) (optional, default: 1).
        *   `expireDate`: Expiration date (YYYY-MM-DD) (optional).
        *   `note`: Add a note to the share (optional).
        *   `label`: Add a label to the share (optional).
*   **Upload**: Uploads a file.
    *   `path` (File Path): Destination path for the uploaded file (required).
    *   `binaryDataUpload`: Use binary data from input (boolean, required).
    *   `fileContent`: Text content if not using binary data (string, required if `binaryDataUpload` is false).
    *   `binaryPropertyName`: Input field name containing binary data (string, required if `binaryDataUpload` is true, default: `data`).

### 2. Folder
*   **Copy**: Copies a folder from one path to another.
    *   `path` (From Path): Source folder path (required).
    *   `toPath`: Destination folder path (required).
*   **Create**: Creates a new folder.
    *   `path` (Folder Path): Path of the folder to create (required).
*   **Delete**: Deletes a folder.
    *   `path` (Delete Path): Path of the folder to delete (required).
*   **List**: Lists the contents of a folder.
    *   `path` (Folder Path): Path of the folder to list (required).
    *   `options`: (Collection)
        *   `depth`: Recursion depth (0=only folder, 1=folder+contents, infinity=recursive) (optional, default: 1).
        *   `recursive`: (Deprecated, use depth) List recursively (boolean, optional).
*   **Move**: Moves/renames a folder.
    *   `path` (From Path): Source folder path (required).
    *   `toPath`: Destination folder path (required).
*   **Share**: Creates a public share link for a folder.
    *   `path` (Folder Path): Path of the folder to share (required).
    *   `options`: (Collection) - Same as File Share options.

### 3. User
*   **Create**: Invites/Creates a new user.
    *   `email`: Email address of the user (required).
    *   `additionalFields`: (Collection, Optional) - Set fields like `displayName`, `password`, `quota`, `groups`, `subadmin`, `language`.
*   **Delete**: Deletes a user.
    *   `userId`: ID of the user to delete (required).
*   **Get**: Retrieves information about a single user.
    *   `userId`: ID of the user to retrieve (required).
*   **Get Many**: Retrieves a list of users.
    *   `returnAll`: Return all users (boolean, optional).
    *   `limit`: Max number of users if `returnAll` is false (number, optional).
    *   `filters`: (Collection, Optional) - Filter by `search` string.
*   **Update**: Updates user attributes.
    *   `userId`: ID of the user to update (required).
    *   `updateFields`: (Collection, Optional) - Update fields like `displayName`, `email`, `password`, `quota`, `groups`, `subadmin`, `language`.

## JSON Example (Upload File using Binary Data)

This example uploads a binary file (expected in the `data` field of the input item) to `/shared/reports/new_report.pdf`.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "accessToken",
        "resource": "file",
        "operation": "upload",
        "path": "/shared/reports/new_report.pdf",
        "binaryDataUpload": true,
        "binaryPropertyName": "data"
      },
      "id": "e5f6a7b8-c9d0-1234-5678-ef1234567890",
      "name": "Upload Report to Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1100,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "your_nextcloud_token_credential_id",
          "name": "Nextcloud Token"
        }
      }
    }
  ],
  "connections": {}
}
```

---

## 199. NocoDb.md ---

# n8n-nodes-base.nocoDb

The NocoDB node allows interaction with a NocoDB instance, enabling operations on rows within tables.

**Note:** The source code for this node (`NocoDb.node.ts`) could not be located in the standard `n8n-io/n8n` repository path (`packages/nodes-base/nodes/`) during this documentation process. Information is based on the official n8n documentation.

## Authentication

Requires NocoDB credentials (`nocoDbApi`), including the NocoDB Host URL and an API Token.

## Resource

*   **Row**: The only resource, representing operations on table rows.

## Operations (within Row resource)

*   **Create**: Creates a new row in a specified table.
    *   `Base`: (String, Required) The name or ID of the NocoDB base.
    *   `Table`: (String, Required) The name or ID of the table.
    *   `Fields`: (JSON, Required) A JSON object containing the column names and values for the new row.
*   **Delete**: Deletes a row based on its ID.
    *   `Base`: (String, Required) The name or ID of the NocoDB base.
    *   `Table`: (String, Required) The name or ID of the table.
    *   `Row ID`: (String/Number, Required) The unique ID of the row to delete.
*   **Get**: Retrieves a single row by its ID.
    *   `Base`: (String, Required) The name or ID of the NocoDB base.
    *   `Table`: (String, Required) The name or ID of the table.
    *   `Row ID`: (String/Number, Required) The unique ID of the row to retrieve.
    *   `Options`: (Collection, Optional)
        *   `Fields`: Comma-separated list of fields to include (optional).
*   **Get Many**: Retrieves multiple rows from a table, with optional filtering and sorting.
    *   `Base`: (String, Required) The name or ID of the NocoDB base.
    *   `Table`: (String, Required) The name or ID of the table.
    *   `Return All`: (Boolean, Optional) Whether to return all rows or apply limits.
    *   `Limit`: (Number, Optional) Maximum number of rows to return if `Return All` is false.
    *   `Options`: (Collection, Optional)
        *   `Fields`: Comma-separated list of fields to include (optional).
        *   `Sorts`: Comma-separated list of fields to sort by (optional).
        *   `Where`: NocoDB filter string (e.g., `(field,eq,value)`) (optional).
        *   `Offset`: Number of rows to skip (optional).
*   **Update**: Updates an existing row by its ID.
    *   `Base`: (String, Required) The name or ID of the NocoDB base.
    *   `Table`: (String, Required) The name or ID of the table.
    *   `Row ID`: (String/Number, Required) The unique ID of the row to update.
    *   `Fields`: (JSON, Required) A JSON object containing the column names and new values.

## JSON Example (Create Row)

This example creates a new row in the `Contacts` table within the `CRM` base.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "row",
        "operation": "create",
        "base": "CRM",
        "table": "Contacts",
        "fields": "={{ { \"Name\": $json.name, \"Email\": $json.email, \"Status\": \"New Lead\" } }}"
      },
      "id": "b2c3d4e5-f6a7-8901-2345-cdef01234567",
      "name": "Create NocoDB Contact",
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ],
      "credentials": {
        "nocoDbApi": {
          "id": "your_nocodb_credential_id",
          "name": "NocoDB API"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   The `Base` and `Table` parameters might require IDs instead of names depending on the NocoDB setup and API version.
*   The `Fields` parameter for Create and Update operations expects a JSON object. Using expressions (`={{ ... }}`) allows dynamic mapping from input data.

---

## 200. NoOp.md ---

# n8n-nodes-base.noOp

The "No Operation, do nothing" node (`n8n-nodes-base.noOp`) is a core utility node in n8n. Its primary function is to pass data through without performing any action or modification.

## Purpose

*   **Workflow Clarity**: It can be used as a visual marker or endpoint in a workflow branch, indicating that no further action is taken on that path. This improves readability and understanding, especially in complex workflows.
*   **Placeholder**: It can serve as a temporary placeholder during workflow development where a node might be added later.
*   **Debugging**: Can be used to isolate sections of a workflow or observe data flow at specific points without interference.

## Parameters

The NoOp node has **no configurable parameters**. It simply receives input items and outputs them unchanged.

## JSON Example

Here's how a NoOp node looks within a workflow's JSON structure. It's connected after a "Start" node.

```json
{
  "nodes": [
    {
      "parameters": {},
      "id": "f0g1h2i3-j4k5-6789-abcd-ef0123456789",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        800,
        300
      ]
    },
    {
      "parameters": {},
      "id": "a1b2c3d4-e5f6-7890-1234-bcdef0123456",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1000,
        300
      ],
      "color": "#b0b0b0"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

**Notes:**
*   The `parameters` object is empty as there are no settings.
*   The `color` property is often set to grey by default for visual distinction.

---

## 201. Notion.md ---

# n8n-nodes-base.notion

The Notion node (`n8n-nodes-base.notion`) allows interaction with the Notion API to manage blocks, databases, pages, and users. It supports various operations for creating, retrieving, updating, and searching Notion content.

**Source Code:** [NotionV2.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Notion/v2/NotionV2.node.ts)

**Default Version:** 2.2

## Authentication

Requires Notion API credentials (`notionApi`).

## Resources and Operations

### 1. Block

*   **Append After (`append`)**: Appends new block children after a specified block ID.
    *   `Block ID`: (String, Required) ID of the block to append after.
    *   `Blocks`: (Collection, Required) Array of block objects to append. Supports various block types (paragraph, heading, list, etc.).
*   **Get Child Blocks (`getAll`)**: Retrieves the children of a specified block.
    *   `Block ID`: (String, Required) ID of the parent block.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all child blocks or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of blocks to return if `Return All` is false.
    *   `Fetch Nested Blocks`: (Boolean, Optional) Recursively fetch children of child blocks.
    *   `Simplify Output`: (Boolean, Optional, v2+) Simplifies the output structure.

### 2. Database

*   **Get (`get`)**: Retrieves metadata for a specific database.
    *   `Database ID`: (String, Required) ID of the database.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
*   **Get Many (`getAll`)**: Retrieves a list of databases accessible to the integration.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all databases or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of databases to return if `Return All` is false.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
*   **Search (`search`)**: Searches for databases matching a query.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all matching databases or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of databases to return if `Return All` is false.
    *   `Text`: (String, Optional) The text query to search for.
    *   `Options`: (Collection, Optional)
        *   `Sort`: Sort object (e.g., `{ "property": "last_edited_time", "direction": "descending" }`).
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.

### 3. Database Page

*   **Create (`create`)**: Creates a new page within a specified database.
    *   `Database ID`: (String, Required) ID of the parent database.
    *   `Title`: (String, Optional) Value for the primary title property of the page.
    *   `Properties`: (Collection, Required) Defines the values for the page's properties using Notion's property object structure.
    *   `Blocks`: (Collection, Optional) Array of block objects to add as content to the new page.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
*   **Get (`get`)**: Retrieves a specific page from a database.
    *   `Page ID`: (String, Required) ID of the page.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
*   **Get Many (`getAll`)**: Retrieves pages from a database, with filtering and sorting.
    *   `Database ID`: (String, Required) ID of the database to query.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all pages or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of pages to return if `Return All` is false.
    *   `Filters`: (Collection, Optional) Defines filter conditions using Notion's filter object structure.
    *   `Sorts`: (Collection, Optional) Defines sorting criteria using Notion's sort object structure.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
    *   `Download Files`: (Boolean, Optional) Download files attached to the page properties.
*   **Update (`update`)**: Updates properties of an existing database page.
    *   `Page ID`: (String, Required) ID of the page to update.
    *   `Properties`: (Collection, Required) Defines the new values for the page's properties.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
    *   `Archive`: (Boolean, Optional) Whether to archive the page.

### 4. Page

*   **Archive (`archive`)**: Archives (or unarchives) a page.
    *   `Page ID`: (String, Required) ID of the page.
    *   `Archived`: (Boolean, Required) Set to `true` to archive, `false` to unarchive.
*   **Create (`create`)**: Creates a new page, optionally nested under a parent page.
    *   `Parent Page ID`: (String, Required) ID of the parent page.
    *   `Title`: (String, Optional) Value for the page's title property.
    *   `Properties`: (Collection, Optional) Defines values for the page's properties (less common for non-database pages).
    *   `Blocks`: (Collection, Optional) Array of block objects to add as content.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.
*   **Search (`search`)**: Searches for pages matching a query.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all matching pages or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of pages to return if `Return All` is false.
    *   `Text`: (String, Optional) The text query to search for.
    *   `Options`: (Collection, Optional)
        *   `Sort`: Sort object.
    *   `Simplify Output`: (Boolean, Optional) Simplifies the output structure.

### 5. User

*   **Get (`get`)**: Retrieves information about a specific user.
    *   `User ID`: (String, Required) ID of the user.
*   **Get Many (`getAll`)**: Retrieves a list of users.
    *   `Return All`: (Boolean, Optional) Whether to retrieve all users or use pagination.
    *   `Limit`: (Number, Optional) Maximum number of users to return if `Return All` is false.

## JSON Example (Create Database Page with Options)

This example creates a new page in a specific Notion database, setting various property types (text, number, select, date) and adding a paragraph block as content. It also demonstrates the `simplifyOutput` option.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "YOUR_DATABASE_ID",
        "simplifyOutput": true,
        "properties": {
          "propertiesUi": {
            "propertyValues": [
              {
                "propertyName": "Name", // Title property
                "propertyValue": "={{ $json.taskName }}"
              },
              {
                "propertyName": "Priority", // Select property
                "propertyType": "select",
                "propertyValue": "High"
              },
              {
                "propertyName": "Estimate (Hours)", // Number property
                "propertyType": "number",
                "propertyValue": "={{ $json.estimatedHours }}"
              },
              {
                "propertyName": "Due Date", // Date property
                "propertyType": "date",
                "propertyValue": "={{ $now.toISO() }}" // Sets to current date/time
              }
            ]
          }
        },
        "blockUi": {
          "blockValues": [
            {
              "object": "block",
              "type": "paragraph",
              "paragraph": {
                "rich_text": [
                  {
                    "type": "text",
                    "text": {
                      "content": "This task was automatically created by n8n."
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "id": "c4d5e6f7-a8b9-0123-4567-def012345678",
      "name": "Create Notion Task Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "notionApi": {
          "id": "YOUR_NOTION_CREDENTIAL_ID",
          "name": "Notion API"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_DATABASE_ID` and `YOUR_NOTION_CREDENTIAL_ID` with actual values.
*   Property names (`Name`, `Priority`, etc.) must match the exact names in your Notion database.
*   Property values need to be formatted according to Notion's API requirements for each type (e.g., select requires the name of the option, date requires ISO 8601 format).
*   The `propertiesUi` structure helps build the complex `properties` object required by the Notion API.
*   The `blockUi` structure helps build the `children` array for block content.

---

## 202. Odoo.md ---

# n8n Node: Odoo

**Official Documentation:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.odoo/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.odoo/)
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/odoo/](https://docs.n8n.io/integrations/builtin/credentials/odoo/)

## Overview

Odoo is a suite of open-source business management software tools including CRM, e-commerce, billing, accounting, manufacturing, warehouse, project management, and inventory management. The n8n Odoo node allows you to automate various operations within your Odoo instance.

## Credentials

This node uses **Odoo API** credentials.

1.  **Identify your Odoo Instance URL:** This is the base URL of your Odoo installation (e.g., `https://mycompany.odoo.com` or `http://localhost:8069`).
2.  **Database Name:** The name of the Odoo database you want to connect to.
3.  **Authentication Method:**
    *   **API Key:** Recommended for Odoo.sh or Odoo Online. Find or generate an API key in your Odoo user profile settings (Preferences > Account Security > New API Key).
    *   **Username & Password:** Can be used for self-hosted instances, but API keys are generally preferred for security.
4.  **Configure n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Odoo API**.
    *   Enter your **Odoo URL**, **Database**, **Username**, and either **Password** or **API Key** based on your chosen authentication method.
    *   Save the credential.

## Operations

The node supports CRUD (Create, Read, Update, Delete) operations for several Odoo resources:

*   **Contact**
    *   Create a new contact (res.partner).
    *   Delete a contact.
    *   Get a contact by ID.
    *   Get all contacts (with filtering and pagination options).
    *   Update a contact.
*   **Custom Resource**
    *   Allows interaction with any Odoo model (resource) not explicitly listed.
    *   Requires specifying the **Model Name** (e.g., `product.template`, `sale.order`).
    *   Supports Create, Delete, Get, Get All, and Update operations for the specified model.
*   **Note**
    *   Create a new note (note.note).
    *   Delete a note.
    *   Get a note by ID.
    *   Get all notes.
    *   Update a note.
*   **Opportunity**
    *   Create a new CRM opportunity (crm.lead).
    *   Delete an opportunity.
    *   Get an opportunity by ID.
    *   Get all opportunities.
    *   Update an opportunity.

## Common Parameters

*   **Resource:** The type of Odoo object to interact with (Contact, Note, Opportunity, Custom Resource).
*   **Operation:** The action to perform (Create, Get, Get All, Update, Delete).
*   **ID:** Required for Get, Update, Delete operations to specify the target record.
*   **Fields:** For Create and Update operations, specify the fields and their values according to the Odoo model.
*   **Options (for Get All):**
    *   **Limit:** Maximum number of records to return.
    *   **Filters:** Apply Odoo domain filters to narrow down results.
    *   **Return All:** Automatically handle pagination to retrieve all matching records.

## AI Tool Usage

This node can be used as an [AI tool](https://docs.n8n.io/integrations/ai-tools/) within n8n's AI agents. This allows parameters like filters, IDs, and field values to be set dynamically based on AI instructions.

## Resources

*   [n8n Odoo Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.odoo/)
*   [n8n Odoo Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/odoo/)
*   [Odoo External API Documentation](https://www.odoo.com/documentation/16.0/developer/misc/api/external_api.html)

---

## 203. Ollama.md ---

# n8n Nodes: Ollama Model & Ollama Chat Model

**Official Model Node Documentation:** [https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/)
**Official Chat Model Node Documentation:** [https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/)
**Official Embeddings Node Documentation:** [https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsollama/](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsollama/)
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/ollama/](https://docs.n8n.io/integrations/builtin/credentials/ollama/)

## Overview

[Ollama](https://ollama.com/) allows you to run large language models (LLMs) locally. n8n provides several sub-nodes for interacting with a running Ollama instance, typically used within AI Agent or LLM Chain nodes:

*   **Ollama Model:** For generating text completions (non-chat).
*   **Ollama Chat Model:** For conversational interactions, designed for use with AI agents.
*   **Embeddings Ollama:** For generating text embeddings using models running in Ollama.

These nodes enable you to leverage locally hosted open-source models within your n8n workflows for various AI tasks.

## Credentials

All Ollama nodes use **Ollama API** credentials.

1.  **Ensure Ollama is Running:** You need a running Ollama instance accessible from your n8n instance. By default, Ollama runs on `http://localhost:11434`.
2.  **Base URL:** Identify the URL where your Ollama API is accessible (e.g., `http://localhost:11434`).
3.  **Configure n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Ollama API**.
    *   Enter the **Base URL** of your Ollama instance.
    *   Save the credential.

## Ollama Model & Ollama Chat Model Parameters

Both the Model and Chat Model nodes share similar parameters:

*   **Credentials:** Select your configured Ollama API credential.
*   **Model:** Choose the specific model hosted by your Ollama instance to use for generation (e.g., `llama2`, `llama2:13b`, `mistral`, `codellama`). You need to have pulled the model into Ollama first (`ollama pull <model_name>`). The dropdown might show common models, but you can often specify any model available in your Ollama instance.
*   **Options (Advanced):**
    *   **Sampling Temperature:** Controls randomness. Higher values (e.g., 0.8) make output more random, lower values (e.g., 0.2) make it more deterministic. Default is often around 0.7-0.8.
    *   **Top K:** Limits sampling to the K most likely next tokens. Default is often 40.
    *   **Top P (Nucleus Sampling):** Limits sampling to the smallest set of tokens whose cumulative probability exceeds P. Default is often 0.9.
    *   **Keep Alive:** (Optional) Controls how long the model stays loaded in memory after a request. Can improve performance for subsequent requests but uses more resources. Example: `5m` for 5 minutes.
    *   **Other Ollama Parameters:** You can often add other parameters supported by the Ollama API (like `num_predict`, `stop`, etc.) under **Add Option**.

## Embeddings Ollama Parameters

*   **Credentials:** Select your configured Ollama API credential.
*   **Model:** Choose the specific model hosted by your Ollama instance to use for generating embeddings (e.g., `nomic-embed-text`, `all-minilm`). You need to have pulled the model into Ollama first.
*   **Options (Advanced):** Similar advanced options as the Model/Chat Model nodes might be available (e.g., Keep Alive).

## Usage

These nodes are typically used as sub-nodes within larger AI workflows:

*   **AI Agent Node:** Use **Ollama Chat Model** as the selected Model Vendor.
*   **LLM Chain Node:** Use **Ollama Model** or **Ollama Chat Model** as the Language Model.
*   **Vector Store Nodes (Upsert/Retrieve):** Use **Embeddings Ollama** as the Embeddings Model when configuring the vector store connection (e.g., Qdrant, Chroma, Pinecone).

## Resources

*   [n8n Ollama Model Node Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/)
*   [n8n Ollama Chat Model Node Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/)
*   [n8n Embeddings Ollama Node Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsollama/)
*   [n8n Ollama Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/ollama/)
*   [Ollama Website](https://ollama.com/)
*   [Ollama GitHub Repository & Model Library](https://github.com/ollama/ollama)
*   [n8n Self-hosted AI Starter Kit](https://n8n.io/blog/self-hosted-ai-starter-kit/)

---

## 204. Onedrive.md ---

# n8n Nodes: Microsoft OneDrive & Microsoft OneDrive Trigger

**Official Action Node Documentation:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftonedrive/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftonedrive/)
**Official Trigger Node Documentation:** [https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftonedrivetrigger/](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftonedrivetrigger/)
**Credentials Documentation:** [https://docs.n8n.io/integrations/builtin/credentials/microsoft/](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)

## Overview

Microsoft OneDrive is a cloud storage service that allows users to store files and personal data, share files, and sync files across devices. n8n provides nodes to interact with OneDrive, enabling automation of file and folder management and triggering workflows based on OneDrive events.

*   **Microsoft OneDrive Node (Action):** Performs operations like creating, reading, updating, deleting, copying, downloading, searching, and sharing files and folders.
*   **Microsoft OneDrive Trigger Node:** Starts workflows based on events like file/folder creation or updates in OneDrive.

## Credentials

Both nodes use **Microsoft OAuth2 API** credentials. You will need to register an application in Microsoft Azure Active Directory (Entra ID) and grant it the necessary permissions (like `Files.ReadWrite.All`, `Sites.ReadWrite.All` depending on your needs).

1.  **Register Azure App:** Follow the steps in the [n8n Microsoft Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/) to create an Azure AD application registration.
2.  **Add Permissions:** Grant the required Microsoft Graph API permissions (delegated or application, depending on your authentication flow). Common permissions include `Files.ReadWrite.All`, `offline_access`, `User.Read`.
3.  **Configure n8n Credentials:**
    *   In n8n, go to **Credentials** and add a new credential.
    *   Search for and select **Microsoft (OAuth2 API)**.
    *   Enter the **Client ID**, **Client Secret**, and **Tenant ID** from your Azure app registration.
    *   Specify the **OAuth Redirect URL** provided by n8n in your Azure app registration.
    *   Choose the appropriate **Authentication** type (Predefined App or Generic).
    *   Connect your account by clicking **Sign in with Microsoft** and authorizing the application.
    *   Save the credential.

## Microsoft OneDrive Node Operations

*   **File Resource:**
    *   **Copy:** Copies a file to a specified destination folder.
    *   **Delete:** Deletes a file by its ID.
    *   **Download:** Downloads the content of a file.
    *   **Get:** Retrieves metadata for a specific file by ID.
    *   **Rename:** Renames a file.
    *   **Search:** Searches for files based on a query string.
    *   **Share:** Creates a sharing link for a file.
    *   **Upload:** Uploads a file (up to 4MB directly, larger files require different approaches often involving upload sessions via the HTTP Request node).
*   **Folder Resource:**
    *   **Create:** Creates a new folder within a parent folder.
    *   **Delete:** Deletes a folder by its ID.
    *   **Get Children:** Lists the files and folders within a specified folder.
    *   **Rename:** Renames a folder.
    *   **Search:** Searches for folders based on a query string.
    *   **Share:** Creates a sharing link for a folder.

**Finding Folder IDs:**
Many folder operations require a Folder ID. You can find this:
*   In the URL when browsing OneDrive online.
*   Using the **Folder > Search** operation within the n8n node itself. This is often necessary for OneDrive associated with Microsoft 365/SharePoint.

## Microsoft OneDrive Trigger Node Events

*   **On File Created:** Triggers when a new file is added to the monitored location.
*   **On File Updated:** Triggers when an existing file is modified.
*   **On Folder Created:** Triggers when a new folder is created.
*   **On Folder Updated:** Triggers when a folder's metadata is updated (renaming, etc.).

**Configuration:**
*   Select the **Event** to monitor.
*   Specify the **Drive ID** (often 'me' for the user's personal drive, or a specific SharePoint site/drive ID).
*   Optionally specify a **Folder ID** to monitor a specific folder instead of the entire drive.

## AI Tool Usage

The Microsoft OneDrive action node can be used as an [AI tool](https://docs.n8n.io/integrations/ai-tools/) within n8n's AI agents, allowing dynamic parameter setting based on AI instructions.

## Resources

*   [n8n Microsoft OneDrive Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftonedrive/)
*   [n8n Microsoft OneDrive Trigger Node Documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftonedrivetrigger/)
*   [n8n Microsoft Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)
*   [Microsoft Graph API Documentation (Files)](https://learn.microsoft.com/en-us/graph/api/resources/driveitem?view=graph-rest-1.0)

---

## 205. OpenAi.md ---

# n8n-nodes-langchain.openai

The OpenAI node (`n8n-nodes-langchain.openai`) provides comprehensive integration with various OpenAI APIs, including Assistants, Text models (like GPT-4, GPT-3.5), Image generation (DALL·E), Audio processing (Whisper, TTS), and File management for assistants.

**Source Code:**
*   Main Node: [OpenAi.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/%40n8n/nodes-langchain/nodes/vendors/OpenAi/OpenAi.node.ts)
*   Router: [router.ts](https://github.com/n8n-io/n8n/blob/master/packages/%40n8n/nodes-langchain/nodes/vendors/OpenAi/actions/router.ts)
*   Operations are implemented in subdirectories within `actions/` (e.g., `actions/assistant/`, `actions/text/`).

## Authentication

Requires OpenAI credentials (`openAiApi`).

## Resources and Operations

The node is organized by resource, each with specific operations:

### 1. Assistant

Manages OpenAI Assistants.

*   **Create an Assistant (`create`)**: Creates a new assistant with specified instructions, model, tools, etc.
*   **Delete an Assistant (`delete`)**: Deletes an existing assistant.
*   **List Assistants (`getAll`)**: Retrieves a list of assistants.
*   **Message an Assistant (`message`)**: Sends a message to an assistant thread and gets a response. Can utilize tools (Code Interpreter, Retrieval, Function Calling).
*   **Update an Assistant (`update`)**: Modifies an existing assistant.

### 2. Text

Interacts with OpenAI's language models.

*   **Message a Model (`chat`)**: Sends a message (or series of messages) to a specified chat model (e.g., `gpt-4`, `gpt-3.5-turbo`) and receives a completion. Supports function calling and tool usage.
*   **Classify Text for Violations (`moderate`)**: Uses the Moderation API to check text for harmful content.

### 3. Image

Uses DALL·E models for image generation and analysis.

*   **Analyze Image (`analyze`)**: (Using GPT-4 Vision) Analyzes the content of an image.
*   **Generate an Image (`generate`)**: Creates images based on a text prompt using DALL·E models.

### 4. Audio

Processes audio files.

*   **Generate Audio (`speak`)**: Converts text to spoken audio using TTS models.
*   **Transcribe a Recording (`transcribe`)**: Converts audio into text using the Whisper model.
*   **Translate a Recording (`translate`)**: Translates audio into English text using the Whisper model.

### 5. File

Manages files associated with Assistants (primarily for Retrieval).

*   **Delete a File (`delete`)**: Deletes a file uploaded to OpenAI.
*   **List Files (`getAll`)**: Retrieves a list of uploaded files.
*   **Upload a File (`upload`)**: Uploads a file for use with tools like Retrieval.

## Tool Usage

The `Message an Assistant` and `Message a Model` operations support connecting tools via the **Tools** connector. This allows the AI model or assistant to use external functions or data sources (defined as separate n8n nodes or workflows) to answer queries or perform actions.

## JSON Example (Message a Model with Options)

This example demonstrates sending a chat message to `gpt-4-turbo` with specific options like temperature, max tokens, and requesting a JSON output format.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "text",
        "operation": "chat",
        "model": "gpt-4-turbo",
        "message": "Extract the key entities (person, organization, location) from the following text and return them as a JSON object:\n\n{{ $json.inputText }}",
        "options": {
          "responseFormat": "json_object",
          "temperature": 0.2,
          "maxTokens": 500
        }
      },
      "id": "d5e6f7a8-b9c0-1234-5678-ef0123456789",
      "name": "Extract Entities with OpenAI",
      "type": "n8n-nodes-langchain.openai",
      "typeVersion": 1,
      "position": [
        1600,
        500
      ],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI API"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_OPENAI_CREDENTIAL_ID` with your actual credential ID.
*   The `message` parameter takes the user's prompt. Here, it explicitly asks for JSON output, reinforced by `"responseFormat": "json_object"` in the options.
*   `temperature` controls randomness (lower is more deterministic).
*   `maxTokens` limits the length of the generated response.
*   This node is part of the `@n8n/nodes-langchain` package, distinct from the older `n8n-nodes-base.openai` (which might exist in older n8n versions but is superseded). The correct type is `n8n-nodes-langchain.openai`.

---

## 206. OwnCloud.md ---

# n8n-nodes-base.ownCloud

**Status: Documentation Not Found**

Extensive searches in the official n8n documentation and the primary `n8n-io/n8n` GitHub repository did not yield specific documentation or source code files (like `OwnCloud.node.ts`) for a node named `n8n-nodes-base.ownCloud`.

**Possible Reasons:**
*   **Deprecated:** The node may have existed in older versions of n8n but has since been removed or replaced.
*   **Community Node:** It might be a community-contributed node, potentially available in a separate repository or requiring manual installation. Official documentation typically focuses on built-in nodes.
*   **Incorrect Name:** The node name in the initial list might be slightly inaccurate.

**Recommendation:**
If integration with ownCloud is required, consider searching the n8n community forums or community node lists for relevant integrations. Alternatively, the `HTTP Request` node can often be used to interact with ownCloud's API directly, provided API documentation for ownCloud is available.

---

## 207. PagerDuty.md ---

# n8n-nodes-base.pagerDuty

The PagerDuty node (`n8n-nodes-base.pagerDuty`) allows interaction with the PagerDuty API to manage incidents, incident notes, log entries, and users.

**Source Code:** [PagerDuty.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/PagerDuty/PagerDuty.node.ts)

## Authentication

Supports API Token (`pagerDutyApi`) or OAuth2 (`pagerDutyOAuth2Api`).

## Resources and Operations

### 1. Incident

*   **Create (`create`)**: Creates a new incident.
    *   `Title`: (String, Required) Incident title.
    *   `Service ID`: (String, Required) ID of the service the incident belongs to.
    *   `Email`: (String, Required) Email address of the user creating the incident (used in `From` header).
    *   `Additional Fields`:
        *   `Details`: (String, Optional) Detailed description.
        *   `Priority ID`: (String, Optional) ID of the priority level.
        *   `Escalation Policy ID`: (String, Optional) ID of the escalation policy.
        *   `Urgency`: (Options, Optional) Urgency level (`high` or `low`).
        *   `Incident Key`: (String, Optional) Unique key for deduplication.
    *   `Conference Bridge`:
        *   `Conference Number`: (String, Optional)
        *   `Conference URL`: (String, Optional)
*   **Get (`get`)**: Retrieves details of a specific incident.
    *   `Incident ID`: (String, Required)
*   **Get All (`getAll`)**: Retrieves a list of incidents with filtering and sorting.
    *   `Return All`: (Boolean, Optional)
    *   `Limit`: (Number, Optional)
    *   `Options`:
        *   `Date Range Start/End`: (DateTime, Optional)
        *   `Incident Key`: (String, Optional)
        *   `Service IDs`: (String, Optional, Comma-separated)
        *   `Statuses`: (MultiOptions, Optional: `triggered`, `acknowledged`, `resolved`)
        *   `Team IDs`: (String, Optional, Comma-separated)
        *   `Urgencies`: (MultiOptions, Optional: `high`, `low`)
        *   `User IDs`: (String, Optional, Comma-separated)
        *   `Time Zone`: (String, Optional)
        *   `Sort By`: (Options, Optional: `created_at`, `incident_key`, `resolved_at`, `urgency` + `:asc`/`:desc`)
        *   `Include`: (MultiOptions, Optional: `assignees`, `first_trigger_log_entries`, `priorities`, `services`, `teams`, `users`)
*   **Update (`update`)**: Updates an existing incident.
    *   `Incident ID`: (String, Required)
    *   `Email`: (String, Required) Email of the user performing the update.
    *   `Update Fields`:
        *   `Title`: (String, Optional)
        *   `Status`: (Options, Optional: `acknowledged`, `resolved`)
        *   `Priority ID`: (String, Optional)
        *   `Escalation Level`: (Number, Optional)
        *   `Escalation Policy ID`: (String, Optional)
        *   `Assignment`: (Collection, Optional) Assign to users or escalation policies.
        *   `Resolution`: (String, Optional) Resolution note (required if status is `resolved`).
        *   `Urgency`: (Options, Optional: `high`, `low`)
    *   `Conference Bridge`:
        *   `Conference Number`: (String, Optional)
        *   `Conference URL`: (String, Optional)

### 2. Incident Note

*   **Create (`create`)**: Adds a note to an incident.
    *   `Incident ID`: (String, Required)
    *   `Email`: (String, Required) Email of the user adding the note.
    *   `Content`: (String, Required) Note content.
*   **Get All (`getAll`)**: Retrieves all notes for a specific incident.
    *   `Incident ID`: (String, Required)

### 3. Log Entry

*   **Get (`get`)**: Retrieves a specific log entry.
    *   `Log Entry ID`: (String, Required)
    *   `Options`:
        *   `Time Zone`: (String, Optional)
        *   `Include`: (MultiOptions, Optional: `channels`, `incidents`, `services`, `teams`, `users`)
*   **Get All (`getAll`)**: Retrieves log entries with filtering.
    *   `Return All`: (Boolean, Optional)
    *   `Limit`: (Number, Optional)
    *   `Options`:
        *   `Date Range Start/End`: (DateTime, Optional)
        *   `Is Overview`: (Boolean, Optional) If true, only returns high-level incident details.
        *   `Team IDs`: (String, Optional, Comma-separated)
        *   `Time Zone`: (String, Optional)
        *   `Include`: (MultiOptions, Optional: `channels`, `incidents`, `services`, `teams`, `users`)

### 4. User

*   **Get (`get`)**: Retrieves details for a specific user.
    *   `User ID`: (String, Required)
    *   `Options`:
        *   `Include`: (MultiOptions, Optional: `contact_methods`, `notification_rules`, `teams`, `subdomains`)

## JSON Example (Create Incident with Options)

This example creates a high-urgency incident assigned to a specific service and escalation policy, including details and a conference bridge.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "apiToken",
        "resource": "incident",
        "operation": "create",
        "title": "Critical System Outage Detected: {{ $json.systemName }}",
        "serviceId": "PABC123", // Replace with your Service ID
        "email": "n8n-automation@example.com", // Replace with sender email
        "additionalFields": {
          "urgency": "high",
          "details": "Automated alert: {{ $json.errorMessage }}. Please investigate immediately.",
          "escalationPolicyId": "PESC456", // Replace with your Escalation Policy ID
          "priorityId": "PPRI789" // Replace with your Priority ID
        },
        "conferenceBridgeUi": {
          "conferenceBridgeValues": {
            "conferenceNumber": "+1-555-123-4567",
            "conferenceUrl": "https://meet.example.com/outage-{{ $now.toMillis() }}"
          }
        }
      },
      "id": "e6f7a8b9-c0d1-2345-6789-f0123456789a",
      "name": "Create PagerDuty Incident",
      "type": "n8n-nodes-base.pagerDuty",
      "typeVersion": 1,
      "position": [
        1800,
        600
      ],
      "credentials": {
        "pagerDutyApi": {
          "id": "YOUR_PAGERDUTY_CREDENTIAL_ID",
          "name": "PagerDuty API Token"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace placeholder IDs (`PABC123`, `PESC456`, `PPRI789`, `YOUR_PAGERDUTY_CREDENTIAL_ID`) and email with actual values.
*   The `email` parameter is used for the `From` header in the API request.
*   `additionalFields` allows setting optional parameters like urgency, details, priority, and escalation policy.
*   `conferenceBridgeUi` is used to structure the `conference_bridge` object.

---

## 208. Pinterest.md ---

# Pinterest Integration

Currently, n8n does not provide an official, dedicated integration node specifically for Pinterest.

While Pinterest offers APIs for managing pins, boards, and user data, interacting with it from n8n requires using the generic HTTP Request node. Official n8n documentation and community discussions point towards this method.

To integrate Pinterest with n8n:

1.  **Use the HTTP Request Node:** This is the primary method.
    *   Obtain necessary credentials by creating an app on the [Pinterest Developers](https://developers.pinterest.com/) platform (usually involving OAuth 2.0 for authentication).
    *   Configure the HTTP Request node in n8n:
        *   Handle OAuth 2.0 authentication, potentially using n8n's built-in OAuth2 credentials helper or managing token refresh manually within the workflow.
        *   Set the appropriate HTTP method (GET, POST, PATCH, DELETE) based on the desired Pinterest API action.
        *   Use the correct Pinterest API endpoint URL (e.g., `https://api.pinterest.com/v5/...`).
        *   Construct the request body or parameters according to the Pinterest API specifications.
2.  **Community Nodes:** Check the n8n community forums and GitHub for any user-developed Pinterest nodes that might simplify certain interactions, although official support relies on the HTTP Request node.

Always refer to the official [Pinterest API documentation](https://developers.pinterest.com/docs/api/v5/) for the most current information on endpoints, authentication, scopes, and request formats.

---

## 209. Pipedrive.md ---

# n8n-nodes-base.pipedrive

The Pipedrive node (`n8n-nodes-base.pipedrive`) allows interaction with the Pipedrive API to manage various resources like activities, deals, files, leads, notes, organizations, persons, and products.

**Source Code:** [Pipedrive.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Pipedrive/Pipedrive.node.ts)

## Authentication

Supports API Token (`pipedriveApi`) or OAuth2 (`pipedriveOAuth2Api`).

## Resources and Operations

The node supports a wide range of operations across different Pipedrive resources:

*   **Activity**: Create, Delete, Get, Get Many, Update
*   **Deal**: Create, Delete, Duplicate, Get, Get Many, Search, Update
*   **Deal Activity**: Get Many
*   **Deal Product**: Add, Get Many, Remove, Update
*   **File**: Create, Delete, Download, Get, Update (details)
*   **Lead**: Create, Delete, Get, Get Many, Update
*   **Note**: Create, Delete, Get, Get Many, Update
*   **Organization**: Create, Delete, Get, Get Many, Update, Search
*   **Person**: Create, Delete, Get, Get Many, Search, Update
*   **Product**: Get Many

Each operation has specific required and optional fields. Many resources also support custom fields, which can be managed through the `additionalFields.customProperties` parameter.

**Load Options:** The node dynamically loads options for fields like `Activity Type`, `Deal Stage`, `Filter`, `Organization`, `Person`, `Pipeline`, `Product`, `Stage`, `Status`, `User`, and custom fields based on the connected Pipedrive account.

## JSON Example (Create Deal with Custom Fields and Options)

This example demonstrates creating a new deal, assigning it to a specific user and stage, setting a value, and adding custom field data.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "apiToken",
        "resource": "deal",
        "operation": "create",
        "title": "New Website Project - {{ $json.companyName }}",
        "userId": 1234567, // Replace with actual User ID
        "personId": "{{ $json.contactPersonId }}", // Can be dynamic
        "organizationId": "{{ $json.companyOrgId }}", // Can be dynamic
        "additionalFields": {
          "value": 5000,
          "currency": "USD",
          "stageId": 2, // Replace with actual Stage ID
          "status": "open",
          "customProperties": {
            "property": [
              {
                "name": "YOUR_CUSTOM_FIELD_API_KEY_1", // Replace with actual custom field API key
                "value": "{{ $json.projectType }}" // Example: "Website Redesign"
              },
              {
                "name": "YOUR_CUSTOM_FIELD_API_KEY_2", // Replace with actual custom field API key
                "value": "{{ $json.estimatedCompletionDate }}" // Example: "2025-12-31"
              }
            ]
          }
        }
      },
      "id": "a1b2c3d4-e5f6-7890-1234-abcdef012345",
      "name": "Create Pipedrive Deal",
      "type": "n8n-nodes-base.pipedrive",
      "typeVersion": 1,
      "position": [
        1900,
        700
      ],
      "credentials": {
        "pipedriveApi": {
          "id": "YOUR_PIPEDRIVE_CREDENTIAL_ID",
          "name": "Pipedrive API Token"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace placeholder IDs (`1234567`, `2`, `YOUR_PIPEDRIVE_CREDENTIAL_ID`) and custom field API keys (`YOUR_CUSTOM_FIELD_API_KEY_1`, `YOUR_CUSTOM_FIELD_API_KEY_2`) with actual values from your Pipedrive account.
*   `personId` and `organizationId` can be static IDs or dynamically mapped from previous nodes using expressions.
*   `additionalFields` allows setting standard fields like `value`, `currency`, `stageId`, `status`, etc.
*   Custom fields are added within `additionalFields.customProperties.property` as an array of objects, each containing the `name` (custom field API key) and `value`.

---

## 210. PipedriveTrigger.md ---

# n8n-nodes-base.pipedriveTrigger

The Pipedrive Trigger node (`n8n-nodes-base.pipedriveTrigger`) starts a workflow when specific events occur in Pipedrive. It uses Pipedrive webhooks to receive notifications.

**Source Code:** [PipedriveTrigger.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Pipedrive/PipedriveTrigger.node.ts)

## Authentication

*   **Pipedrive Credentials**: Requires either an API Token (`pipedriveApi`) or OAuth2 (`pipedriveOAuth2Api`) credential to register and manage the webhook with Pipedrive.
*   **Incoming Webhook Authentication**: Optionally, you can secure the webhook endpoint itself using Basic Auth (`httpBasicAuth`). If enabled, Pipedrive must be configured to send these credentials when calling the webhook.

## Trigger Events

The node listens for specific actions on various Pipedrive entities (objects).

*   **Action**: Defines the type of event to trigger the workflow.
    *   `*` (All): Any change.
    *   `added` / `create`: Data was added.
    *   `deleted` / `delete`: Data was deleted.
    *   `merged`: Data was merged (only applicable to some entities).
    *   `updated` / `change`: Data was updated.
    *(Note: The specific action names like `added`/`create` depend slightly on the node version, but `*` covers all.)*
*   **Entity/Object**: Defines the Pipedrive object type to monitor.
    *   `Activity`
    *   `Activity Type`
    *   `*` (All)
    *   `Deal`
    *   `Note`
    *   `Organization`
    *   `Person`
    *   `Pipeline`
    *   `Product`
    *   `Stage`
    *   `User`

## Webhook Management

The node automatically creates, checks, and deletes the necessary webhook in Pipedrive when the workflow is activated or deactivated.

## JSON Example (Trigger on Deal Update)

This example shows the trigger node configured to start the workflow whenever any deal is updated in Pipedrive, using API token authentication for Pipedrive and no authentication for the incoming webhook.

```json
{
  "nodes": [
    {
      "parameters": {
        "authentication": "apiToken",
        "incomingAuthentication": "none",
        "action": "updated", // Or "change" depending on version
        "entity": "deal", // Or "object" depending on version
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "onReceived"
      },
      "id": "b2c3d4e5-f6a7-8901-2345-bcdef0123456",
      "name": "Pipedrive Deal Updated Trigger",
      "type": "n8n-nodes-base.pipedriveTrigger",
      "typeVersion": 1.1,
      "position": [
        1700,
        500
      ],
      "webhookId": "YOUR_GENERATED_WEBHOOK_ID", // Managed by n8n
      "credentials": {
        "pipedriveApi": {
          "id": "YOUR_PIPEDRIVE_CREDENTIAL_ID",
          "name": "Pipedrive API Token"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_PIPEDRIVE_CREDENTIAL_ID` with your actual credential ID.
*   `webhookId` is automatically managed by n8n when the workflow is active.
*   The `action` and `entity`/`object` parameters determine which Pipedrive events will trigger the workflow.

---

## 211. Pocket.md ---

# n8n-nodes-base.pocket

**Status: Documentation Not Found**

Research indicates that there is no official documentation or source code for a built-in `n8n-nodes-base.pocket` node within the standard n8n repository or documentation website.

Searches for official documentation and source code on `docs.n8n.io` and `github.com/n8n-io/n8n` did not yield results for this specific node ID.

Community discussions mention interacting with the Pocket API using the `HTTP Request` node, and a community node for `PocketBase` exists, but not for the Pocket (Read It Later) service as a base node.

Therefore, a JSON example cannot be provided for `n8n-nodes-base.pocket` based on official sources.

---

## 212. Postgres.md ---

# n8n-nodes-base.postgres

The Postgres node (`n8n-nodes-base.postgres`) allows interaction with a PostgreSQL database. It supports various operations like selecting, inserting, updating, deleting data, and executing raw SQL queries.

**Source Code:**
*   Main: [Postgres.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Postgres/Postgres.node.ts)
*   V2 Implementation: [PostgresV2.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Postgres/v2/PostgresV2.node.ts)
*   V2 Router: [router.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Postgres/v2/actions/router.ts)

**Documentation:** [Postgres node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/)

## Credentials

Requires `postgres` type credentials, which include host, port, user, password, and database name.

## Operations

The node supports the following operations (`operation` parameter):

*   `delete`: Delete rows or truncate/drop tables.
*   `executeQuery`: Execute a raw SQL query.
*   `insert`: Insert new rows into a table.
*   `insertOrUpdate`: Insert new rows or update existing ones based on conflict resolution.
*   `select`: Select rows from a table.
*   `update`: Update existing rows in a table.

## JSON Examples

Below are examples demonstrating the JSON structure for common operations, showcasing different options.

### Example 1: Select Rows

Selects all columns from the `users` table in the `public` schema where the `country` is 'Canada'.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "users",
        "columns": {
          "values": [
            {
              "column": "*"
            }
          ]
        },
        "conditions": {
          "values": [
            {
              "field": "country",
              "value": "Canada"
            }
          ]
        },
        "options": {
          "outputLargeFormatNumbersAs": "numbers"
        }
      },
      "id": "a1b2c3d4-e5f6-7890-1234-abcdef012345",
      "name": "Select Canadian Users",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1900,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "My Postgres DB"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: Insert Row (Manual Mapping)

Inserts a new row into the `orders` table, manually mapping input data fields `orderId` and `productName` to the table columns `id` and `product` respectively.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "orders",
        "columns": {
          "mode": "define",
          "values": [
            {
              "column": "id",
              "value": "={{ $json.orderId }}"
            },
            {
              "column": "product",
              "value": "={{ $json.productName }}"
            },
            {
              "column": "quantity",
              "value": 1
            }
          ]
        },
        "options": {
          "queryBatching": "transaction",
          "replaceEmptyStringsWithNull": true
        }
      },
      "id": "b2c3d4e5-f6a7-8901-2345-bcdef0123456",
      "name": "Insert New Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2100,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "My Postgres DB"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Execute Query (Parameterized)

Executes a parameterized query to find users by email, using the incoming `email` field as the parameter.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM users WHERE email = $1;",
        "options": {
          "queryParameters": "={{ $json.email }}",
          "outputLargeFormatNumbersAs": "text"
        }
      },
      "id": "c3d4e5f6-a7b8-9012-3456-cdef01234567",
      "name": "Find User by Email",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2300,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "My Postgres DB"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Update Row

Updates the `status` column to 'shipped' for orders in the `orders` table where the `id` matches the incoming `orderId`.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "orders",
        "updateKey": "id",
        "columns": {
          "values": [
            {
              "column": "status",
              "value": "shipped"
            }
          ]
        },
        "conditions": {
          "values": [
            {
              "field": "id",
              "value": "={{ $json.orderId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d4e5f6a7-b8c9-0123-4567-def012345678",
      "name": "Update Order Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2500,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "My Postgres DB"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_POSTGRES_CREDENTIAL_ID` with your actual credential ID.
*   Schema and table names (`public`, `users`, `orders`) should match your database structure.
*   Expressions like `={{ $json.orderId }}` are used to dynamically insert data from the incoming n8n item.
*   The `options` object contains various settings like timeout, batching behavior, and data type handling.

---

## 213. Pushbullet.md ---

# n8n-nodes-base.pushbullet

The Pushbullet node (`n8n-nodes-base.pushbullet`) allows you to interact with the Pushbullet service to send and manage pushes (notes, links, files).

**Source Code:** [Pushbullet.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Pushbullet/Pushbullet.node.ts)

**Documentation:** [Pushbullet node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pushbullet/)

## Credentials

Requires `pushbulletOAuth2Api` credentials.

## Resource

*   `push`: Represents Pushbullet pushes.

## Operations

The node supports the following operations (`operation` parameter) for the `push` resource:

*   `create`: Create a new push (Note, Link, or File).
*   `delete`: Delete an existing push by its ID.
*   `getAll`: Retrieve multiple pushes, with optional filtering.
*   `update`: Update an existing push (e.g., mark as dismissed).

## JSON Examples

Below are examples demonstrating the JSON structure for common operations.

### Example 1: Create Push (Note to Default Device)

Sends a note with a title and body to all of the user's devices.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "push",
        "operation": "create",
        "type": "note",
        "title": "Meeting Reminder",
        "body": "Don't forget the team meeting at 3 PM.",
        "target": "default"
      },
      "id": "e5f6a7b8-c9d0-1234-5678-ef0123456789",
      "name": "Send Note Push",
      "type": "n8n-nodes-base.pushbullet",
      "typeVersion": 1,
      "position": [
        2700,
        600
      ],
      "credentials": {
        "pushbulletOAuth2Api": {
          "id": "YOUR_PUSHBULLET_CREDENTIAL_ID",
          "name": "My Pushbullet Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: Create Push (Link to Specific Device)

Sends a link with a title, body, and URL to a specific device identified by its ID.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "push",
        "operation": "create",
        "type": "link",
        "title": "Interesting Article",
        "body": "Check out this article on AI advancements.",
        "url": "https://example.com/ai-article",
        "target": "device_iden",
        "value": "DEVICE_IDEN_HERE" // Replace with actual device ID or use expression
      },
      "id": "f6a7b8c9-d0e1-2345-6789-f0123456789a",
      "name": "Send Link Push",
      "type": "n8n-nodes-base.pushbullet",
      "typeVersion": 1,
      "position": [
        2900,
        600
      ],
      "credentials": {
        "pushbulletOAuth2Api": {
          "id": "YOUR_PUSHBULLET_CREDENTIAL_ID",
          "name": "My Pushbullet Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Create Push (File to Email)

Sends a file (referenced by the binary property `data`) to a specific email address.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "push",
        "operation": "create",
        "type": "file",
        "body": "Here is the report you requested.",
        "binaryPropertyName": "data", // Assumes input item has binary data in 'data' property
        "target": "email",
        "value": "recipient@example.com"
      },
      "id": "a7b8c9d0-e1f2-3456-7890-0123456789ab",
      "name": "Send File Push",
      "type": "n8n-nodes-base.pushbullet",
      "typeVersion": 1,
      "position": [
        3100,
        600
      ],
      "credentials": {
        "pushbulletOAuth2Api": {
          "id": "YOUR_PUSHBULLET_CREDENTIAL_ID",
          "name": "My Pushbullet Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Get Many Pushes (Filtered)

Retrieves the last 50 active pushes modified after a specific timestamp.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "push",
        "operation": "getAll",
        "returnAll": false,
        "limit": 50,
        "filters": {
          "active": true,
          "modified_after": "={{ $now.minus({days: 7}).toISO() }}" // Example: modified in the last 7 days
        }
      },
      "id": "b8c9d0e1-f2a3-4567-8901-123456789abc",
      "name": "Get Recent Pushes",
      "type": "n8n-nodes-base.pushbullet",
      "typeVersion": 1,
      "position": [
        3300,
        600
      ],
      "credentials": {
        "pushbulletOAuth2Api": {
          "id": "YOUR_PUSHBULLET_CREDENTIAL_ID",
          "name": "My Pushbullet Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 5: Delete Push

Deletes a specific push using its ID provided in the input data.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "push",
        "operation": "delete",
        "pushId": "={{ $json.pushToDeleteId }}"
      },
      "id": "c9d0e1f2-a3b4-5678-9012-23456789abcd",
      "name": "Delete Push",
      "type": "n8n-nodes-base.pushbullet",
      "typeVersion": 1,
      "position": [
        3500,
        600
      ],
      "credentials": {
        "pushbulletOAuth2Api": {
          "id": "YOUR_PUSHBULLET_CREDENTIAL_ID",
          "name": "My Pushbullet Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_PUSHBULLET_CREDENTIAL_ID` with your actual credential ID.
*   Replace `DEVICE_IDEN_HERE` with a valid device identifier.
*   Expressions like `={{ $json.pushToDeleteId }}` are used to dynamically insert data from the incoming n8n item.

---

## 214. Pushover.md ---

# n8n-nodes-base.pushover

The Pushover node (`n8n-nodes-base.pushover`) allows sending push notifications via the Pushover service.

**Source Code:** [Pushover.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Pushover/Pushover.node.ts)

**Documentation:** [Pushover node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pushover/)

**AI Tool Usage:** This node can be used as an AI tool, allowing parameters to be set automatically or directed by AI.

## Credentials

Requires `pushoverApi` credentials (API Token/Key).

## Resource

*   `message`: Represents a Pushover message.

## Operation

The node supports one operation (`operation` parameter) for the `message` resource:

*   `push`: Send a push notification.

## JSON Examples

Below are examples demonstrating the JSON structure for sending pushes with different options.

### Example 1: Simple Push (Normal Priority)

Sends a simple message with normal priority to the specified user key.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "push",
        "userKey": "YOUR_USER_KEY",
        "message": "This is a standard notification.",
        "priority": 0 // Normal Priority
      },
      "id": "d0e1f2a3-b4c5-6789-0123-3456789abcde",
      "name": "Send Simple Pushover",
      "type": "n8n-nodes-base.pushover",
      "typeVersion": 1,
      "position": [
        3700,
        600
      ],
      "credentials": {
        "pushoverApi": {
          "id": "YOUR_PUSHOVER_CREDENTIAL_ID",
          "name": "My Pushover App"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: High Priority Push with Sound

Sends a high-priority message that bypasses quiet hours, using a specific sound.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "push",
        "userKey": "YOUR_USER_KEY",
        "message": "High priority alert!",
        "priority": 1, // High Priority
        "additionalFields": {
          "title": "ALERT",
          "sound": "gamelan" // Specify sound name
        }
      },
      "id": "e1f2a3b4-c5d6-7890-1234-456789abcdef",
      "name": "Send High Priority Pushover",
      "type": "n8n-nodes-base.pushover",
      "typeVersion": 1,
      "position": [
        3900,
        600
      ],
      "credentials": {
        "pushoverApi": {
          "id": "YOUR_PUSHOVER_CREDENTIAL_ID",
          "name": "My Pushover App"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Emergency Priority Push with Retry/Expire

Sends an emergency-priority message that requires confirmation, retrying every 60 seconds and expiring after 300 seconds.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "push",
        "userKey": "YOUR_USER_KEY",
        "message": "EMERGENCY: System offline! Requires acknowledgement.",
        "priority": 2, // Emergency Priority
        "retry": 60, // Retry every 60 seconds
        "expire": 300, // Expire after 300 seconds
        "additionalFields": {
          "title": "SYSTEM DOWN - URGENT"
        }
      },
      "id": "f2a3b4c5-d6e7-8901-2345-56789abcdef0",
      "name": "Send Emergency Pushover",
      "type": "n8n-nodes-base.pushover",
      "typeVersion": 1,
      "position": [
        4100,
        600
      ],
      "credentials": {
        "pushoverApi": {
          "id": "YOUR_PUSHOVER_CREDENTIAL_ID",
          "name": "My Pushover App"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Push with HTML, URL, and Attachment

Sends a message with HTML formatting, a supplementary URL, and an attachment (referenced by binary property `reportFile`).

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "operation": "push",
        "userKey": "YOUR_USER_KEY",
        "message": "Report ready. See <b>details</b> <a href=\"https://example.com/dashboard\">here</a>.",
        "priority": 0,
        "additionalFields": {
          "title": "Weekly Report",
          "html": true,
          "url": "https://example.com/report.pdf",
          "url_title": "View Full Report PDF",
          "attachmentsUi": {
            "attachmentsValues": {
              "binaryPropertyName": "reportFile" // Assumes input item has binary data in 'reportFile'
            }
          }
        }
      },
      "id": "a3b4c5d6-e7f8-9012-3456-6789abcdef01",
      "name": "Send Report Pushover",
      "type": "n8n-nodes-base.pushover",
      "typeVersion": 1,
      "position": [
        4300,
        600
      ],
      "credentials": {
        "pushoverApi": {
          "id": "YOUR_PUSHOVER_CREDENTIAL_ID",
          "name": "My Pushover App"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_USER_KEY` and `YOUR_PUSHOVER_CREDENTIAL_ID` with your actual keys/IDs.
*   The `userKey` is the Pushover User Key, not the email address.
*   Priority levels range from -2 (Lowest) to 2 (Emergency).
*   `retry` and `expire` are only applicable for Emergency priority (2).
*   Sounds can be specified by name (e.g., `pushover`, `bike`, `bugle`, `cashregister`, `classical`, `cosmic`, `falling`, `gamelan`, `incoming`, `intermission`, `magic`, `mechanical`, `pianobar`, `siren`, `spacealarm`, `tugboat`, `alien`, `climb`, `persistent`, `echo`, `updown`, `none`).
*   For attachments, ensure the specified `binaryPropertyName` exists in the input data.

---

## 215. QuickBooks.md ---

# n8n-nodes-base.quickBooks

The QuickBooks Online node (`n8n-nodes-base.quickbooks`) provides extensive integration with QuickBooks Online accounting software.

**Source Code:** [QuickBooks.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/QuickBooks/QuickBooks.node.ts)

**Documentation:** [QuickBooks Online node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.quickbooks/)

**AI Tool Usage:** This node can be used as an AI tool, allowing parameters to be set automatically or directed by AI.

## Credentials

Requires `quickBooksOAuth2Api` credentials.

## Resources and Operations

The node supports the following resources and operations:

*   **Bill**: Create, Delete, Get, Get All, Update
*   **Customer**: Create, Get, Get All, Update
*   **Employee**: Create, Get, Get All, Update
*   **Estimate**: Create, Delete, Get, Get All, Send, Update
*   **Invoice**: Create, Delete, Get, Get All, Send, Update, Void
*   **Item**: Get, Get All
*   **Payment**: Create, Delete, Get, Get All, Send, Update, Void
*   **Purchase**: Get, Get All
*   **Transaction**: Get Report
*   **Vendor**: Create, Get, Get All, Update

## JSON Examples

Below are examples demonstrating the JSON structure for common operations.

### Example 1: Create Customer

Creates a new customer record.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "customer",
        "operation": "create",
        "displayName": "Example Corp",
        "additionalFields": {
          "givenName": "John",
          "familyName": "Doe",
          "primaryEmailAddr": {
            "address": "john.doe@example.com"
          },
          "primaryPhone": {
            "freeFormNumber": "(555) 123-4567"
          },
          "billAddr": {
            "line1": "123 Main St",
            "city": "Anytown",
            "countrySubDivisionCode": "CA",
            "postalCode": "94000",
            "country": "USA"
          }
        }
      },
      "id": "b4c5d6e7-f8a9-0123-4567-789abcdef012",
      "name": "Create QuickBooks Customer",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        4500,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: Get Customer by ID

Retrieves a specific customer using their QuickBooks ID.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "customer",
        "operation": "get",
        "customerId": "={{ $json.customerIdToGet }}" // Input customer ID
      },
      "id": "c5d6e7f8-a9b0-1234-5678-89abcdef0123",
      "name": "Get QuickBooks Customer",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        4700,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Create Invoice with Line Items

Creates a new invoice with multiple line items (one service, one non-inventory item).

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "invoice",
        "operation": "create",
        "customerRef": "={{ $json.customerId }}", // Customer ID from previous step or input
        "Line": {
          "line": [
            {
              "detailType": "SalesItemLineDetail",
              "amount": 150.00,
              "description": "Web Design Services",
              "salesItemLineDetailUi": {
                "itemRef": "SERVICE_ITEM_ID" // Replace with actual Item ID for service
              }
            },
            {
              "detailType": "SalesItemLineDetail",
              "amount": 25.50,
              "salesItemLineDetailUi": {
                "itemRef": "NONINV_ITEM_ID", // Replace with actual Item ID for non-inventory
                "quantity": 1,
                "unitPrice": 25.50
              }
            }
          ]
        },
        "additionalFields": {
          "dueDate": "={{ $now.plus({days: 30}).toFormat("yyyy-MM-dd") }}"
        }
      },
      "id": "d6e7f8a9-b0c1-2345-6789-9abcdef01234",
      "name": "Create QuickBooks Invoice",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        4900,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Get All Invoices (Filtered and Limited)

Retrieves the 10 most recent invoices for a specific customer.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "invoice",
        "operation": "getAll",
        "returnAll": false,
        "limit": 10,
        "filters": {
          "query": "SELECT * FROM Invoice WHERE CustomerRef = ",
          "queryFilters": {
            "filters": [
              {
                "value": "={{ $json.customerId }}" // Customer ID to filter by
              }
            ]
          }
        }
      },
      "id": "e7f8a9b0-c1d2-3456-7890-abcdef012345",
      "name": "Get Recent Customer Invoices",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        5100,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 5: Update Customer (Sparse Update)

Updates only the primary email address and phone number for an existing customer.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "customer",
        "operation": "update",
        "customerId": "={{ $json.customerIdToUpdate }}", // Input customer ID
        "updateFields": {
          "primaryEmailAddr": {
            "address": "new.email@example.com"
          },
          "primaryPhone": {
            "freeFormNumber": "(555) 987-6543"
          }
        }
      },
      "id": "f8a9b0c1-d2e3-4567-8901-bcdef0123456",
      "name": "Update QuickBooks Customer",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        5300,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 6: Get Transaction Report (Profit and Loss)

Retrieves a Profit and Loss report for the current year to date.

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "transaction",
        "operation": "getReport",
        "reportType": "ProfitAndLoss",
        "additionalFields": {
          "date_macro": "This Year-to-date"
        }
      },
      "id": "a9b0c1d2-e3f4-5678-9012-cdef01234567",
      "name": "Get P&L Report",
      "type": "n8n-nodes-base.quickbooks",
      "typeVersion": 1,
      "position": [
        5500,
        600
      ],
      "credentials": {
        "quickBooksOAuth2Api": {
          "id": "YOUR_QUICKBOOKS_CREDENTIAL_ID",
          "name": "My QuickBooks Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_QUICKBOOKS_CREDENTIAL_ID` with your actual credential ID.
*   Replace placeholders like `SERVICE_ITEM_ID`, `NONINV_ITEM_ID` with actual QuickBooks Item IDs.
*   Expressions like `={{ $json.customerId }}` are used to dynamically insert data from previous nodes or input.
*   For `create` and `update` operations, `additionalFields` or `updateFields` contain the specific fields for the resource.
*   Line items (`Line` parameter) require careful structuring, especially `detailType` and the corresponding detail object (e.g., `salesItemLineDetailUi`).
*   `getAll` operations often use QuickBooks Query Language (SQL-like syntax) in the `query` filter.

---

## 216. RabbitMqTrigger.md ---

# n8n-nodes-base.rabbitMqTrigger

The RabbitMQ Trigger node (`n8n-nodes-base.rabbitmqTrigger`) listens for messages on a specified RabbitMQ queue or topic and triggers the workflow when a message is received.

**Source Code:** [RabbitMQTrigger.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/RabbitMQ/RabbitMQTrigger.node.ts)

**Documentation:** [RabbitMQ Trigger node documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.rabbitmqtrigger/)

## Credentials

Requires `rabbitmq` credentials.

## Parameters

*   **Queue / Topic**: The name of the queue to read messages from.
*   **Options**:
    *   **Content Is Binary**: (Boolean, default: `false`) Whether the message content should be treated as binary data.
    *   **Delete From Queue When**: (Options, default: `immediately`) Determines when the message is acknowledged (removed) from the queue.
        *   `Execution Finishes`: After the workflow execution finishes (success or failure).
        *   `Execution Finishes Successfully`: After the workflow execution finishes successfully.
        *   `Immediately`: As soon as the message is received.
        *   `Specified Later in Workflow`: Using a separate RabbitMQ node with the 'Delete from queue' operation.
    *   **JSON Parse Body**: (Boolean, default: `false`) Whether to attempt parsing the message body as JSON. Hidden if `Content Is Binary` is true.
    *   **Only Content**: (Boolean, default: `false`) Whether to return only the message content instead of the full message object (including properties, fields, etc.). Hidden if `Content Is Binary` is true.
    *   **Parallel Message Processing Limit**: (Number, default: `-1`) Maximum number of workflow executions to run concurrently for received messages. `-1` means no limit. Hidden if `Delete From Queue When` is `Immediately`.
    *   **Binding**: (Fixed Collection) Allows binding the queue to exchanges with specific routing keys.
        *   **Exchange**: Name of the exchange.
        *   **RoutingKey**: Routing key for the binding.
    *   *(Inherited RabbitMQ connection options like Host, Port, User, Password, VHost, SSL)*
*   **Notice**: A notice appears if `Delete From Queue When` is set to `Specified Later in Workflow`, reminding the user to add a RabbitMQ node later for deletion.

## Output

The node outputs an item containing the message data. If `Only Content` is false (default), the output includes `content`, `fields`, and `properties`. If `JSON Parse Body` is true, `content` will be a JSON object; otherwise, it's a string (or binary data if `Content Is Binary` is true).

## JSON Examples

### Example 1: Basic Trigger (Acknowledge Immediately)

Listens to `my-queue` and acknowledges messages immediately. Assumes message body is text.

```json
{
  "nodes": [
    {
      "parameters": {
        "queue": "my-queue",
        "options": {
          "acknowledge": "immediately"
        }
      },
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "RabbitMQ Trigger Basic",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        450,
        300
      ],
      "credentials": {
        "rabbitmq": {
          "id": "YOUR_RABBITMQ_CREDENTIAL_ID",
          "name": "My RabbitMQ Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: JSON Parsing and Delayed Acknowledgment

Listens to `json-events`, parses the body as JSON, and acknowledges only after the workflow finishes successfully. Limits parallel executions to 5.

```json
{
  "nodes": [
    {
      "parameters": {
        "queue": "json-events",
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "parallelMessages": 5
        }
      },
      "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
      "name": "RabbitMQ JSON Trigger",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        450,
        500
      ],
      "credentials": {
        "rabbitmq": {
          "id": "YOUR_RABBITMQ_CREDENTIAL_ID",
          "name": "My RabbitMQ Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Binary Content and Manual Acknowledgment

Listens to `binary-data-queue`, treats content as binary, and requires a later RabbitMQ node to acknowledge/delete the message.

```json
{
  "nodes": [
    {
      "parameters": {
        "queue": "binary-data-queue",
        "options": {
          "contentIsBinary": true,
          "acknowledge": "laterMessageNode"
        }
      },
      "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef01",
      "name": "RabbitMQ Binary Trigger",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        450,
        700
      ],
      "credentials": {
        "rabbitmq": {
          "id": "YOUR_RABBITMQ_CREDENTIAL_ID",
          "name": "My RabbitMQ Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Trigger with Exchange Binding

Listens to `logs-queue`, binds it to the `logs-exchange` with routing key `info`.

```json
{
  "nodes": [
    {
      "parameters": {
        "queue": "logs-queue",
        "options": {
          "acknowledge": "executionFinishes",
          "binding": {
            "bindings": [
              {
                "exchange": "logs-exchange",
                "routingKey": "info"
              }
            ]
          }
        }
      },
      "id": "d4e5f6a7-b8c9-0123-4567-890abcdef012",
      "name": "RabbitMQ Logs Trigger",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        450,
        900
      ],
      "credentials": {
        "rabbitmq": {
          "id": "YOUR_RABBITMQ_CREDENTIAL_ID",
          "name": "My RabbitMQ Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_RABBITMQ_CREDENTIAL_ID` with your actual credential ID.
*   The trigger listens continuously when the workflow is active.
*   Manual testing fetches only one message.
*   Error handling for connection closure is built-in.
*   The `acknowledge` setting significantly impacts how messages are handled, especially concerning retries and parallel processing.

---

## 217. Redis.md ---

# n8n-nodes-base.redis

The Redis node (`n8n-nodes-base.redis`) allows interaction with a Redis instance, enabling operations like getting, setting, deleting keys, incrementing values, managing lists, and publishing messages.

**Source Code:** [Redis.node.ts](https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Redis/Redis.node.ts)

**Documentation:** [Redis node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis/)

**AI Tool Capability:** This node can be used as an AI tool, allowing many parameters to be set automatically or directed by AI.

## Credentials

Requires `redis` credentials.

## Operations and Parameters

The node supports the following operations:

1.  **Delete**
    *   **Key**: (String, Required) Name of the key to delete.

2.  **Get**
    *   **Name**: (String, Required, Default: `propertyName`) Name of the property to write the retrieved data to (supports dot-notation).
    *   **Key**: (String, Required) Name of the key to get.
    *   **Key Type**: (Options, Default: `automatic`) The type of the key to get (`automatic`, `hash`, `list`, `sets`, `string`). `automatic` determines the type before fetching (slower).
    *   **Options**:
        *   **Dot Notation**: (Boolean, Default: `true`) Whether to use dot-notation for nested properties in the output.

3.  **Increment (incr)**
    *   **Key**: (String, Required) Name of the key to increment (must hold an integer).
    *   **Expire**: (Boolean, Default: `false`) Whether to set a timeout on the key after incrementing.
    *   **TTL**: (Number, Default: `60`, Min: `1`) Time-to-live in seconds (only if `Expire` is true).

4.  **Info**
    *   No specific parameters. Returns server information.

5.  **Keys**
    *   **Key Pattern**: (String, Required) Pattern to match keys (e.g., `user:*`).
    *   **Get Values**: (Boolean, Default: `true`) Whether to retrieve the values of the matching keys in addition to the key names.

6.  **Pop**
    *   **List**: (String, Required) Name of the list to pop an element from.
    *   **Direction**: (Options, Default: `left`) Whether to pop from the `left` (LPOP) or `right` (RPOP).

7.  **Publish**
    *   **Channel**: (String, Required) Name of the channel to publish the message to.
    *   **Data**: (String, Required) The message data to publish.

8.  **Push**
    *   **List**: (String, Required) Name of the list to push data onto.
    *   **Data**: (String, Required) The data to push.
    *   **Direction**: (Options, Default: `left`) Whether to push to the `left` (LPUSH) or `right` (RPUSH).

9.  **Set**
    *   **Key**: (String, Required) Name of the key to set.
    *   **Value**: (String) The value to set.
    *   **Key Type**: (Options, Default: `automatic`) The type to store the value as (`automatic`, `hash`, `list`, `sets`, `string`). `automatic` tries to infer the type.
    *   **Value Is JSON**: (Boolean, Default: `true`) Whether the provided `Value` is JSON (only applies when `Key Type` is `hash`). If false, expects key-value pairs.
    *   **Expire**: (Boolean, Default: `false`) Whether to set a timeout on the key.
    *   **TTL**: (Number, Default: `60`, Min: `1`) Time-to-live in seconds (only if `Expire` is true).

## Output

The output depends on the operation:
*   **Delete**: Returns success status.
*   **Get**: Returns the input item with the retrieved value added under the specified `Name` property.
*   **Increment**: Returns the new value of the key.
*   **Info**: Returns an object containing server information.
*   **Keys**: Returns a list of matching keys, and optionally their values if `Get Values` is true.
*   **Pop**: Returns the popped element.
*   **Publish**: Returns the number of clients that received the message.
*   **Push**: Returns the new length of the list.
*   **Set**: Returns success status (`OK`).

## JSON Examples

### Example 1: Set String Value with TTL

Sets the key `session:user123` to `active` with a 1-hour expiration.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "set",
        "key": "session:user123",
        "value": "active",
        "keyType": "string",
        "expire": true,
        "ttl": 3600
      },
      "id": "e1f2a3b4-c5d6-7890-1234-567890abcdef",
      "name": "Set Redis String TTL",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        300
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 2: Get Hash Value

Gets the hash stored at key `user:profile:456` and adds it to the output under the `profileData` property.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "get",
        "propertyName": "profileData",
        "key": "user:profile:456",
        "keyType": "hash"
      },
      "id": "f2a3b4c5-d6e7-8901-2345-67890abcdef0",
      "name": "Get Redis Hash",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        500
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 3: Increment Counter

Increments the key `page:views:homepage`.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "incr",
        "key": "page:views:homepage"
      },
      "id": "a3b4c5d6-e7f8-9012-3456-7890abcdef01",
      "name": "Increment Redis Counter",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        700
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 4: Get Keys Matching Pattern

Finds all keys starting with `product:` and retrieves their values.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "keys",
        "keyPattern": "product:*",
        "getValues": true
      },
      "id": "b4c5d6e7-f8a9-0123-4567-890abcdef012",
      "name": "Get Redis Keys",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        900
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 5: Publish Message

Publishes a JSON string message to the `notifications` channel.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "publish",
        "channel": "notifications",
        "messageData": "{\"user\": \"alice\", \"event\": \"login\"}"
      },
      "id": "c5d6e7f8-a9b0-1234-5678-90abcdef0123",
      "name": "Publish Redis Message",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        1100
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 6: Push to List (Right)

Pushes a new task ID to the right end of the `task_queue` list.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "push",
        "list": "task_queue",
        "messageData": "task_id_999",
        "direction": "right"
      },
      "id": "d6e7f8a9-b0c1-2345-6789-0abcdef01234",
      "name": "Push Redis List (Right)",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        1300
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

### Example 7: Pop from List (Left)

Pops an element from the left end of the `task_queue` list.

```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "pop",
        "list": "task_queue",
        "direction": "left"
      },
      "id": "e7f8a9b0-c1d2-3456-7890-abcdef012345",
      "name": "Pop Redis List (Left)",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        650,
        1500
      ],
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "My Redis Creds"
        }
      }
    }
  ],
  "connections": {}
}
```

**Notes:**
*   Replace `YOUR_REDIS_CREDENTIAL_ID` with your actual credential ID.
*   Ensure the data types match the Redis key types for operations like `incr`, `push`, `pop`, `get` (when not `automatic`).
*   The `set` operation with `automatic` key type will try to store JSON objects as Hashes and arrays as Lists.

---

## 218. Replit.md ---

# Replit Integration

Based on the latest research, n8n does not currently provide an official built-in integration node for interacting with the Replit platform API.

Replit is an online IDE and platform for coding and hosting applications. While you can host n8n instances *on* Replit, there isn't a dedicated n8n node designed to manage Repls, deployments, or other Replit features from within an n8n workflow.

Users aiming to automate Replit tasks using n8n would typically need to:

1.  **Use the HTTP Request Node:** Interact directly with Replit's APIs (note: Replit's API landscape might be less standardized or publicly documented for general automation compared to other platforms; check their current developer resources). This would involve:
    *   Obtaining necessary authentication credentials (API keys or other tokens if available).
    *   Finding the relevant API endpoints for the desired actions.
    *   Configuring the HTTP Request node in n8n with the correct URL, method, headers, and body according to Replit's API specifications.
2.  **Explore Community Solutions:** Check the n8n community forums or GitHub for any user-created nodes or workflows specifically designed for Replit integration, although none were prominently found during the initial research.

For information on running n8n *on* Replit, refer to specific community guides or Replit documentation covering application hosting.

---

## 219. RespondToWebhook.md ---

```json
{
  "nodes": [
    // 1. Webhook Trigger Node (Required)
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "my-webhook-path",
        "responseMode": "usingRespondNode", // Crucial setting
        "options": {}
      },
      "id": "webhook-trigger-uuid",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        600,
        500
      ]
    },
    // 2. Respond to Webhook Node
    {
      "parameters": {
        "options": {
          "responseCode": 200 // Example: Set response code
        },
        "response": {
          "responseMode": "json", // Options: allItems, firstItem, json, text, binary, noData, redirect
          "jsonResponse": "={{ { \"status\": \"received\", \"message\": \"Data processed successfully\", \"inputData\": $input.item.json } }}" // Example JSON response using input
          // "textResponse": "Processing complete for ID: {{ $input.item.json.id }}" // Example for text response
          // "redirectUrl": "https://example.com/thank-you" // Example for redirect
          // "binaryPropertyName": "myBinaryData" // Example for binary response (requires binary data on input)
        }
      },
      "id": "respond-webhook-uuid",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        800,
        500
      ]
      // This node defines the response sent back to the caller of the Webhook Trigger.
      // It MUST be used in conjunction with a Webhook node set to "Using 'Respond to Webhook' node".
      // It executes only ONCE using the first item it receives.
      // Place it where you want the response to be sent in the workflow.
    }
  ],
  "connections": {
    "webhook-trigger-uuid": {
      "main": [
        [
          {
            "node": "respond-webhook-uuid", // Or connect to other processing nodes first
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
    // If other nodes process data before responding:
    /*
    "some-processing-node-uuid": {
      "main": [
        [
          {
            "node": "respond-webhook-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
    */
  }
}
```

---

## 220. RocketChat.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "chat",
        "operation": "postMessage",
        "channel": "general", // Can be channel name, ID, or username for DM
        "text": "Hello from n8n! This is a test message sent via the Rocket.Chat node.",
        "options": {
          "alias": "n8n Bot", // Optional: Override the bot's display name
          "avatar": "https://n8n.io/n8n-logo.png" // Optional: Override the bot's avatar
        }
      },
      "id": "rocketchat-post-uuid",
      "name": "Post to Rocket.Chat",
      "type": "n8n-nodes-base.rocketChat",
      "typeVersion": 1,
      "position": [
        800,
        600
      ],
      "credentials": {
        "rocketChatApi": {
          "id": "YOUR_ROCKETCHAT_CREDENTIAL_ID", // Replace with your actual Rocket.Chat credential ID
          "name": "Rocket.Chat API"
        }
      }
      // This node sends messages to Rocket.Chat channels or users.
      // Requires Rocket.Chat API credentials (Server URL, User ID, Access Token).
    }
  ],
  "connections": {}
}
```

---

## 221. RssFeedRead.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "url": "https://n8n.io/blog/feed/", // Replace with the desired RSS feed URL
        "options": {
          "ignoreSslIssues": false // Optional: Set to true to ignore SSL errors
        }
      },
      "id": "rss-read-uuid",
      "name": "Read n8n Blog Feed",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        800,
        700
      ]
      // This node reads items from a specified RSS feed URL.
      // It outputs items found in the feed.
    }
  ],
  "connections": {}
}
```

---

## 222. Salesforce.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "lead",
        "operation": "create",
        "lastName": "Doe",
        "company": "ACME Corporation",
        "additionalFields": {
          "firstName": "John",
          "email": "john.doe@example.com",
          "phone": "+15551234567",
          "leadSource": "Web",
          "status": "Open - Not Contacted",
          // Example of adding a custom field (ensure the API name is correct)
          "customFieldsUi": {
            "customFieldValues": [
              {
                "fieldApiName": "My_Custom_Field__c", // Replace with your actual custom field API name
                "fieldValue": "Custom Value Example"
              }
            ]
          }
        },
        "options": {}
      },
      "id": "salesforce-create-lead-uuid",
      "name": "Create Salesforce Lead",
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        800,
        800
      ],
      "credentials": {
        "salesforceApi": {
          "id": "YOUR_SALESFORCE_CREDENTIAL_ID", // Replace with your actual Salesforce credential ID
          "name": "Salesforce API"
        }
      }
      // This node interacts with Salesforce API.
      // Requires Salesforce credentials (OAuth2 or Access Token).
      // Example demonstrates creating a Lead with standard and custom fields.
      // Many other resources (Account, Contact, Case, etc.) and operations (get, update, delete, upsert, search) are available.
    }
  ],
  "connections": {}
}
```

---

## 223. SalesforceTrigger.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "events": [
          "On Lead Created", // Example: Trigger when a new Lead is created
          "On Lead Updated"  // Example: Trigger when a Lead is updated
        ],
        "options": {}
      },
      "id": "salesforce-trigger-uuid",
      "name": "Salesforce Lead Trigger",
      "type": "n8n-nodes-base.salesforceTrigger",
      "typeVersion": 1,
      "position": [
        400,
        500
      ],
      "credentials": {
        "salesforceTriggerApi": {
          "id": "YOUR_SALESFORCE_CREDENTIAL_ID", // Replace with your actual Salesforce credential ID
          "name": "Salesforce Trigger API"
        }
      }
      // This node triggers the workflow when specified events occur in Salesforce.
      // Requires Salesforce credentials (OAuth2 or Access Token).
      // You need to register the webhook manually in Salesforce Setup after activating the workflow.
      // Supported events include creation/updates for Account, Attachment, Case, Contact, Custom Object, Lead, Opportunity, Task, User.
    }
    // Add subsequent nodes here to process the triggered data
  ],
  "connections": {}
}
```

---

## 224. SeaTable.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "row",
        "operation": "create", // Example 1: Create a new row
        "baseId": "YOUR_BASE_ID", // Replace with your SeaTable Base ID
        "tableName": "YOUR_TABLE_NAME", // Replace with your Table Name
        "rowContent": {
          "Name": "{{ $json.name }}", // Map data from previous nodes
          "Email": "{{ $json.email }}",
          "Status": "New"
        },
        "options": {}
      },
      "id": "seatable-create-uuid",
      "name": "SeaTable Create Row",
      "type": "n8n-nodes-base.seaTable",
      "typeVersion": 1,
      "position": [
        600,
        700
      ],
      "credentials": {
        "seaTableApi": {
          "id": "YOUR_SEATABLE_CREDENTIAL_ID", // Replace with your SeaTable API credential ID
          "name": "SeaTable API"
        }
      }
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll", // Example 2: Get all rows from a table
        "baseId": "YOUR_BASE_ID", // Replace with your SeaTable Base ID
        "tableName": "YOUR_TABLE_NAME", // Replace with your Table Name
        "returnAll": true,
        "options": {
          "viewName": "Default View", // Optional: Specify a view name
          "convertLink": true // Optional: Convert link columns to URLs
        }
      },
      "id": "seatable-getall-uuid",
      "name": "SeaTable Get All Rows",
      "type": "n8n-nodes-base.seaTable",
      "typeVersion": 1,
      "position": [
        800,
        700
      ],
      "credentials": {
        "seaTableApi": {
          "id": "YOUR_SEATABLE_CREDENTIAL_ID", // Replace with your SeaTable API credential ID
          "name": "SeaTable API"
        }
      }
      // This node interacts with SeaTable bases.
      // Requires SeaTable API credentials.
      // Operations include Create, Delete, Get, Get All, Update for rows.
    }
  ],
  "connections": {
    "SeaTable Create Row": {
      "main": [
        [
          {
            "node": "SeaTable Get All Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

---

## 225. SendGrid.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "mail",
        "operation": "send", // Example 1: Send an email
        "fromEmail": "sender@example.com",
        "toEmail": "{{ $json.recipientEmail }}", // Use data from previous node
        "subject": "Hello from n8n!",
        "text": "This is a test email sent via SendGrid and n8n.",
        "html": "<p>This is a <strong>test email</strong> sent via SendGrid and n8n.</p>",
        "options": {
          "replyToEmail": "reply@example.com", // Optional: Set reply-to address
          "ccEmail": "cc@example.com", // Optional: CC recipients
          "bccEmail": "bcc@example.com" // Optional: BCC recipients
        }
      },
      "id": "sendgrid-send-uuid",
      "name": "SendGrid Send Email",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        600,
        800
      ],
      "credentials": {
        "sendGridApi": {
          "id": "YOUR_SENDGRID_CREDENTIAL_ID", // Replace with your SendGrid API credential ID
          "name": "SendGrid API"
        }
      }
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "createOrUpdate", // Example 2: Create or update a contact
        "email": "{{ $json.contactEmail }}",
        "additionalFields": {
          "firstName": "{{ $json.firstName }}",
          "lastName": "{{ $json.lastName }}"
          // Add other custom fields as needed
        },
        "options": {
          "listIds": [
            "YOUR_LIST_ID_1", // Optional: Add contact to specific lists
            "YOUR_LIST_ID_2"
          ]
        }
      },
      "id": "sendgrid-contact-uuid",
      "name": "SendGrid Create/Update Contact",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        800,
        800
      ],
      "credentials": {
        "sendGridApi": {
          "id": "YOUR_SENDGRID_CREDENTIAL_ID", // Replace with your SendGrid API credential ID
          "name": "SendGrid API"
        }
      }
      // This node interacts with SendGrid.
      // Requires SendGrid API credentials.
      // Operations include managing contacts, lists, and sending emails.
    }
  ],
  "connections": {
    "SendGrid Send Email": {
      "main": [
        [
          {
            "node": "SendGrid Create/Update Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

---

## 226. SendInBlue.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "email",
        "operation": "send", // Example 1: Send a transactional email
        "sender": {
          "name": "Your Company Name",
          "email": "sender@yourdomain.com"
        },
        "to": [
          {
            "email": "{{ $json.recipientEmail }}", // Use data from previous node
            "name": "{{ $json.recipientName }}"
          }
        ],
        "subject": "Order Confirmation #{{ $json.orderId }}",
        "htmlContent": "<h1>Thank you for your order!</h1><p>Your order details...</p>",
        "textContent": "Thank you for your order! Your order details...",
        "options": {
          "replyTo": {
            "email": "support@yourdomain.com",
            "name": "Support Team"
          },
          "tags": [
            "transactional",
            "order-confirmation"
          ]
        }
      },
      "id": "brevo-send-email-uuid",
      "name": "Brevo Send Email",
      "type": "n8n-nodes-base.brevo", // Note: Sendinblue is now Brevo
      "typeVersion": 1,
      "position": [
        600,
        900
      ],
      "credentials": {
        "brevoApi": {
          "id": "YOUR_BREVO_CREDENTIAL_ID", // Replace with your Brevo API credential ID
          "name": "Brevo API"
        }
      }
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "createOrUpdate", // Example 2: Create or update a contact
        "email": "{{ $json.newContactEmail }}",
        "attributes": {
          "FIRSTNAME": "{{ $json.firstName }}",
          "LASTNAME": "{{ $json.lastName }}",
          "COMPANY": "{{ $json.companyName }}"
          // Add other attributes as defined in your Brevo account
        },
        "updateEnabled": true,
        "options": {
          "listIds": [
            123, // Optional: Add contact to specific list IDs
            456
          ]
        }
      },
      "id": "brevo-contact-uuid",
      "name": "Brevo Create/Update Contact",
      "type": "n8n-nodes-base.brevo", // Note: Sendinblue is now Brevo
      "typeVersion": 1,
      "position": [
        800,
        900
      ],
      "credentials": {
        "brevoApi": {
          "id": "YOUR_BREVO_CREDENTIAL_ID", // Replace with your Brevo API credential ID
          "name": "Brevo API"
        }
      }
      // This node interacts with Brevo (formerly Sendinblue).
      // Requires Brevo API credentials.
      // Operations include managing contacts, attributes, emails, and senders.
    }
  ],
  "connections": {
    "Brevo Send Email": {
      "main": [
        [
          {
            "node": "Brevo Create/Update Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

---

## 227. ServiceNow.md ---

```json
{
  "nodes": [
    {
      "parameters": {
        "resource": "incident",
        "operation": "create", // Example 1: Create an incident
        "additionalFields": {
          "short_description": "{{ $json.summary }}", // Use data from previous node
          "description": "{{ $json.details }}",
          "caller_id": "{{ $json.callerSysId }}", // Sys ID of the caller
          "urgency": "2", // 1=High, 2=Medium, 3=Low
          "impact": "2" // 1=High, 2=Medium, 3=Low
        }
      },
      "id": "servicenow-create-incident-uuid",
      "name": "ServiceNow Create Incident",
      "type": "n8n-nodes-base.serviceNow",
      "typeVersion": 1,
      "position": [
        600,
        1000
      ],
      "credentials": {
        "serviceNowApi": {
          "id": "YOUR_SERVICENOW_CREDENTIAL_ID", // Replace with your ServiceNow credential ID
          "name": "ServiceNow API"
        }
      }
    },
    {
      "parameters": {
        "resource": "tableRecord",
        "operation": "getAll", // Example 2: Get all records from a specific table (e.g., cmdb_ci_server)
        "tableName": "cmdb_ci_server", // Specify the table name
        "returnAll": true,
        "options": {
          "sysparm_query": "operational_status=1^os=Linux Red Hat", // Example query: Operational Linux Red Hat servers
          "sysparm_fields": "sys_id,name,ip_address,os", // Specify fields to return
          "sysparm_limit": 100 // Limit the number of records returned
        }
      },
      "id": "servicenow-get-servers-uuid",
      "name": "ServiceNow Get Linux Servers",
      "type": "n8n-nodes-base.serviceNow",
      "typeVersion": 1,
      "position": [
        800,
        1000
      ],
      "credentials": {
        "serviceNowApi": {
          "id": "YOUR_SERVICENOW_CREDENTIAL_ID", // Replace with your ServiceNow credential ID
          "name": "ServiceNow API"
        }
      }
      // This node interacts with ServiceNow.
      // Requires ServiceNow credentials (Basic Auth or OAuth2).
      // Operations include managing incidents, users, table records, CIs, etc.
    }
  ],
  "connections": {
    "ServiceNow Create Incident": {
      "main": [
        [
          {
            "node": "ServiceNow Get Linux Servers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

---

## 228. Slack.md ---

# Slack Integration

Use the Slack node to automate work in Slack, and integrate Slack with other applications. n8n has built-in support for a wide range of Slack features, including creating, archiving, and closing channels, getting users and files, as well as deleting messages.

**Node Type:** Action Node (`n8n-nodes-base.slack`)

**Credentials:**

Requires Slack credentials. Refer to the [Slack credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/slack/) for guidance on setting up authentication. You must add the appropriate scopes to your Slack app for this node to work.

**AI Tool Integration:**

This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/ai-tools/#node-parameters).

**Operations:**

*   **Channel**
    *   **Archive:** Archive a channel.
    *   **Close:** Close a direct message or multi-person direct message.
    *   **Create:** Create a public or private channel-based conversation.
    *   **Get:** Get information about a channel.
    *   **Get Many:** Get a list of channels in Slack.
    *   **History:** Get a channel's history of messages and events.
    *   **Invite:** Invite a user to a channel.
    *   **Join:** Join an existing channel.
    *   **Kick:** Remove a user from a channel.
    *   **Leave:** Leave a channel.
    *   **Member:** List the members of a channel.
    *   **Open:** Open or resume a direct message or multi-person direct message.
    *   **Rename:** Rename a channel.
    *   **Replies:** Get a thread of messages posted to a channel.
    *   **Set Purpose:** Set the purpose of a channel.
    *   **Set Topic:** Set the topic of a channel.
    *   **Unarchive:** Unarchive a channel.
*   **File**
    *   **Get:** Get a file.
    *   **Get Many:** Get and filter team files.
    *   **Upload:** Create or upload an existing file.
*   **Message**
    *   **Delete:** Delete a message.
    *   **Get Permalink:** Get a message's permalink.
    *   **Search:** Search for messages.
    *   **Send:** Send a message.
    *   **Send and Wait for Approval:** Send a message and wait for approval from the recipient before continuing.
    *   **Update:** Update a message.
*   **Reaction**
    *   **Add:** Add a reaction to a message.
    *   **Get:** Get a message's reactions.
    *   **Remove:** Remove a reaction from a message.
*   **Star**
    *   **Add:** Add a star to an item.
    *   **Delete:** Delete a star from an item.
    *   **Get Many:** Get a list of an authenticated user's stars.
*   **User**
    *   **Get:** Get information about a user.
    *   **Get Many:** Get a list of users.
    *   **Get User's Profile:** Retrieve a user's profile information.
    *   **Get User's Status:** Retrieve a user's status.
    *   **Update User's Profile:** Update a user's profile information.
*   **User Group**
    *   **Create:** Create a user group.
    *   **Disable:** Disable a user group.
    *   **Enable:** Enable a user group.
    *   **Get Many:** Get a list of user groups.
    *   **Update:** Update a user group.

**Related Trigger Node:**

There is also a [Slack Trigger node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.slacktrigger/) available to start workflows based on Slack events.

**Templates and Examples:**

*   [Browse Slack integration templates](https://n8n.io/integrations/slack/templates/)
*   [Search all templates](https://n8n.io/templates/)

**Handling Unsupported Operations:**

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Slack credentials to call the Slack API directly.

Refer to the official [Slack API documentation](https://api.slack.com/) for more details on available methods and required scopes.

---

## 229. Square.md ---

# Square Integration

Based on the latest research, n8n does not currently offer an official built-in integration node for Square.

Square provides a suite of tools for businesses, including payment processing, point-of-sale, and more. Integrating Square with n8n requires using alternative methods, as a dedicated official node is not available.

Options for connecting n8n with Square include:

1.  **Community Nodes:** Research indicated the existence of a community-developed Square node available on GitHub ([Rostammahabadi/n8n-nodes-square](https://github.com/Rostammahabadi/n8n-nodes-square)). Users can install and utilize this community node, keeping in mind it is not officially supported by n8n and may have its own maintenance lifecycle.
2.  **HTTP Request Node:** Interact directly with the [Square API](https://developer.squareup.com/reference/square). This involves:
    *   Obtaining API credentials (Access Token, Application ID) from your Square Developer Dashboard.
    *   Configuring the HTTP Request node in n8n with the correct Square API endpoint URL (e.g., `https://connect.squareup.com/v2/...`), HTTP method, authentication headers (typically `Authorization: Bearer YOUR_ACCESS_TOKEN`), and request body according to the Square API documentation.

Always consult the official Square Developer documentation for the most accurate details on API endpoints, authentication, and data formats.

---

## 230. Stabilityai.md ---

# Stability AI Integration

Based on the latest research, n8n does not currently offer an official built-in integration node for Stability AI.

Stability AI provides powerful generative AI models for images and other modalities. While a dedicated official node is not available, users can integrate Stability AI into their n8n workflows using alternative methods.

Options for connecting n8n with Stability AI include:

1.  **Community Nodes:** Research indicated the existence of a community-developed Stability AI node available on GitHub ([cedricziel/n8n-nodes-stabilityai](https://github.com/cedricziel/n8n-nodes-stabilityai)). Users can install and utilize this community node, keeping in mind it is not officially supported by n8n and relies on community maintenance.
2.  **HTTP Request Node:** Interact directly with the [Stability AI API](https://platform.stability.ai/docs/api-reference). This involves:
    *   Obtaining an API key from your Stability AI account.
    *   Configuring the HTTP Request node in n8n with the correct Stability AI API endpoint URL (e.g., for image generation, text-to-image, etc.), HTTP method (usually POST), authentication headers (`Authorization: Bearer YOUR_API_KEY`, `Accept: application/json`), and request body (often `multipart/form-data` or `application/json` depending on the endpoint) according to the Stability AI API documentation.

Always consult the official [Stability AI Developer Platform documentation](https://platform.stability.ai/docs/) for the most accurate details on API endpoints, authentication, request parameters, and response formats.

---

## 231. Stripe.md ---

# Stripe Integration

Use the Stripe node to automate work in Stripe, and integrate Stripe with other applications. n8n has built-in support for a wide range of Stripe features, including getting balance, creating charges, managing customers, coupons, sources, and tokens.

**Node Type:** Action Node (`n8n-nodes-base.stripe`)

**Credentials:**

Requires Stripe credentials. Refer to the [Stripe credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/stripe/) for guidance on setting up authentication using your Stripe API keys.

**AI Tool Integration:**

This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/ai-tools/#node-parameters).

**Operations:**

*   **Balance**
    *   Get: Retrieve the current account balance.
*   **Charge**
    *   Create: Create a new charge (payment).
    *   Get: Retrieve details of a specific charge.
    *   Get All: Retrieve a list of charges (potentially filtered).
    *   Update: Update details of an existing charge.
*   **Coupon**
    *   Create: Create a new coupon.
    *   Get All: Retrieve a list of coupons.
*   **Customer**
    *   Create: Create a new customer.
    *   Delete: Delete a customer.
    *   Get: Retrieve details of a specific customer.
    *   Get All: Retrieve a list of customers (potentially filtered).
    *   Update: Update details of an existing customer.
*   **Customer Card**
    *   Add: Add a new card (payment source) to a customer.
    *   Get: Retrieve details of a specific customer card.
    *   Remove: Remove a card from a customer.
*   **Source**
    *   Create: Create a new payment source.
    *   Delete: Delete a payment source.
    *   Get: Retrieve details of a specific payment source.
*   **Token**
    *   Create: Create a single-use token representing securely collected payment information.

**Related Trigger Node:**

There is also a [Stripe Trigger node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.stripetrigger/) available to start workflows based on Stripe events (webhooks).

**Templates and Examples:**

*   [Browse Stripe integration templates](https://n8n.io/integrations/stripe/templates/)
*   [Search all templates](https://n8n.io/templates/)

**Handling Unsupported Operations:**

If this node doesn't support the specific Stripe API operation you need, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) with your Stripe credentials to make custom API calls.

Refer to the official [Stripe API documentation](https://stripe.com/docs/api) for comprehensive details on all available endpoints and parameters.

---

## 232. Teable.md ---

# Teable Integration

Based on the latest research, n8n does not currently offer an official built-in integration node specifically for Teable.

Teable is a modern database application platform designed for collaboration and data management. While a dedicated n8n node is not yet available, you can still integrate Teable into your workflows using the following methods:

1.  **HTTP Request Node:** This is the primary method for interacting with Teable. You can use n8n's generic [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to make calls directly to the [Teable API](https://teable.io/docs/api/introduction). This involves:
    *   **Authentication:** Obtain an API key or authentication token from your Teable account settings. Configure the HTTP Request node's authentication settings (usually using Header Auth) to include your token (e.g., `Authorization: Bearer YOUR_API_TOKEN`).
    *   **API Calls:** Consult the [Teable API documentation](https://teable.io/docs/api/introduction) for specific endpoint URLs, required HTTP methods (GET, POST, PATCH, DELETE, etc.), and the expected request body structure for operations like creating records, retrieving data, updating entries, or deleting records.
    *   **Example (Conceptual):** To create a new record in a Teable base, you might configure the HTTP Request node with:
        *   Method: `POST`
        *   URL: `https://api.teable.io/api/v1/base/{baseId}/table/{tableId}/record` (Replace `{baseId}` and `{tableId}`)
        *   Authentication: Header Auth with your API token.
        *   Body (JSON): `{"fields": {"FieldName1": "Value1", "FieldName2": "Value2"}}`

2.  **Community Nodes:** Keep an eye on the [n8n community forum](https://community.n8n.io/) and GitHub. As Teable grows, community members might develop and share custom nodes that simplify integration. Searching the forum for "Teable" might reveal existing solutions or ongoing development efforts.

**Key Considerations:**

*   **API Documentation:** Always refer to the official [Teable API documentation](https://teable.io/docs/api/introduction) for the most accurate and up-to-date information on endpoints, authentication, rate limits, and data formats.
*   **Error Handling:** Implement robust error handling in your n8n workflow when using the HTTP Request node to manage potential API errors from Teable.

By utilizing the HTTP Request node and staying informed about community developments, you can effectively integrate Teable with n8n for your automation needs.

---

## 233. Telegram.md ---

## Telegram Node

**Node Type:** Action Node (`n8n-nodes-base.telegram`)

**Source:** [https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.telegram/](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.telegram/)

**Description:**

This node allows interaction with the Telegram Bot API to perform various actions within Telegram, such as sending messages, managing chats, handling files, and responding to callbacks. It facilitates integrating Telegram bots with other applications and services.

**Credentials:**

Requires Telegram API credentials (Bot API Token). Refer to [Telegram Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/telegram/) for setup guidance.

**Efficiency Considerations (for AI Agent Interfaces):**

*   **Minimize API Calls:** Design workflows to avoid unnecessary calls. For example, cache chat information if possible instead of repeatedly using `Get` chat operations.
*   **Optimize Payloads:** Send only necessary information in messages or callbacks. Avoid overly large or complex data structures.
*   **Leverage Trigger Context:** Utilize the data provided by the Telegram Trigger node efficiently to minimize the need for follow-up `Get` operations within the action node.
*   **Text-Based Focus:** Prioritize text-based interactions (`SendMessage`, `EditMessageText`) for bot communication, as they are generally more efficient and suitable for conversational interfaces.

**Resources and Operations:**

1.  **Chat (`chat`)**
    *   **Get:** Retrieves up-to-date information about a chat.
        *   *Parameters:* Chat ID (Required, String/Number).
    *   **Get Administrators:** Gets a list of administrators in a chat.
        *   *Parameters:* Chat ID (Required, String/Number).
    *   **Get Member:** Gets details of a specific chat member.
        *   *Parameters:* Chat ID (Required, String/Number), User ID (Required, Number).
    *   **Leave:** Makes the bot leave a chat.
        *   *Parameters:* Chat ID (Required, String/Number).
    *   **Set Description:** Changes the description of a group, supergroup, or channel chat.
        *   *Parameters:* Chat ID (Required, String/Number), Description (Optional, String).
    *   **Set Title:** Changes the title of a group, supergroup, or channel chat.
        *   *Parameters:* Chat ID (Required, String/Number), Title (Required, String).

2.  **Callback (`callback`)**
    *   **Answer Query:** Sends answers to callback queries triggered by inline keyboards. Used to provide feedback to the user (e.g., confirmation pop-ups).
        *   *Parameters:* Callback Query ID (Required, String), Text (Optional, String), Show Alert (Optional, Boolean), URL (Optional, String), Cache Time (Optional, Number).
    *   **Answer Inline Query:** Sends results for an inline query. Used when users type the bot's username in any chat.
        *   *Parameters:* Inline Query ID (Required, String), Results (Required, JSON Array - see Telegram Bot API docs for `InlineQueryResult` types), Cache Time (Optional, Number), Is Personal (Optional, Boolean), Next Offset (Optional, String), Switch PM Text (Optional, String), Switch PM Parameter (Optional, String).

3.  **File (`file`)**
    *   **Get File:** Retrieves a file sent to the bot. Returns a temporary link to download the file.
        *   *Parameters:* File ID (Required, String - obtained from message objects).
        *   *Output:* Includes `file_path` which can be used with `https://api.telegram.org/file/bot<token>/<file_path>` to download.

4.  **Message (`message`)**
    *   **Delete Chat Message:** Deletes a message.
        *   *Parameters:* Chat ID (Required, String/Number), Message ID (Required, Number).
    *   **Edit Message Text:** Edits the text content of a previously sent message.
        *   *Parameters:* Chat ID (Required, String/Number), Message ID (Required, Number), Text (Required, String), Parse Mode (Optional, String: `MarkdownV2`, `HTML`, `Markdown`), Disable Web Page Preview (Optional, Boolean), Reply Markup (Optional, JSON - InlineKeyboardMarkup).
    *   **Pin Chat Message:** Adds a message to the pinned messages list in a chat.
        *   *Parameters:* Chat ID (Required, String/Number), Message ID (Required, Number), Disable Notification (Optional, Boolean).
    *   **Send Animation:** Sends animation files (GIF or H.264/MPEG-4 AVC video without sound).
        *   *Parameters:* Chat ID (Required, String/Number), Animation (Required, String - File ID, URL, or Binary Property Name), Duration (Optional, Number), Width (Optional, Number), Height (Optional, Number), Thumb (Optional, String - File ID, URL, or Binary Property Name), Caption (Optional, String), Parse Mode (Optional, String), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON - InlineKeyboardMarkup, ReplyKeyboardMarkup, etc.).
    *   **Send Audio:** Sends audio files (e.g., mp3).
        *   *Parameters:* Chat ID (Required, String/Number), Audio (Required, String - File ID, URL, or Binary Property Name), Caption (Optional, String), Parse Mode (Optional, String), Duration (Optional, Number), Performer (Optional, String), Title (Optional, String), Thumb (Optional, String), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Chat Action:** Sends a status update (e.g., 'typing...', 'uploading photo...'). Action is displayed for 5 seconds.
        *   *Parameters:* Chat ID (Required, String/Number), Action (Required, String: `typing`, `upload_photo`, `record_video`, `upload_video`, `record_voice`, `upload_voice`, `upload_document`, `choose_sticker`, `find_location`, `record_video_note`, `upload_video_note`).
    *   **Send Document:** Sends general files.
        *   *Parameters:* Chat ID (Required, String/Number), Document (Required, String - File ID, URL, or Binary Property Name), Thumb (Optional, String), Caption (Optional, String), Parse Mode (Optional, String), Disable Content Type Detection (Optional, Boolean), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Location:** Sends a geographic location point.
        *   *Parameters:* Chat ID (Required, String/Number), Latitude (Required, Number), Longitude (Required, Number), Horizontal Accuracy (Optional, Number), Live Period (Optional, Number - for live locations), Heading (Optional, Number), Proximity Alert Radius (Optional, Number), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Media Group:** Sends a group of photos or videos as an album.
        *   *Parameters:* Chat ID (Required, String/Number), Media (Required, JSON Array - InputMediaPhoto, InputMediaVideo), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number).
    *   **Send Message:** Sends a text message.
        *   *Parameters:* Chat ID (Required, String/Number), Text (Required, String), Parse Mode (Optional, String), Disable Web Page Preview (Optional, Boolean), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Photo:** Sends photo files.
        *   *Parameters:* Chat ID (Required, String/Number), Photo (Required, String - File ID, URL, or Binary Property Name), Caption (Optional, String), Parse Mode (Optional, String), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Sticker:** Sends static (.WEBP), animated (.TGS), or video (.WEBM) stickers.
        *   *Parameters:* Chat ID (Required, String/Number), Sticker (Required, String - File ID or URL), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Send Video:** Sends video files.
        *   *Parameters:* Chat ID (Required, String/Number), Video (Required, String - File ID, URL, or Binary Property Name), Duration (Optional, Number), Width (Optional, Number), Height (Optional, Number), Thumb (Optional, String), Caption (Optional, String), Parse Mode (Optional, String), Supports Streaming (Optional, Boolean), Disable Notification (Optional, Boolean), Reply To Message ID (Optional, Number), Reply Markup (Optional, JSON).
    *   **Unpin Chat Message:** Removes a message from the pinned list.
        *   *Parameters:* Chat ID (Required, String/Number), Message ID (Optional, Number - unpins specific message if provided, otherwise unpins the latest).

**Input:**

Accepts data from previous nodes, often used via expressions `{{ $json.fieldName }}` or `{{ $node["Node Name"].json.field }}` to populate parameters like Chat ID, Message ID, Text, File IDs, etc.

**Output:**

Outputs the result from the Telegram Bot API call, typically containing details of the sent message, updated chat, file info, or confirmation of the action performed.

---

## 234. Tiktok.md ---

# TikTok Integration

Based on the latest research, n8n does not currently offer an official built-in integration node for TikTok.

While TikTok is a major social media platform, direct integration via an official n8n node is not available in the standard distribution. Community interest is high, and various solutions have been discussed or developed.

Users looking to connect n8n with TikTok can explore these options:

1.  **Community Nodes:** Search the n8n community forums and GitHub for user-developed TikTok nodes. Research indicated the existence of community efforts (e.g., [igabm/n8n-nodes-tiktok](https://github.com/igabm/n8n-nodes-tiktok), though its status was noted as WIP/not working at the time of research) or discussions about using specific APIs like `upload-post.com`.
2.  **HTTP Request Node:** Interact directly with the [TikTok APIs](https://developers.tiktok.com/) (e.g., Content Posting API, Login Kit, etc.). This is a complex option requiring:
    *   Registering an application with TikTok for Developers and obtaining credentials.
    *   Handling authentication (often OAuth 2.0).
    *   Understanding the specific API endpoints and requirements for desired actions (posting, retrieving data, etc.).
    *   Configuring the HTTP Request node in n8n accordingly.

Given the complexities and evolving nature of TikTok's APIs, using the HTTP Request node requires careful study of their developer documentation. Community nodes, if stable and maintained, might offer a simpler path for specific use cases.

---

## 235. Vercel.md ---

# Vercel Integration

Based on the latest research, n8n does not currently offer an official built-in integration node for interacting with the Vercel platform API.

Vercel is a popular platform for frontend framework deployment and hosting. While you can host n8n instances *on* Vercel, and custom nodes might leverage Vercel services (like its AI SDK), there isn't a dedicated n8n node designed to manage Vercel deployments, projects, or other platform features from within an n8n workflow.

Users aiming to automate Vercel tasks using n8n would typically need to:

1.  **Use the HTTP Request Node:** Interact directly with the [Vercel API](https://vercel.com/docs/rest-api). This involves:
    *   Obtaining an API token from your Vercel account settings.
    *   Configuring the HTTP Request node in n8n with the correct Vercel API endpoint URL (e.g., `https://api.vercel.com/...`), HTTP method, authentication headers (`Authorization: Bearer YOUR_API_TOKEN`), and request body according to Vercel's API specifications.
2.  **Explore Community Solutions:** Check the n8n community forums or GitHub for any user-created nodes or workflows specifically designed for Vercel API integration, although none were prominently found during the initial research focused on official nodes.

For information on running n8n *on* Vercel or using Vercel's other services like the AI SDK, refer to specific community guides or Vercel documentation covering those topics.

---

